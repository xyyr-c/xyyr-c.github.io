<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>初学安卓逆向（课是关卡+1）</title>
    <link href="/2024/10/23/%E5%88%9D%E5%AD%A6%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/"/>
    <url>/2024/10/23/%E5%88%9D%E5%AD%A6%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h1 id="初学安卓逆向（课是关卡-1）"><a href="#初学安卓逆向（课是关卡-1）" class="headerlink" title="初学安卓逆向（课是关卡+1）"></a>初学安卓逆向（课是关卡+1）</h1><blockquote><p>新手出学安卓逆向，有一点点pwn的二进制基础，直接从b站正己的教程上跟着做，先看一遍视频，然后再实操一下，忘了的再回头看（本来是跟着做的，结果发现那样子效率不高，容易忘）</p><p>b站教程地址：<a href="https://www.bilibili.com/video/BV14v4y1D7yA/?spm_id_from=333.788&vd_source=5aaa6cf536f1e9f7b67225df23bb5e07">吾爱破解安卓逆向入门教程《安卓逆向这档事》</a></p></blockquote><ol><li><p>所储存显示字符串的地方</p><ul><li>arsc</li><li>xml</li><li>dex</li></ul></li><li><p>对于应用程序，先进行安装包提取</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409111701592.png" alt="image-20240911170033531"></p><ol start="3"><li>np管理器里的通用编辑直接继承好了如何修改app名字和图表，本质是在xml文件内有配置信息，（但是修改了之后没有显示？）</li><li>xml中mt管理器修改activity更稳定，activitiy的主页面修改可以选择跳转窗口。</li></ol></li></ol><h2 id="第一关重现"><a href="#第一关重现" class="headerlink" title="第一关重现"></a>第一关重现</h2><ol><li><p>改包名双开，直接在NP或MT管理器中，选择APK共存，修改包名，就能同时安装两个相同的文件了。<img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131140027.png" alt="image-20240913114012967"></p></li><li><p>字符串的修改替换与汉化</p><p>原本：</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131141412.png" alt="image-20240913114137345"></p><ul><li><p>逐个修改：定位选择后，找到对应的文件，然后修改。（比如将hello world修改为hello xyyr）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131142197.png" alt="image-20240913114233171"></p><p>寻找的方法是在这里搜索，然后找到对应的文件，进行修改（arsc文件在mt需要会员，这里用np）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131143575.png" alt="image-20240913114345509"></p><p>如图搜索到这里，进行更改即可（一般字符串都在这里，可以批量对这儿进行汉化）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131146634.png" alt="image-20240913114645576"></p></li></ul></li></ol><p>  替换后如图<img src="C:/Users/czy/AppData/Roaming/Typora/typora-user-images/image-20240913115049374.png" alt="image-20240913115049374"><br>3. 图片更改以及图标</p><p>   用开发助手的布局查看，点击查看表项（长按可以复制）</p><p>   <img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131516441.png" alt="image-20240913151650362"></p><p>  然后要用MT管理器的搜索，xml搜索，用资源id搜（np没有找到这个功能）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131522663.png" alt="image-20240913152254616"></p><p>搜索后找到jf.xml</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131524713.png" alt="image-20240913152446677"></p><p>srcCompat是对应的路径，但是认不出来，把它复制下来，在mt管理器，打开arsc文件，选择arsc编辑器（只有这个不需要会员），id定位资源</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131528304.png"></p><p>定位后就可以找到它了，把cf.jpg删了，把想要的图片名字改成cf.jpg，就可以替换过去了。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131529208.png" alt="image-20240913152956177"></p><p>最终效果：</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131535823.png" alt="image-20240913153548749"></p><h2 id="第二关重现"><a href="#第二关重现" class="headerlink" title="第二关重现"></a>第二关重现</h2><p>搜索大会员找到相应的位置</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131542458.png" alt="image-20240913154221376"></p><ol><li><p>修改判断<br><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131544902.png" alt="image-20240913154435786"></p><p>根据名字找到这个方法，如果p0&gt;&#x3D;v0，就跳转到了cond_15，否则继续走到.line34，unicode编码解码后的中文对应的是请先获得10个硬币哦</p><p>将ge改为le，往下翻，点住跳转的isvip（）,将返回值改为1，注意这里函数返回的是寄存器，所以把寄存器的复制改为1</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131556608.png" alt="image-20240913155640585"></p><p>成功，还是比较简单的。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131601078.png" alt="image-20240913160114035"></p></li><li><p>强制跳转</p></li><li><p>修改寄存器的值</p><p>两种方法一起实践了，这里改值，0硬币就可以投币，并将到vip判断的强制跳转更改到line37的大会员投币成功</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131605703.png" alt="image-20240913160505650"></p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131606158.png" alt="image-20240913160615121"></p><p>重新安装签名后，成功。（后来看到，这不算是强制跳转，强制跳转是将if语句改为goto(区别不大，不再来一遍了，继续往下)</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131609498.png" alt="image-20240913160911467"></p></li></ol><h2 id="第三关重现"><a href="#第三关重现" class="headerlink" title="第三关重现"></a>第三关重现</h2><ol><li><p>启动时的3s广告（这属于activity类的广子）</p><p>（1）不推荐的用法：</p><p>用算法助手辨析到对应的一整串名字后，搜索xml文件，将主activity直接修改到第三关的activity，这样一打开就会直接进入</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409141645838.png" alt="image-20240914164510710"></p></li></ol><p>（2）修改停留时长</p><p>这是开屏广告的activity</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409141648138.png" alt="image-20240914164816093"></p><p>搜索AdActivity</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409141649410.png" alt="image-20240914164930380"></p><p>找到对应的方法</p><p>把代码扒下来</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs wren"><br><span class="hljs-comment">// Decompiled by Jadx (from NP Manager)</span><br><span class="hljs-comment">//</span><br><span class="hljs-variable">package</span> <span class="hljs-variable">com</span>.<span class="hljs-property">zj</span>.<span class="hljs-property">wuaipojie</span>.<span class="hljs-property">ui</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-variable">android</span>.<span class="hljs-property">content</span>.<span class="hljs-property">Context</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-variable">android</span>.<span class="hljs-property">content</span>.<span class="hljs-property">Intent</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-variable">android</span>.<span class="hljs-property">os</span>.<span class="hljs-property">Bundle</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-variable">android</span>.<span class="hljs-property">os</span>.<span class="hljs-property">Handler</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-variable">androidx</span>.<span class="hljs-property">appcompat</span>.<span class="hljs-property">app</span>.<span class="hljs-property">AppCompatActivity</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-variable">com</span>.<span class="hljs-property">zj</span>.<span class="hljs-property">wuaipojie</span>.<span class="hljs-property">ui</span>.<span class="hljs-property">AdActivity</span>$.<span class="hljs-property">ExternalSyntheticLambda0</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-variable">kotlin</span>.<span class="hljs-property">Metadata</span>;<br><br>@<span class="hljs-title class_">Metadata</span>(<span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> &#123;<span class="hljs-string">&quot;<span class="hljs-char escape_">\u0000</span>\u001a<span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\u0018</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\u0018</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\b</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\u0010</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\b</span><span class="hljs-char escape_">\u0003</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\u0018</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\u0000</span><span class="hljs-char escape_">\u0018</span><span class="hljs-char escape_">\u0000</span>2<span class="hljs-char escape_">\u0002</span>0<span class="hljs-char escape_">\u0001</span>B<span class="hljs-char escape_">\u0005</span>¢<span class="hljs-char escape_">\u0006</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\u0010</span><span class="hljs-char escape_">\u0002</span>J<span class="hljs-char escape_">\b</span><span class="hljs-char escape_">\u0010</span><span class="hljs-char escape_">\u0003</span>\u001a<span class="hljs-char escape_">\u0002</span>0<span class="hljs-char escape_">\u0004</span>H<span class="hljs-char escape_">\u0002</span>J<span class="hljs-char escape_">\b</span><span class="hljs-char escape_">\u0010</span><span class="hljs-char escape_">\u0005</span>\u001a<span class="hljs-char escape_">\u0002</span>0<span class="hljs-char escape_">\u0004</span>H<span class="hljs-char escape_">\u0002</span>J<span class="hljs-char escape_">\u0012</span><span class="hljs-char escape_">\u0010</span><span class="hljs-char escape_">\u0006</span>\u001a<span class="hljs-char escape_">\u0002</span>0<span class="hljs-char escape_">\u0004</span>2<span class="hljs-char escape_">\b</span><span class="hljs-char escape_">\u0010</span><span class="hljs-char escape_">\u0007</span>\u001a<span class="hljs-char escape_">\u0004</span><span class="hljs-char escape_">\u0018</span><span class="hljs-char escape_">\u0001</span>0<span class="hljs-char escape_">\b</span>H<span class="hljs-char escape_">\u0014</span>¨<span class="hljs-char escape_">\u0006</span><span class="hljs-char escape_">\t</span>&quot;</span>&#125;, <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> &#123;<span class="hljs-string">&quot;Lcom/zj/wuaipojie/ui/AdActivity;&quot;</span>, <span class="hljs-string">&quot;Landroidx/appcompat/app/AppCompatActivity;&quot;</span>, <span class="hljs-string">&quot;()V&quot;</span>, <span class="hljs-string">&quot;jump&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;loadAd&quot;</span>, <span class="hljs-string">&quot;onCreate&quot;</span>, <span class="hljs-string">&quot;savedInstanceState&quot;</span>, <span class="hljs-string">&quot;Landroid/os/Bundle;&quot;</span>, <span class="hljs-string">&quot;app_release&quot;</span>&#125;, <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> &#123;<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>&#125;, <span class="hljs-variable">xi</span> <span class="hljs-operator">=</span> <span class="hljs-number">48</span>)<br><span class="hljs-comment">/* compiled from: AdActivity.kt */</span><br><span class="hljs-variable">public</span> <span class="hljs-variable">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdActivity</span> <span class="hljs-variable">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br>    <span class="hljs-variable">protected</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">onCreate</span>(<span class="hljs-params">Bundle</span> <span class="hljs-params">bundle</span>) &#123;<br>        <span class="hljs-variable language_">super</span>.<span class="hljs-property">onCreate</span>(<span class="hljs-variable">bundle</span>);<br>        <span class="hljs-title function_">setContentView</span>(<span class="hljs-number">2131427363</span>);<br>        <span class="hljs-title function_">loadAd</span>();<br>    &#125;<br><br>    <span class="hljs-variable">private</span> <span class="hljs-variable">final</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">jump</span>() &#123;<br>        <span class="hljs-title function_">startActivity</span>(<span class="hljs-variable">new</span> <span class="hljs-title class_">Intent</span>((<span class="hljs-title class_">Context</span>) <span class="hljs-variable language_">this</span>, <span class="hljs-title class_">ChallengeThird</span>.<span class="hljs-property">class</span>));<br>        <span class="hljs-title function_">finish</span>();<br>    &#125;<br><br>    <span class="hljs-variable">private</span> <span class="hljs-variable">final</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">loadAd</span>() &#123;<br>        <span class="hljs-variable">new</span> <span class="hljs-title class_">Handler</span>().<span class="hljs-property">postDelayed</span>(<span class="hljs-variable">new</span> <span class="hljs-title class_">ExternalSyntheticLambda</span>0(<span class="hljs-variable language_">this</span>), <span class="hljs-number">3000</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* renamed from: loadAd$lambda-0 */</span><br>    <span class="hljs-variable">private</span> <span class="hljs-keyword">static</span> <span class="hljs-variable">final</span> <span class="hljs-variable">void</span> <span class="hljs-variable">m0loadAd</span>$<span class="hljs-variable">lambda</span><span class="hljs-number">-0</span>(<span class="hljs-title class_">AdActivity</span> <span class="hljs-variable">adActivity</span>) &#123;<br>        <span class="hljs-variable">adActivity</span>.<span class="hljs-property">jump</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>大致解释一下逻辑：</p><blockquote><p>由于 onCreate 是 Android 活动生命周期的一部分，它并不需要在代码中手动调用。Android 框架会自动调用 onCreate 方法来初始化活动。–来自gpt</p></blockquote><ul><li><p>调用oncreat先调用父类的初始化方法，然后布置布局文件，再调用loadAd方法，这个方法创建的控制器（可能是这个名字？，没学过Java,暂时这么认为），3000ms后调用下一个名字怪怪的方法，再走到jump方法，开启新的活动，终结当前活动。</p></li><li><p>把3000改为0即可。（要在smail语言中改）</p><p>现在一进去就是这个了，看不到3s的过屏广告。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409141720038.png" alt="image-20240914172046960"></p></li></ul><p>另：突然想起activity记录可以用mt管理器直接获取，比用开发者助手拼手速强。</p><ol start="2"><li><p>清除后续弹窗</p><blockquote><p>算法助手傻瓜式操作，且需要在环境中一直开着，迁移性低且简单，不再赘述。</p></blockquote></li></ol><ul><li><p>资源定位找到这里</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409141731899.png" alt="image-20240914173154863"></p></li></ul><p>后续忘记了，再去看一眼视频。。。</p><p>回头补第一个，可以直接根据程序内部的选择选项来跳转到thirdacitivty：</p><ul><li><p>去class.dex里搜索！！！！（看了一遍又忘了去哪儿搜索了，又回头看的）搜索类名(别复制成main了，问就是复制错了一次，发现找不到重改的)</p><p>从adactivity里复制最后一条（类的smail路径代码）</p></li></ul><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409141750706.png" alt="image-20240914175016631"></p><p>复制下来以后选择搜索代码，由于要选择调用它的，所以排除上面那俩多的，最终只剩一个结果（转成java需要vip，含泪换np，留下贫穷的泪水:cry:</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409141751331.png" alt="image-20240914175101271"></p><p>转成java后看的很明确，就是这一堆选择，改到third就好。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409141758470.png" alt="image-20240914175856395"></p><p>根据跳转逻辑找到这里，把名字改了就</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409141800342.png" alt="image-20240914180043290"></p><p>改成ChallengeThird,测试一下，确实没有ad的那个广告了（而不是0ms看不到顺闪）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409141802284.png" alt="image-20240914180259201"></p><p>好奇后续的广告弹窗都叫dialog，查了查</p><blockquote><p> 弹窗又称为对话框，是App与用户进行交互的常见方式之一。<strong>弹窗分为模态弹窗和非模态弹窗两种，两者的区别在于需不需要用户对其进行回应。</strong> <strong>模态弹窗</strong>会打断用户的正常操作，要求用户必须对其进行回应，否则不能继续其它操作行为；非模态弹窗则不会影响用户的操作，用户可以不对其进行回应，非模态弹窗通常都有时间限制，出现一段时间后就会自动消失。</p><p> <strong>非模态弹窗一般被设计成用来告诉用户信息内容，而模态弹窗除了告诉用户信息内容外还需要用户对其进行功能操作。</strong></p><p> 来自<a href="https://www.cnblogs.com/Starry-20200305/p/12513545.html">Android 四个对话框区别（Toast、Dialog、Actionbar 和 Snackbar） - 一朵小红花儿 - 博客园 (cnblogs.com)</a></p></blockquote><p>这里的就被设计为模态弹窗，不允许干别的。。</p><p>从算法助手里找到对应的调用堆栈，查看相应的内容进行分析，下面都是各种方法，要用方法查询。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409142000087.png" alt="image-20240914200031991"></p><p>根据方法名搜寻到后，一下是java代码，根据java去看smail代码，</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409142017344.png" alt="image-20240914201700267"></p><p>将这两个dialog的show函数去掉</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409142017924.png" alt="image-20240914201727898"></p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409142018014.png" alt="image-20240914201759971"></p><p>点进去检验，已经去掉。</p><ol start="3"><li><p>去除挡着的横幅（这里也就是一个置于最顶层的图片）</p><p>用开发助手的布局查看，复制其id</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409142028685.png" alt="image-20240914202803592"></p></li></ol><p>资源定位找到名字？（原视频没有这一步，但是我寻思之前查图片，使用这里的资源定位），嘶记混了，图片就是查xml，这里是改文字的。。。。。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409142030892.png" alt="image-20240914203001849"></p><p>   资源id搜索到这个xml</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409142031082.png" alt="image-20240914203151027"><br>   下面这行代码可以让图片&#x2F;文字隐藏，用这个，或者将图片宽高改为0dp。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">android:</span>visibility=<span class="hljs-string">&quot;gone&quot;</span><br></code></pre></td></tr></table></figure><p>成功</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409142036490.png" alt="image-20240914203638371"></p><h2 id="第四关重现（太长了，跟着做的）"><a href="#第四关重现（太长了，跟着做的）" class="headerlink" title="第四关重现（太长了，跟着做的）"></a>第四关重现（太长了，跟着做的）</h2><p>给安装包赋予debug权限</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">android:</span>debuggable=<span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure><p>密钥错误的提示找到这里</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410111042636.png" alt="image-20241011104203575"></p><p>找到对应的判断。</p><p>debug得到密钥</p><p>debug的启动方式：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">adb <span class="hljs-keyword">shell</span> <span class="hljs-keyword">am</span> start -D -n <span class="hljs-keyword">com</span>.zj.wuaipojie/.ui.MainActivity<br></code></pre></td></tr></table></figure><p>adb shell am start -D -n<br>adb shell am start -D -n 包名&#x2F;类名<br>am start -n 表示启动一个activity<br>am start -D 表示将应用设置为可调试模式</p><p>包名：</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410111050982.png" alt="image-20241011105012937"></p><p>启动类名：</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410111052188.png" alt="image-20241011105201129"></p><p>启动debug模式后</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410111053752.png" alt="image-20241011105353381"></p><p>点调试后找不到对应的进程，可能安装包不一致，尝试一下</p><p>还是不行，看评论区，自行安装一个adb。。。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410111100144.png" alt="image-20241011110019097"></p><p>安装了一个新的，还是不行（原来不是最新的），官网下载了一个最新的，然后重启jeb，显示出来了。</p><p>调试步入后在这里找到，按理说它应该是返回的v0，在函数的外面就能看到，但是这里显示不出来，去里面看的结果。（说是虚拟机与真机的区别。。）（虚拟机会有些奇奇怪怪的bug）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410111140390.png" alt="image-20241011114014227"></p><p>密钥正确（v)</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410111142019.png" alt="image-20241011114217973"></p><p>log插桩。感觉不难，先写写作业，有时间再试一次。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">invoke-<span class="hljs-keyword">static</span> &#123;对应寄存器&#125;, Lcom<span class="hljs-regexp">/mtools/</span>LogUtils;-&gt;v(Ljava<span class="hljs-regexp">/lang/</span>Object;)V<br></code></pre></td></tr></table></figure><p>先根据文字找到对应的判断，然后判断知道是ChallengFourth这个类，找到check方法，跳转过去，找到执行结果，插桩。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410181915331.png" alt="image-20241018191551204"></p><p>那个一直报错，一细看，插错位置了。。。改到正确的位置，还是报错</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410181954680.png" alt="image-20241018195450625"></p><p>改成两个v0，可以保存，但是进去会闪退；</p><p>再回去改，弄成一个v0，这次没事了？？？（怀疑是classes2没有正常载入）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410182006616.png" alt="image-20241018200634573"></p><p>注意，算法助手需要联网才能正常捕获日志。。。（怪不得重试了好几次都没有日志）</p><p>成功。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410182012296.png" alt="image-20241018201228243"></p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410182011672.png" alt="image-20241018201146632"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/10/22/hello-world/"/>
    <url>/2024/10/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
